{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#jetpack-compose-starter","title":"Jetpack Compose Starter \ud83d\ude80","text":"<p>A robust, production-ready template for modern Android development that takes the pain out of setting up a new project. Built on the foundation of Now In Android's architecture, this template provides a comprehensive starting point for both new and experienced Android developers.</p>"},{"location":"#why-this-template","title":"Why This Template?","text":"<ul> <li>Production-Ready Authentication: Firebase authentication with Google Sign-In and email/password, including secure credential management</li> <li>Clean Architecture: Clear separation of concerns with a modular, scalable architecture</li> <li>Modern Tech Stack: Leverages the latest Android development tools and libraries including Jetpack Compose, Kotlin Coroutines, and Dagger Hilt</li> <li>Type-Safe Navigation: Fully typed navigation using Kotlin serialization</li> <li>Robust Data Management: Complete data layer with Repository pattern, Room database, and Preferences DataStore</li> <li>Network Communication: Retrofit + OkHttp setup with proper error handling and interceptors</li> <li>CI/CD: Automate build, release and Play Store deployment using GitHub actions and Fastlane</li> </ul> <p>Note</p> <p>The codebase follows a set of conventions that prioritize simplicity and maintainability. Understanding these patterns will help you develop effectively.</p>"},{"location":"#some-apps-built-using-this-template","title":"Some Apps Built Using This Template","text":"<p>Check out the whole list here.</p>"},{"location":"#technical-stack","title":"Technical Stack","text":""},{"location":"#core-libraries","title":"Core Libraries","text":"<ul> <li>UI: Jetpack Compose, Material3, Navigation Compose</li> <li>DI: Dagger Hilt</li> <li>Async: Kotlin Coroutines &amp; Flow</li> <li>Network: Retrofit, OkHttp, Kotlinx Serialization</li> <li>Storage: Room DB, DataStore Preferences</li> <li>Images: Coil</li> </ul>"},{"location":"#build-tools","title":"Build &amp; Tools","text":"<ul> <li>Kotlin 2.0</li> <li>Gradle 8.11.1 with Version Catalogs</li> <li>Java 21</li> <li>Custom Gradle Convention Plugins</li> <li>Spotless for code formatting</li> </ul>"},{"location":"#architecture-components","title":"Architecture Components","text":"<ul> <li>MVVM with Clean Architecture</li> <li>Repository Pattern  </li> <li>Modular design with feature isolation</li> <li>Firebase Authentication</li> <li>Single Activity</li> <li>DataStore for preferences</li> <li>Kotlinx Serialization for JSON</li> <li>Type-safe navigation</li> </ul>"},{"location":"#development-features","title":"Development Features","text":"<ul> <li>Debug/Release variants </li> <li>Firebase Crashlytics integration</li> <li>GitHub Actions CI/CD</li> <li>Automatic dependency updates with Renovate</li> <li>Code documentation with Dokka</li> </ul>"},{"location":"#project-architecture","title":"Project Architecture","text":"<pre><code>graph TD\n    A[App Module] --&gt; B[Auth]\n    A --&gt; H[Settings]\n    A --&gt; C[Storage:Preferences]\n    A --&gt; D[Storage:Room]\n    A --&gt; E[Network]\n    B --&gt; F[Core:UI]\n    H --&gt; B\n    H --&gt; C\n    B --&gt; C\n    B --&gt; G[Core:Android]\n    C --&gt; G\n    D --&gt; G\n    E --&gt; G\n    F --&gt; G</code></pre>"},{"location":"#architecture-layers","title":"Architecture Layers","text":"<p>The codebase follows a clean architecture pattern with clear separation of concerns across different layers. Each layer has specific responsibilities and dependencies flow inward, with the domain layer at the center.</p>"},{"location":"#data-layer","title":"Data Layer","text":"<p>The data layer is responsible for handling data operations and is organized into the following components:</p> <ul> <li>Data Sources: Located in <code>*DataSource</code> classes (e.g., <code>NetworkDataSource</code>, <code>AuthDataSource</code>)</li> <li>Handle raw data operations with external systems (API, database, etc.)</li> <li>Perform data transformations and mapping</li> <li>Example: <code>AuthDataSourceImpl</code> in the auth module handles raw Firebase authentication operations</li> </ul> <p>Note</p> <p>Data sources should expose Flow for observable data and suspend functions for one-shot operations:  <pre><code>interface DataSource {\n    fun observeData(): Flow&lt;Data&gt;\n    suspend fun updateData(data: Data)\n}\n</code></pre></p> <ul> <li>Models: Found in <code>models</code> packages across modules</li> <li>Define data structures for external data sources</li> <li>Contain serialization/deserialization logic</li> <li>Example: <code>NetworkPost</code> in the network module represents raw API responses</li> </ul> <p>Important</p> <p>Always keep data models immutable and use data classes:  <pre><code>data class NetworkResponse(\n    val id: Int,\n    val data: String\n)\n</code></pre></p> <p>The data layer is implemented across several modules: - <code>network/</code>: Handles remote API communication - <code>storage/preferences/</code>: Manages local data persistence using DataStore - <code>storage/room/</code>: Handles SQLite database operations using Room</p> <p>Warning</p> <p>Don't expose data source interfaces directly to ViewModels. Always go through repositories:  <pre><code>// DO THIS\nclass MyViewModel(\n    private val repository: MyRepository\n)\n\n// DON'T DO THIS\nclass MyViewModel(\n    private val dataSource: MyDataSource\n)\n</code></pre></p>"},{"location":"#repository-layer","title":"Repository Layer","text":"<p>The repository layer acts as a single source of truth and mediates between data sources:</p> <ul> <li>Repositories: Found in <code>repository</code> packages (e.g., <code>AuthRepository</code>)</li> <li>Coordinate between multiple data sources</li> <li>Implement business logic for data operations</li> <li>Abstract data sources from the UI layer</li> <li>Handle caching strategies</li> <li>Example: <code>AuthRepositoryImpl</code> coordinates between Firebase Auth and local preferences</li> </ul> <p>Key characteristics: - Uses Kotlin Result type for error handling - Implements caching where appropriate - Exposes Kotlin Flow for reactive data updates</p> <p>Important</p> <p>Always return <code>Result&lt;T&gt;</code> from repository methods. This ensures consistent error handling across the app:  <pre><code>suspend fun getData(): Result&lt;Data&gt; = suspendRunCatching {\n    dataSource.getData()\n}\n</code></pre></p>"},{"location":"#ui-layer","title":"UI Layer","text":"<p>The UI layer follows an MVVM pattern and consists of:</p> <ul> <li>ViewModels: Located in <code>ui</code> packages</li> <li>Manage UI state and business logic</li> <li>Handle user interactions</li> <li>Communicate with repositories</li> <li> <p>Example: <code>AuthViewModel</code> manages authentication state and user actions</p> </li> <li> <p>Screens: Found in <code>ui</code> packages alongside their ViewModels</p> </li> <li>Compose UI components</li> <li>Handle UI layouts and styling</li> <li>Observe ViewModel state</li> <li> <p>Example: <code>SignInScreen</code> displays login form and handles user input</p> </li> <li> <p>State Management:</p> </li> <li>Uses <code>UiState&lt;T&gt;</code> data class for managing loading, error, and success states</li> <li>Employs <code>StateFlow</code> for reactive UI updates</li> <li>Handles one-time events using <code>OneTimeEvent&lt;T&gt;</code></li> </ul> <p>Tip</p> <p>Always use <code>UiState</code> wrapper for ViewModel states. This ensures consistent error and loading handling across the app.  <pre><code>data class UiState&lt;T : Any&gt;(\n    val data: T,\n    val loading: Boolean = false,\n    val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null)\n)\n</code></pre></p> <p>Warning</p> <p>Don't create custom loading or error handling in individual screens. Use StatefulComposable instead:  <pre><code>// DON'T DO THIS\nif (isLoading) {\n    CircularProgressIndicator()\n}\n\n// DO THIS\nStatefulComposable(state = uiState) { data -&gt;\n    // Your UI content\n}\n</code></pre></p>"},{"location":"#data-flow","title":"Data Flow","text":"<p>The typical data flow follows this pattern:</p> <ol> <li> <p>UI Layer:    <pre><code>User Action \u2192 ViewModel \u2192 Repository\n</code></pre></p> </li> <li> <p>Repository Layer:    <pre><code>Repository \u2192 Data Sources \u2192 External Systems\n</code></pre></p> </li> <li> <p>Data Flow Back:    <pre><code>External Systems \u2192 Data Sources \u2192 Repository \u2192 ViewModel \u2192 UI\n</code></pre></p> </li> </ol>"},{"location":"#state-management-and-data-structures","title":"State Management and Data Structures","text":"<p>The codebase uses several key data structures for state management:</p> <ol> <li>UiState:    <pre><code>data class UiState&lt;T : Any&gt;(\n    val data: T,\n    val loading: Boolean = false,\n    val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null)\n)\n</code></pre> <li>Wraps UI data with loading and error states</li> <li> <p>Used by ViewModels to communicate state to UI</p> </li> <li> <p>Result: <li>Used by repositories to handle success/failure</li> <li>Propagates errors up the stack</li> <li> <p>Example: <code>Result&lt;AuthUser&gt;</code> for authentication operations</p> </li> <li> <p>StateFlow:</p> </li> <li>Used for reactive state management</li> <li>Provides hot, stateful event streams</li> <li> <p>Example: <code>_authUiState: MutableStateFlow&lt;UiState&lt;AuthScreenData&gt;&gt;</code></p> </li> <li> <p>OneTimeEvent: <li>Errors propagate up through Result <li>They get converted to OneTimeEvent when reaching the UI layer</li> <li>This ensures error Snackbars only show once and don't reappear on recomposition</li> <p>Important</p> <p>Use <code>StatefulComposable</code> for screens that need loading or error handling. This component handles these states automatically, reducing boilerplate and ensuring consistent behavior.  <pre><code>StatefulComposable(\n    state = viewModel.state,\n    onShowSnackbar = { msg, action -&gt; /* ... */ }\n) { data -&gt;\n    // Your UI content here\n}\n</code></pre></p> <p>Tip</p> <p>Use the provided extension functions for updating state:  <pre><code>// For regular state updates\n_uiState.updateState { copy(value = newValue) }\n\n// For async operations\n_uiState.updateStateWith(viewModelScope) {\n    repository.someAsyncOperation()\n}\n</code></pre></p>"},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>This codebase prioritizes pragmatic simplicity over theoretical purity, making conscious tradeoffs that favor maintainability and readability over absolute correctness or flexibility. Here are some key examples of this philosophy:</p>"},{"location":"#centralized-state-management","title":"Centralized State Management","text":""},{"location":"#simplified-error-and-loading-handling","title":"Simplified Error and Loading Handling","text":"<p>Instead of implementing error and loading states individually for each screen, we handle these centrally through the <code>StatefulComposable</code>:</p> <pre><code>@Composable\nfun &lt;T : Any&gt; StatefulComposable(\n    state: UiState&lt;T&gt;,\n    onShowSnackbar: suspend (String, String?) -&gt; Boolean,\n    content: @Composable (T) -&gt; Unit\n) {\n    content(state.data)\n\n    if (state.loading) {\n        // Centralized loading indicator\n    }\n\n    state.error.getContentIfNotHandled()?.let { error -&gt;\n        // Centralized error handling\n    }\n}\n</code></pre> <p>Tradeoff: - \u2705 Simplicity: UI components only need to focus on their happy path - \u2705 Consistency: Error and loading states behave uniformly across the app - \u274c Flexibility: Less control over specific error/loading UI for individual screens</p>"},{"location":"#direct-state-management-in-viewmodels","title":"Direct State Management in ViewModels","text":"<p>While the NowInAndroid codebase promotes a functional approach using Flow operators and transformations, we opt for a more direct approach using MutableStateFlow:</p> <pre><code>// Our simplified approach\nclass AuthViewModel @Inject constructor(\n    private val authRepository: AuthRepository,\n) : ViewModel() {\n    private val _authUiState = MutableStateFlow(UiState(AuthScreenData()))\n    val authUiState = _authUiState.asStateFlow()\n\n    fun updateEmail(email: String) {\n        _authUiState.updateState {\n            copy(\n                email = TextFiledData(\n                    value = email,\n                    errorMessage = if (email.isEmailValid()) null else \"Email Not Valid\"\n                )\n            )\n        }\n    }\n}\n</code></pre> <p>Tradeoff: - \u2705 Readability: State changes are explicit and easy to trace - \u2705 Simplicity: Easier to manage multiple UI events and loading states - \u2705 Debuggability: Direct state mutations are easier to debug - \u274c Purity: Less adherence to functional programming principles - \u274c Resource Management: No automatic cleanup of subscribers when the app is in background (compared to <code>SharingStarted.WhileSubscribed(5_000)</code>)</p> <p>Note</p> <p>These patterns are guidelines, not rules. The goal is to make the codebase more maintainable and easier to understand, not to restrict flexibility where it's truly needed.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Android Studio Hedgehog or newer</li> <li>JDK 21</li> <li>Firebase account for authentication and crashlytics</li> </ul>"},{"location":"#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Clone and open project: <pre><code>git clone https://github.com/atick-faisal/Jetpack-Compose-Starter.git\n</code></pre></p> </li> <li> <p>Firebase setup:</p> </li> <li>Create project in Firebase Console</li> <li>Download <code>google-services.json</code> to <code>app/</code></li> <li>Add SHA fingerprint to Firebase Console for Google Sign-In: <pre><code>./gradlew signingReport\n</code></pre></li> </ol> <p>Note</p> <p>Firebase authentication and crashlytics requires Firebase console setup and the <code>google-services.json</code> file. I have provided a template to ensure a successful build. However, you need to provide your own in order to use all the functionalities.</p> <ol> <li>Running the App or Demo:</li> </ol> <p>There is a demo application bundled with the template. To run it, select <code>demo</code> from the run configurations. To run the app, select <code>app</code> instead.     </p> <p>Important</p> <p>The demo module is completely optional and can be removed by:  - Deleting the <code>demo</code> directory  - Removing its entry from <code>settings.gradle.kts</code> </p>"},{"location":"#release-setup","title":"Release Setup","text":"<ol> <li> <p>Create <code>keystore.properties</code> in project root: <pre><code>storePassword=****\nkeyPassword=****\nkeyAlias=****\nstoreFile=keystore-file-name.jks\n</code></pre></p> </li> <li> <p>Place keystore file in <code>app/</code></p> </li> <li> <p>Build release: <pre><code>./gradlew assembleRelease\n</code></pre></p> </li> </ol>"},{"location":"#adding-a-new-feature-step-by-step-guide","title":"Adding a New Feature: Step-by-Step Guide","text":"<p>This guide walks through the process of adding a new feature to the app, following the established patterns and conventions.</p>"},{"location":"#step-1-define-data-models","title":"Step 1: Define Data Models","text":"<p>Start by defining your data models in the appropriate layer:</p> <ol> <li> <p>Network Models (if feature requires API calls): <pre><code>// network/src/main/kotlin/dev/atick/network/models/\n@Serializable\ndata class NetworkFeatureData(\n    val id: Int,\n    val title: String\n)\n</code></pre></p> </li> <li> <p>UI Models (what your screen will display): <pre><code>// feature/src/main/kotlin/dev/atick/feature/models/\ndata class FeatureScreenData(\n    val title: String,\n    val description: String = \"\",\n    // ... other UI state\n)\n</code></pre></p> </li> </ol>"},{"location":"#step-2-create-data-source","title":"Step 2: Create Data Source","text":"<ol> <li> <p>Define the interface: <pre><code>// feature/src/main/kotlin/dev/atick/feature/data/\ninterface FeatureDataSource {\n    suspend fun getFeatureData(): List&lt;NetworkFeatureData&gt;\n    fun observeFeatureData(): Flow&lt;List&lt;NetworkFeatureData&gt;&gt;\n}\n</code></pre></p> </li> <li> <p>Implement the data source: <pre><code>class FeatureDataSourceImpl @Inject constructor(\n    private val api: FeatureApi,\n    @IoDispatcher private val ioDispatcher: CoroutineDispatcher\n) : FeatureDataSource {\n    override suspend fun getFeatureData(): List&lt;NetworkFeatureData&gt; {\n        return withContext(ioDispatcher) {\n            api.getFeatureData()\n        }\n    }\n\n    override fun observeFeatureData(): Flow&lt;List&lt;NetworkFeatureData&gt;&gt; {\n        return flow {\n            // Implementation\n        }.flowOn(ioDispatcher)\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-3-create-repository","title":"Step 3: Create Repository","text":"<ol> <li> <p>Define repository interface: <pre><code>// feature/src/main/kotlin/dev/atick/feature/repository/\ninterface FeatureRepository {\n    suspend fun getFeatureData(): Result&lt;List&lt;FeatureData&gt;&gt;\n}\n</code></pre></p> </li> <li> <p>Implement repository: <pre><code>class FeatureRepositoryImpl @Inject constructor(\n    private val dataSource: FeatureDataSource\n) : FeatureRepository {\n    override suspend fun getFeatureData(): Result&lt;List&lt;FeatureData&gt;&gt; = \n        suspendRunCatching {\n            dataSource.getFeatureData().map { it.toFeatureData() }\n        }\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-4-create-viewmodel","title":"Step 4: Create ViewModel","text":"<pre><code>// feature/src/main/kotlin/dev/atick/feature/ui/\n@HiltViewModel\nclass FeatureViewModel @Inject constructor(\n    private val repository: FeatureRepository\n) : ViewModel() {\n    private val _uiState = MutableStateFlow(UiState(FeatureScreenData()))\n    val uiState = _uiState.asStateFlow()\n\n    init {\n        loadData()\n    }\n\n    private fun loadData() {\n        _uiState.updateStateWith(viewModelScope) {\n            repository.getFeatureData()\n                .map { data -&gt; /* transform to screen data */ }\n        }\n    }\n\n    fun onUserAction(/* params */) {\n        _uiState.updateState {\n            copy(/* update state */)\n        }\n    }\n}\n</code></pre>"},{"location":"#step-5-create-ui-components","title":"Step 5: Create UI Components","text":"<ol> <li> <p>Create screen composable: <pre><code>// feature/src/main/kotlin/dev/atick/feature/ui/\n@Composable\nfun FeatureRoute(\n    onShowSnackbar: suspend (String, String?) -&gt; Boolean,\n    viewModel: FeatureViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n\n    StatefulComposable(\n        state = uiState,\n        onShowSnackbar = onShowSnackbar\n    ) { screenData -&gt;\n        FeatureScreen(\n            screenData = screenData,\n            onAction = viewModel::onUserAction\n        )\n    }\n}\n\n@Composable\nprivate fun FeatureScreen(\n    screenData: FeatureScreenData,\n    onAction: () -&gt; Unit\n) {\n    // UI implementation\n}\n</code></pre></p> </li> <li> <p>Add preview: <pre><code>@DevicePreviews\n@Composable\nprivate fun FeatureScreenPreview() {\n    FeatureScreen(\n        screenData = FeatureScreenData(/* sample data */),\n        onAction = {}\n    )\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-6-setup-navigation","title":"Step 6: Setup Navigation","text":"<ol> <li> <p>Define navigation endpoints: <pre><code>// feature/src/main/kotlin/dev/atick/feature/navigation/\n@Serializable\ndata object FeatureNavGraph\n@Serializable\ndata object Feature\n</code></pre></p> </li> <li> <p>Add navigation extensions: <pre><code>fun NavController.navigateToFeature(navOptions: NavOptions? = null) {\n    navigate(Feature, navOptions)\n}\n\nfun NavGraphBuilder.featureScreen(\n    onShowSnackbar: suspend (String, String?) -&gt; Boolean\n) {\n    composable&lt;Feature&gt; {\n        FeatureRoute(\n            onShowSnackbar = onShowSnackbar\n        )\n    }\n}\n\nfun NavGraphBuilder.featureNavGraph(\n    nestedGraphs: NavGraphBuilder.() -&gt; Unit\n) {\n    navigation&lt;FeatureNavGraph&gt;(\n        startDestination = Feature\n    ) {\n        nestedGraphs()\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-7-setup-dependency-injection","title":"Step 7: Setup Dependency Injection","text":"<ol> <li> <p>Add module for data source: <pre><code>@Module\n@InstallIn(SingletonComponent::class)\nabstract class DataSourceModule {\n    @Binds\n    @Singleton\n    abstract fun bindFeatureDataSource(\n        impl: FeatureDataSourceImpl\n    ): FeatureDataSource\n}\n</code></pre></p> </li> <li> <p>Add module for repository: <pre><code>@Module\n@InstallIn(SingletonComponent::class)\nabstract class RepositoryModule {\n    @Binds\n    @Singleton\n    abstract fun bindFeatureRepository(\n        impl: FeatureRepositoryImpl\n    ): FeatureRepository\n}\n</code></pre></p> </li> </ol>"},{"location":"#final-checklist","title":"Final Checklist","text":"<p>\u2705 Data models defined \u2705 Data source interface and implementation created \u2705 Repository interface and implementation created \u2705 ViewModel handling state and user actions \u2705 UI components with previews \u2705 Navigation setup \u2705 Dependency injection modules  </p>"},{"location":"#documentation","title":"Documentation","text":"<p> Read The Documentation Here </p> <p></p> <p>Qatar University Machine Learning Group <p></p>"},{"location":"app/","title":"Index","text":"<p>//app</p>"},{"location":"app/#app","title":"app","text":""},{"location":"app/#packages","title":"Packages","text":"Name dev.atick.compose dev.atick.compose.data.home dev.atick.compose.di.repository dev.atick.compose.navigation dev.atick.compose.navigation.home dev.atick.compose.repository.home dev.atick.compose.ui dev.atick.compose.ui.home"},{"location":"app/app/dev.atick.compose/","title":"Index","text":"<p>//app/dev.atick.compose</p>"},{"location":"app/app/dev.atick.compose/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose/#types","title":"Types","text":"Name Summary App [androidJvm]class App : ApplicationThe main application class that extends Application and is annotated with HiltAndroidApp. MainActivity [androidJvm]class MainActivity : ComponentActivityMain activity for the application. MainActivityViewModel [androidJvm]class MainActivityViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModelAnnotates a ViewModel class that is managed by Hilt's dependency injection system. ThemeSettings [androidJvm]data class ThemeSettings(val darkTheme: Boolean, val disableDynamicTheming: Boolean = true)Class for the system theme settings. This wrapping class allows us to combine all the changes and prevent unnecessary recompositions."},{"location":"app/app/dev.atick.compose/-app/","title":"Index","text":"<p>//app/dev.atick.compose/App</p>"},{"location":"app/app/dev.atick.compose/-app/#app","title":"App","text":"<p>[androidJvm]\\ class App : Application</p> <p>The main application class that extends Application and is annotated with HiltAndroidApp.</p>"},{"location":"app/app/dev.atick.compose/-app/#constructors","title":"Constructors","text":"App [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose/-app/#functions","title":"Functions","text":"Name Summary bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getResources [androidJvm]open override fun getResources(): Resources getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]fun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): Topen override fun getSystemService(p0: String): Any getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(p0: Configuration) onCreate [androidJvm]open override fun onCreate()Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode. onLowMemory [androidJvm]open override fun onLowMemory() onTerminate [androidJvm]open fun onTerminate() onTrimMemory [androidJvm]open override fun onTrimMemory(p0: Int) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerOnProvideAssistDataListener [androidJvm]open fun registerOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setTheme [androidJvm]open override fun setTheme(p0: Int) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopService [androidJvm]open override fun stopService(p0: Intent): Boolean unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterOnProvideAssistDataListener [androidJvm]open fun unregisterOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"app/app/dev.atick.compose/-app/-app/","title":"app","text":"<p>//app/dev.atick.compose/App/App</p>"},{"location":"app/app/dev.atick.compose/-app/-app/#app","title":"App","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose/-app/on-create/","title":"On create","text":"<p>//app/dev.atick.compose/App/onCreate</p>"},{"location":"app/app/dev.atick.compose/-app/on-create/#oncreate","title":"onCreate","text":"<p>[androidJvm]\\ open override fun onCreate()</p> <p>Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode.</p>"},{"location":"app/app/dev.atick.compose/-main-activity/","title":"Index","text":"<p>//app/dev.atick.compose/MainActivity</p>"},{"location":"app/app/dev.atick.compose/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ class MainActivity : ComponentActivity</p> <p>Main activity for the application.</p>"},{"location":"app/app/dev.atick.compose/-main-activity/#constructors","title":"Constructors","text":"MainActivity [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose/-main-activity/#properties","title":"Properties","text":"Name Summary activityResultRegistry [androidJvm]override val activityResultRegistry: ActivityResultRegistry defaultViewModelCreationExtras [androidJvm]open override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]open override val defaultViewModelProviderFactory: ViewModelProvider.Factory fullyDrawnReporter [androidJvm]open override val fullyDrawnReporter: FullyDrawnReporter lastCustomNonConfigurationInstance [androidJvm]open val lastCustomNonConfigurationInstance: Any? lifecycle [androidJvm]open override val lifecycle: Lifecycle networkUtils [androidJvm]@Injectlateinit var networkUtils: NetworkUtils onBackPressedDispatcher [androidJvm]override val onBackPressedDispatcher: OnBackPressedDispatcher savedStateRegistry [androidJvm]override val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]open override val viewModelStore: ViewModelStore"},{"location":"app/app/dev.atick.compose/-main-activity/#functions","title":"Functions","text":"Name Summary addContentView [androidJvm]open override fun addContentView(view: View?, params: ViewGroup.LayoutParams?) addMenuProvider [androidJvm]open override fun addMenuProvider(provider: MenuProvider)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner, state: Lifecycle.State) addOnConfigurationChangedListener [androidJvm]override fun addOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) addOnContextAvailableListener [androidJvm]override fun addOnContextAvailableListener(listener: OnContextAvailableListener) addOnMultiWindowModeChangedListener [androidJvm]override fun addOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) addOnNewIntentListener [androidJvm]override fun addOnNewIntentListener(listener: Consumer&lt;Intent&gt;) addOnPictureInPictureModeChangedListener [androidJvm]override fun addOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) addOnTrimMemoryListener [androidJvm]override fun addOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) addOnUserLeaveHintListener [androidJvm]override fun addOnUserLeaveHintListener(listener: Runnable) applyOverrideConfiguration [androidJvm]open fun applyOverrideConfiguration(p0: Configuration) bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearOverrideActivityTransition [androidJvm]open fun clearOverrideActivityTransition(p0: Int) clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() closeContextMenu [androidJvm]open fun closeContextMenu() closeOptionsMenu [androidJvm]open fun closeOptionsMenu() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createPendingResult [androidJvm]open fun createPendingResult(p0: Int, p1: Intent, p2: Int): PendingIntent createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean dismissDialog [androidJvm]fun ~~dismissDialog~~(p0: Int) dismissKeyboardShortcutsHelper [androidJvm]fun dismissKeyboardShortcutsHelper() dispatchGenericMotionEvent [androidJvm]open override fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchKeyEvent [androidJvm]open override fun dispatchKeyEvent(event: KeyEvent): Boolean dispatchKeyShortcutEvent [androidJvm]open override fun dispatchKeyShortcutEvent(event: KeyEvent): Boolean dispatchPopulateAccessibilityEvent [androidJvm]open override fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchTouchEvent [androidJvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [androidJvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dump [androidJvm]open fun dump(p0: String, p1: FileDescriptor?, p2: PrintWriter, p3: Array&lt;String&gt;?) enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) enterPictureInPictureMode [androidJvm]open fun ~~enterPictureInPictureMode~~()open fun enterPictureInPictureMode(p0: PictureInPictureParams): Boolean fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; findViewById [androidJvm]open fun &lt;T : View&gt; findViewById(p0: Int): T finish [androidJvm]open fun finish() finishActivity [androidJvm]open fun finishActivity(p0: Int) finishActivityFromChild [androidJvm]open fun ~~finishActivityFromChild~~(p0: Activity, p1: Int) finishAffinity [androidJvm]open fun finishAffinity() finishAfterTransition [androidJvm]open fun finishAfterTransition() finishAndRemoveTask [androidJvm]open fun finishAndRemoveTask() finishFromChild [androidJvm]open fun ~~finishFromChild~~(p0: Activity) getActionBar [androidJvm]open fun getActionBar(): ActionBar? getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getCaller [androidJvm]open fun getCaller(): ComponentCaller? getCallingActivity [androidJvm]open fun getCallingActivity(): ComponentName? getCallingPackage [androidJvm]open fun getCallingPackage(): String? getChangingConfigurations [androidJvm]open fun getChangingConfigurations(): Int getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getComponentName [androidJvm]open fun getComponentName(): ComponentName getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getContentScene [androidJvm]open fun getContentScene(): Scene getContentTransitionManager [androidJvm]open fun getContentTransitionManager(): TransitionManager getCurrentCaller [androidJvm]open fun getCurrentCaller(): ComponentCaller getCurrentFocus [androidJvm]open fun getCurrentFocus(): View? getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getExtraData [androidJvm]open fun &lt;T : ComponentActivity.ExtraData&gt; ~~getExtraData~~(extraDataClass: Class&lt;T&gt;): T? getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getFragmentManager [androidJvm]open fun ~~getFragmentManager~~(): FragmentManager getInitialCaller [androidJvm]open fun getInitialCaller(): ComponentCaller getIntent [androidJvm]open fun getIntent(): Intent getLastNonConfigurationInstance [androidJvm]open fun getLastNonConfigurationInstance(): Any? getLaunchedFromPackage [androidJvm]open fun getLaunchedFromPackage(): String? getLaunchedFromUid [androidJvm]open fun getLaunchedFromUid(): Int getLayoutInflater [androidJvm]open fun getLayoutInflater(): LayoutInflater getLoaderManager [androidJvm]open fun ~~getLoaderManager~~(): LoaderManager getLocalClassName [androidJvm]open fun getLocalClassName(): String getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getMaxNumPictureInPictureActions [androidJvm]open fun getMaxNumPictureInPictureActions(): Int getMediaController [androidJvm]fun getMediaController(): MediaController getMenuInflater [androidJvm]open fun getMenuInflater(): MenuInflater getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOnBackInvokedDispatcher [androidJvm]open fun getOnBackInvokedDispatcher(): OnBackInvokedDispatcher getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getParent [androidJvm]fun ~~getParent~~(): Activity getParentActivityIntent [androidJvm]open fun getParentActivityIntent(): Intent? getPreferences [androidJvm]open fun getPreferences(p0: Int): SharedPreferences getReferrer [androidJvm]open fun getReferrer(): Uri? getRequestedOrientation [androidJvm]open fun getRequestedOrientation(): Int getResources [androidJvm]open override fun getResources(): Resources getSearchEvent [androidJvm]fun getSearchEvent(): SearchEvent getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getSplashScreen [androidJvm]fun getSplashScreen(): SplashScreen getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]open override fun getSystemService(p0: String): Anyfun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): T getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getTaskId [androidJvm]open fun getTaskId(): Int getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getTitle [androidJvm]fun getTitle(): CharSequence getTitleColor [androidJvm]fun getTitleColor(): Int getVoiceInteractor [androidJvm]open fun getVoiceInteractor(): VoiceInteractor getVolumeControlStream [androidJvm]fun getVolumeControlStream(): Int getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int getWindow [androidJvm]open fun getWindow(): Window getWindowManager [androidJvm]open fun getWindowManager(): WindowManager grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) hasWindowFocus [androidJvm]open fun hasWindowFocus(): Boolean initializeViewTreeOwners [androidJvm]open fun initializeViewTreeOwners() invalidateMenu [androidJvm]open override fun invalidateMenu() invalidateOptionsMenu [androidJvm]open fun invalidateOptionsMenu() isActivityTransitionRunning [androidJvm]open fun isActivityTransitionRunning(): Boolean isChangingConfigurations [androidJvm]open fun isChangingConfigurations(): Boolean isChild [androidJvm]fun ~~isChild~~(): Boolean isDestroyed [androidJvm]open fun isDestroyed(): Boolean isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isFinishing [androidJvm]open fun isFinishing(): Boolean isImmersive [androidJvm]open fun isImmersive(): Boolean isInMultiWindowMode [androidJvm]open fun isInMultiWindowMode(): Boolean isInPictureInPictureMode [androidJvm]open fun isInPictureInPictureMode(): Boolean isLaunchedFromBubble [androidJvm]open fun isLaunchedFromBubble(): Boolean isLocalVoiceInteractionSupported [androidJvm]open fun isLocalVoiceInteractionSupported(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isTaskRoot [androidJvm]open fun isTaskRoot(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean isVoiceInteraction [androidJvm]open fun isVoiceInteraction(): Boolean isVoiceInteractionRoot [androidJvm]open fun isVoiceInteractionRoot(): Boolean managedQuery [androidJvm]fun ~~managedQuery~~(p0: Uri, p1: Array&lt;String&gt;, p2: String, p3: Array&lt;String&gt;, p4: String): Cursor moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean moveTaskToBack [androidJvm]open fun moveTaskToBack(p0: Boolean): Boolean navigateUpTo [androidJvm]open fun navigateUpTo(p0: Intent): Boolean navigateUpToFromChild [androidJvm]open fun ~~navigateUpToFromChild~~(p0: Activity, p1: Intent): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onActionModeFinished [androidJvm]open override fun onActionModeFinished(p0: ActionMode) onActionModeStarted [androidJvm]open override fun onActionModeStarted(p0: ActionMode) onActivityReenter [androidJvm]open fun onActivityReenter(p0: Int, p1: Intent) onActivityResult [androidJvm]open fun onActivityResult(p0: Int, p1: Int, p2: Intent?, p3: ComponentCaller) onAttachedToWindow [androidJvm]open override fun onAttachedToWindow() onAttachFragment [androidJvm]open fun ~~onAttachFragment~~(p0: Fragment) onBackPressed [androidJvm]open override fun ~~onBackPressed~~() onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(newConfig: Configuration) onContentChanged [androidJvm]open override fun onContentChanged() onContextItemSelected [androidJvm]open fun onContextItemSelected(p0: MenuItem): Boolean onContextMenuClosed [androidJvm]open fun onContextMenuClosed(p0: Menu) onCreate [androidJvm]open fun onCreate(p0: Bundle?, p1: PersistableBundle?) onCreateContextMenu [androidJvm]open override fun onCreateContextMenu(p0: ContextMenu, p1: View, p2: ContextMenu.ContextMenuInfo) onCreateDescription [androidJvm]open fun onCreateDescription(): CharSequence? onCreateNavigateUpTaskStack [androidJvm]open fun onCreateNavigateUpTaskStack(p0: TaskStackBuilder) onCreateOptionsMenu [androidJvm]open fun onCreateOptionsMenu(p0: Menu): Boolean onCreatePanelMenu [androidJvm]open override fun onCreatePanelMenu(featureId: Int, menu: Menu): Boolean onCreatePanelView [androidJvm]open override fun onCreatePanelView(p0: Int): View? onCreateThumbnail [androidJvm]open fun ~~onCreateThumbnail~~(p0: Bitmap, p1: Canvas): Boolean onCreateView [androidJvm]open override fun onCreateView(p0: String, p1: Context, p2: AttributeSet): View?open override fun onCreateView(p0: View?, p1: String, p2: Context, p3: AttributeSet): View? onDetachedFromWindow [androidJvm]open override fun onDetachedFromWindow() onEnterAnimationComplete [androidJvm]open fun onEnterAnimationComplete() onGenericMotionEvent [androidJvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onGetDirectActions [androidJvm]open fun onGetDirectActions(p0: CancellationSignal, p1: Consumer&lt;MutableList&lt;DirectAction&gt;&gt;) onKeyDown [androidJvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [androidJvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [androidJvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyShortcut [androidJvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [androidJvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onLocalVoiceInteractionStarted [androidJvm]open fun onLocalVoiceInteractionStarted() onLocalVoiceInteractionStopped [androidJvm]open fun onLocalVoiceInteractionStopped() onLowMemory [androidJvm]open override fun onLowMemory() onMenuItemSelected [androidJvm]open override fun onMenuItemSelected(featureId: Int, item: MenuItem): Boolean onMenuOpened [androidJvm]open override fun onMenuOpened(p0: Int, p1: Menu): Boolean onMultiWindowModeChanged [androidJvm]open override fun ~~onMultiWindowModeChanged~~(isInMultiWindowMode: Boolean)open override fun onMultiWindowModeChanged(isInMultiWindowMode: Boolean, newConfig: Configuration) onNavigateUp [androidJvm]open fun onNavigateUp(): Boolean onNavigateUpFromChild [androidJvm]open fun ~~onNavigateUpFromChild~~(p0: Activity): Boolean onNewIntent [androidJvm]open fun onNewIntent(p0: Intent, p1: ComponentCaller) onOptionsItemSelected [androidJvm]open fun onOptionsItemSelected(p0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]open fun onOptionsMenuClosed(p0: Menu) onPanelClosed [androidJvm]open override fun onPanelClosed(featureId: Int, menu: Menu) onPerformDirectAction [androidJvm]open fun onPerformDirectAction(p0: String, p1: Bundle, p2: CancellationSignal, p3: Consumer&lt;Bundle&gt;) onPictureInPictureModeChanged [androidJvm]open override fun ~~onPictureInPictureModeChanged~~(isInPictureInPictureMode: Boolean)open override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration) onPictureInPictureRequested [androidJvm]open fun onPictureInPictureRequested(): Boolean onPictureInPictureUiStateChanged [androidJvm]open fun onPictureInPictureUiStateChanged(p0: PictureInPictureUiState) onPointerCaptureChanged [androidJvm]open fun onPointerCaptureChanged(p0: Boolean) onPostCreate [androidJvm]open fun onPostCreate(p0: Bundle?, p1: PersistableBundle?) onPrepareNavigateUpTaskStack [androidJvm]open fun onPrepareNavigateUpTaskStack(p0: TaskStackBuilder) onPrepareOptionsMenu [androidJvm]open fun onPrepareOptionsMenu(p0: Menu): Boolean onPreparePanel [androidJvm]open override fun onPreparePanel(featureId: Int, view: View?, menu: Menu): Boolean onProvideAssistContent [androidJvm]open fun onProvideAssistContent(p0: AssistContent) onProvideAssistData [androidJvm]open fun onProvideAssistData(p0: Bundle) onProvideKeyboardShortcuts [androidJvm]open override fun onProvideKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Menu?, p2: Int) onProvideReferrer [androidJvm]open fun onProvideReferrer(): Uri onRequestPermissionsResult [androidJvm]open fun onRequestPermissionsResult(p0: Int, p1: Array&lt;String&gt;, p2: IntArray, p3: Int)open override fun ~~onRequestPermissionsResult~~(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) onRestoreInstanceState [androidJvm]open fun onRestoreInstanceState(p0: Bundle?, p1: PersistableBundle?) onRetainCustomNonConfigurationInstance [androidJvm]open fun ~~onRetainCustomNonConfigurationInstance~~(): Any? onRetainNonConfigurationInstance [androidJvm]override fun onRetainNonConfigurationInstance(): Any? onSaveInstanceState [androidJvm]open fun onSaveInstanceState(p0: Bundle, p1: PersistableBundle) onSearchRequested [androidJvm]open override fun onSearchRequested(): Booleanopen override fun onSearchRequested(p0: SearchEvent?): Boolean onStateNotSaved [androidJvm]open fun ~~onStateNotSaved~~() onTopResumedActivityChanged [androidJvm]open fun onTopResumedActivityChanged(p0: Boolean) onTouchEvent [androidJvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [androidJvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onTrimMemory [androidJvm]open override fun onTrimMemory(level: Int) onUserInteraction [androidJvm]open fun onUserInteraction() onVisibleBehindCanceled [androidJvm]open fun ~~onVisibleBehindCanceled~~() onWindowAttributesChanged [androidJvm]open override fun onWindowAttributesChanged(p0: WindowManager.LayoutParams) onWindowFocusChanged [androidJvm]open override fun onWindowFocusChanged(p0: Boolean) onWindowStartingActionMode [androidJvm]open override fun onWindowStartingActionMode(p0: ActionMode.Callback): ActionMode?open override fun onWindowStartingActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? openContextMenu [androidJvm]open fun openContextMenu(p0: View) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOptionsMenu [androidJvm]open fun openOptionsMenu() openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase overrideActivityTransition [androidJvm]open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int)open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int, p3: Int) overridePendingTransition [androidJvm]open fun ~~overridePendingTransition~~(p0: Int, p1: Int)open fun ~~overridePendingTransition~~(p0: Int, p1: Int, p2: Int) peekAvailableContext [androidJvm]open override fun peekAvailableContext(): Context? peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable postponeEnterTransition [androidJvm]open fun postponeEnterTransition() putExtraData [androidJvm]open fun ~~putExtraData~~(extraData: ComponentActivity.ExtraData) recreate [androidJvm]open fun recreate() registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerForActivityResult [androidJvm]override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, registry: ActivityResultRegistry, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(p0: View) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? registerScreenCaptureCallback [androidJvm]open fun registerScreenCaptureCallback(p0: Executor, p1: Activity.ScreenCaptureCallback) releaseInstance [androidJvm]open fun releaseInstance(): Boolean removeDialog [androidJvm]fun ~~removeDialog~~(p0: Int) removeMenuProvider [androidJvm]open override fun removeMenuProvider(provider: MenuProvider) removeOnConfigurationChangedListener [androidJvm]override fun removeOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) removeOnContextAvailableListener [androidJvm]override fun removeOnContextAvailableListener(listener: OnContextAvailableListener) removeOnMultiWindowModeChangedListener [androidJvm]override fun removeOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) removeOnNewIntentListener [androidJvm]override fun removeOnNewIntentListener(listener: Consumer&lt;Intent&gt;) removeOnPictureInPictureModeChangedListener [androidJvm]override fun removeOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) removeOnTrimMemoryListener [androidJvm]override fun removeOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) removeOnUserLeaveHintListener [androidJvm]override fun removeOnUserLeaveHintListener(listener: Runnable) removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) reportFullyDrawn [androidJvm]open override fun reportFullyDrawn() requestDragAndDropPermissions [androidJvm]open fun requestDragAndDropPermissions(p0: DragEvent): DragAndDropPermissions requestFullscreenMode [androidJvm]open fun requestFullscreenMode(p0: Int, p1: OutcomeReceiver&lt;Void, Throwable&gt;?) requestPermissions [androidJvm]fun requestPermissions(p0: Array&lt;String&gt;, p1: Int)fun requestPermissions(p0: Array&lt;String&gt;, p1: Int, p2: Int) requestShowKeyboardShortcuts [androidJvm]fun requestShowKeyboardShortcuts() requestVisibleBehind [androidJvm]open fun ~~requestVisibleBehind~~(p0: Boolean): Boolean requestWindowFeature [androidJvm]fun requestWindowFeature(p0: Int): Boolean requireViewById [androidJvm]fun &lt;T : View&gt; requireViewById(p0: Int): T &amp; Any revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) runOnUiThread [androidJvm]fun runOnUiThread(p0: Runnable) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setActionBar [androidJvm]open fun setActionBar(p0: Toolbar?) setAllowCrossUidActivitySwitchFromBelow [androidJvm]open fun setAllowCrossUidActivitySwitchFromBelow(p0: Boolean) setContentTransitionManager [androidJvm]open fun setContentTransitionManager(p0: TransitionManager) setContentView [androidJvm]open override fun setContentView(view: View?)open override fun setContentView(layoutResID: Int)open override fun setContentView(view: View?, params: ViewGroup.LayoutParams?) setDefaultKeyMode [androidJvm]fun setDefaultKeyMode(p0: Int) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(p0: SharedElementCallback) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(p0: SharedElementCallback) setFeatureDrawable [androidJvm]fun setFeatureDrawable(p0: Int, p1: Drawable) setFeatureDrawableAlpha [androidJvm]fun setFeatureDrawableAlpha(p0: Int, p1: Int) setFeatureDrawableResource [androidJvm]fun setFeatureDrawableResource(p0: Int, p1: Int) setFeatureDrawableUri [androidJvm]fun setFeatureDrawableUri(p0: Int, p1: Uri) setFinishOnTouchOutside [androidJvm]open fun setFinishOnTouchOutside(p0: Boolean) setImmersive [androidJvm]open fun setImmersive(p0: Boolean) setInheritShowWhenLocked [androidJvm]open fun setInheritShowWhenLocked(p0: Boolean) setIntent [androidJvm]open fun setIntent(p0: Intent)open fun setIntent(p0: Intent?, p1: ComponentCaller?) setLocusContext [androidJvm]open fun setLocusContext(p0: LocusId?, p1: Bundle?) setMediaController [androidJvm]fun setMediaController(p0: MediaController) setPictureInPictureParams [androidJvm]open fun setPictureInPictureParams(p0: PictureInPictureParams) setProgress [androidJvm]fun ~~setProgress~~(p0: Int) setProgressBarIndeterminate [androidJvm]fun ~~setProgressBarIndeterminate~~(p0: Boolean) setProgressBarIndeterminateVisibility [androidJvm]fun ~~setProgressBarIndeterminateVisibility~~(p0: Boolean) setProgressBarVisibility [androidJvm]fun ~~setProgressBarVisibility~~(p0: Boolean) setRecentsScreenshotEnabled [androidJvm]open fun setRecentsScreenshotEnabled(p0: Boolean) setRequestedOrientation [androidJvm]open fun setRequestedOrientation(p0: Int) setResult [androidJvm]fun setResult(p0: Int)fun setResult(p0: Int, p1: Intent) setSecondaryProgress [androidJvm]fun ~~setSecondaryProgress~~(p0: Int) setShouldDockBigOverlays [androidJvm]open fun setShouldDockBigOverlays(p0: Boolean) setShowWhenLocked [androidJvm]open fun setShowWhenLocked(p0: Boolean) setTaskDescription [androidJvm]open fun setTaskDescription(p0: ActivityManager.TaskDescription) setTheme [androidJvm]open override fun setTheme(p0: Int)open fun setTheme(p0: Resources.Theme?) setTitle [androidJvm]open fun setTitle(p0: CharSequence)open fun setTitle(p0: Int) setTitleColor [androidJvm]open fun ~~setTitleColor~~(p0: Int) setTranslucent [androidJvm]open fun setTranslucent(p0: Boolean): Boolean setTurnScreenOn [androidJvm]open fun setTurnScreenOn(p0: Boolean) setVisible [androidJvm]open fun setVisible(p0: Boolean) setVolumeControlStream [androidJvm]fun setVolumeControlStream(p0: Int) setVrModeEnabled [androidJvm]open fun setVrModeEnabled(p0: Boolean, p1: ComponentName) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) shouldDockBigOverlays [androidJvm]open fun shouldDockBigOverlays(): Boolean shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(p0: String): Booleanopen fun shouldShowRequestPermissionRationale(p0: String, p1: Int): Boolean shouldUpRecreateTask [androidJvm]open fun shouldUpRecreateTask(p0: Intent): Boolean showAssist [androidJvm]open fun showAssist(p0: Bundle): Boolean showDialog [androidJvm]fun ~~showDialog~~(p0: Int)fun ~~showDialog~~(p0: Int, p1: Bundle): Boolean showLockTaskEscapeMessage [androidJvm]open fun showLockTaskEscapeMessage() startActionMode [androidJvm]open fun startActionMode(p0: ActionMode.Callback): ActionMode?open fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startActivityForResult [androidJvm]open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int)open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int, options: Bundle?) startActivityFromChild [androidJvm]open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int)open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int, p3: Bundle?) startActivityFromFragment [androidJvm]open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int)open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int, p3: Bundle?) startActivityIfNeeded [androidJvm]open fun startActivityIfNeeded(p0: Intent, p1: Int): Booleanopen fun startActivityIfNeeded(p0: Intent, p1: Int, p2: Bundle?): Boolean startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startIntentSenderForResult [androidJvm]open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int)open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int, options: Bundle?) startIntentSenderFromChild [androidJvm]open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int)open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int, p7: Bundle?) startLocalVoiceInteraction [androidJvm]open fun startLocalVoiceInteraction(p0: Bundle) startLockTask [androidJvm]open fun startLockTask() startManagingCursor [androidJvm]open fun ~~startManagingCursor~~(p0: Cursor) startNextMatchingActivity [androidJvm]open fun startNextMatchingActivity(p0: Intent): Booleanopen fun startNextMatchingActivity(p0: Intent, p1: Bundle?): Boolean startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() startSearch [androidJvm]open fun startSearch(p0: String?, p1: Boolean, p2: Bundle?, p3: Boolean) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopLocalVoiceInteraction [androidJvm]open fun stopLocalVoiceInteraction() stopLockTask [androidJvm]open fun stopLockTask() stopManagingCursor [androidJvm]open fun ~~stopManagingCursor~~(p0: Cursor) stopService [androidJvm]open override fun stopService(p0: Intent): Boolean superDispatchKeyEvent [androidJvm]open override fun superDispatchKeyEvent(event: KeyEvent): Boolean takeKeyEvents [androidJvm]open fun takeKeyEvents(p0: Boolean) triggerSearch [androidJvm]open fun triggerSearch(p0: String, p1: Bundle?) unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(p0: View) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) unregisterScreenCaptureCallback [androidJvm]open fun unregisterScreenCaptureCallback(p0: Activity.ScreenCaptureCallback) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"app/app/dev.atick.compose/-main-activity/-main-activity/","title":"main activity","text":"<p>//app/dev.atick.compose/MainActivity/MainActivity</p>"},{"location":"app/app/dev.atick.compose/-main-activity/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose/-main-activity/network-utils/","title":"Network utils","text":"<p>//app/dev.atick.compose/MainActivity/networkUtils</p>"},{"location":"app/app/dev.atick.compose/-main-activity/network-utils/#networkutils","title":"networkUtils","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var networkUtils: NetworkUtils</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/","title":"Index","text":"<p>//app/dev.atick.compose/MainActivityViewModel</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>class MainActivityViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModel</p> <p>Annotates a ViewModel class that is managed by Hilt's dependency injection system.</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepository The repository providing access to user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#constructors","title":"Constructors","text":"MainActivityViewModel [androidJvm]@Injectconstructor(settingsRepository: SettingsRepository)Creates a MainActivityViewModel instance."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#properties","title":"Properties","text":"Name Summary uiState [androidJvm]val uiState: StateFlow&lt;UiState&lt;UserData&gt;&gt;Represents the state of the UI for user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/","title":"main activity view model","text":"<p>//app/dev.atick.compose/MainActivityViewModel/MainActivityViewModel</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(settingsRepository: SettingsRepository)</p> <p>Creates a MainActivityViewModel instance.</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepository The repository providing access to user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/ui-state/","title":"Ui state","text":"<p>//app/dev.atick.compose/MainActivityViewModel/uiState</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/ui-state/#uistate","title":"uiState","text":"<p>[androidJvm]\\ val uiState: StateFlow&lt;UiState&lt;UserData&gt;&gt;</p> <p>Represents the state of the UI for user data.</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/","title":"Index","text":"<p>//app/dev.atick.compose/ThemeSettings</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/#themesettings","title":"ThemeSettings","text":"<p>[androidJvm]\\ data class ThemeSettings(val darkTheme: Boolean, val disableDynamicTheming: Boolean = true)</p> <p>Class for the system theme settings. This wrapping class allows us to combine all the changes and prevent unnecessary recompositions.</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/#constructors","title":"Constructors","text":"ThemeSettings [androidJvm]constructor(darkTheme: Boolean, disableDynamicTheming: Boolean = true)"},{"location":"app/app/dev.atick.compose/-theme-settings/#properties","title":"Properties","text":"Name Summary darkTheme [androidJvm]val darkTheme: Boolean disableDynamicTheming [androidJvm]val disableDynamicTheming: Boolean = true"},{"location":"app/app/dev.atick.compose/-theme-settings/-theme-settings/","title":"theme settings","text":"<p>//app/dev.atick.compose/ThemeSettings/ThemeSettings</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/-theme-settings/#themesettings","title":"ThemeSettings","text":"<p>[androidJvm]\\ constructor(darkTheme: Boolean, disableDynamicTheming: Boolean = true)</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/dark-theme/","title":"Dark theme","text":"<p>//app/dev.atick.compose/ThemeSettings/darkTheme</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/dark-theme/#darktheme","title":"darkTheme","text":"<p>[androidJvm]\\ val darkTheme: Boolean</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/disable-dynamic-theming/","title":"Disable dynamic theming","text":"<p>//app/dev.atick.compose/ThemeSettings/disableDynamicTheming</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/disable-dynamic-theming/#disabledynamictheming","title":"disableDynamicTheming","text":"<p>[androidJvm]\\ val disableDynamicTheming: Boolean = true</p>"},{"location":"app/app/dev.atick.compose.data.home/","title":"Index","text":"<p>//app/dev.atick.compose.data.home</p>"},{"location":"app/app/dev.atick.compose.data.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.data.home/#types","title":"Types","text":"Name Summary HomeScreenData [androidJvm]data class HomeScreenData(val hello: String = \"Hello, World!\")Data class representing the data to be displayed on the home screen."},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/","title":"Index","text":"<p>//app/dev.atick.compose.data.home/HomeScreenData</p>"},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/#homescreendata","title":"HomeScreenData","text":"<p>[androidJvm]\\ data class HomeScreenData(val hello: String = \"Hello, World!\")</p> <p>Data class representing the data to be displayed on the home screen.</p>"},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/#constructors","title":"Constructors","text":"HomeScreenData [androidJvm]constructor(hello: String = \"Hello, World!\")"},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/#properties","title":"Properties","text":"Name Summary hello [androidJvm]val hello: StringA greeting message to be displayed on the home screen."},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/-home-screen-data/","title":"home screen data","text":"<p>//app/dev.atick.compose.data.home/HomeScreenData/HomeScreenData</p>"},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/-home-screen-data/#homescreendata","title":"HomeScreenData","text":"<p>[androidJvm]\\ constructor(hello: String = \"Hello, World!\")</p>"},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/hello/","title":"Hello","text":"<p>//app/dev.atick.compose.data.home/HomeScreenData/hello</p>"},{"location":"app/app/dev.atick.compose.data.home/-home-screen-data/hello/#hello","title":"hello","text":"<p>[androidJvm]\\ val hello: String</p>"},{"location":"app/app/dev.atick.compose.di.repository/","title":"Index","text":"<p>//app/dev.atick.compose.di.repository</p>"},{"location":"app/app/dev.atick.compose.di.repository/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.di.repository/#types","title":"Types","text":"Name Summary RepositoryModule [androidJvm]@Moduleabstract class RepositoryModuleDagger module that provides the binding for the Repository interfaces."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/","title":"Index","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class RepositoryModule</p> <p>Dagger module that provides the binding for the Repository interfaces.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/#constructors","title":"Constructors","text":"RepositoryModule [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/#functions","title":"Functions","text":"Name Summary bindHomeRepository [androidJvm]@Binds@Singletonabstract fun bindHomeRepository(homeRepositoryImpl: HomeRepositoryImpl): HomeRepositoryBinds the HomeRepositoryImpl implementation to the HomeRepository interface."},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/-repository-module/","title":"repository module","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/RepositoryModule</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-home-repository/","title":"Bind home repository","text":"<p>//app/dev.atick.compose.di.repository/RepositoryModule/bindHomeRepository</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-home-repository/#bindhomerepository","title":"bindHomeRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindHomeRepository(homeRepositoryImpl: HomeRepositoryImpl): HomeRepository</p> <p>Binds the HomeRepositoryImpl implementation to the HomeRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-home-repository/#return","title":"Return","text":"<p>The HomeRepository interface.</p>"},{"location":"app/app/dev.atick.compose.di.repository/-repository-module/bind-home-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepositoryImpl The implementation of HomeRepository to be bound."},{"location":"app/app/dev.atick.compose.navigation/","title":"Index","text":"<p>//app/dev.atick.compose.navigation</p>"},{"location":"app/app/dev.atick.compose.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation/#types","title":"Types","text":"Name Summary TopLevelDestination [androidJvm]enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; Enum class representing top-level destinations in a navigation system."},{"location":"app/app/dev.atick.compose.navigation/#functions","title":"Functions","text":"Name Summary JetpackNavHost [androidJvm]@Composablefun JetpackNavHost(appState: JetpackAppState, onShowSnackbar: suspend (String, String?) -&gt; Boolean, modifier: Modifier = Modifier)Composable function that sets up the navigation host for the Jetpack Compose application."},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/","title":"jetpack nav host","text":"<p>//app/dev.atick.compose.navigation/JetpackNavHost</p>"},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/#jetpacknavhost","title":"JetpackNavHost","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavHost(appState: JetpackAppState, onShowSnackbar: suspend (String, String?) -&gt; Boolean, modifier: Modifier = Modifier)</p> <p>Composable function that sets up the navigation host for the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/#parameters","title":"Parameters","text":"<p>androidJvm</p> appState The state of the Jetpack application, containing the navigation controller and user login status. onShowSnackbar A lambda function to show a snackbar with a message and optional action. modifier The modifier to be applied to the NavHost."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#topleveldestination","title":"TopLevelDestination","text":"<p>[androidJvm]\\ enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; </p> <p>Enum class representing top-level destinations in a navigation system.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#entries","title":"Entries","text":"HOME [androidJvm]HOME"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;TopLevelDestination&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): TopLevelDestinationReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;TopLevelDestination&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/entries</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;TopLevelDestination&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/icon-text-id/","title":"Icon text id","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/iconTextId</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/icon-text-id/#icontextid","title":"iconTextId","text":"<p>[androidJvm]\\ val iconTextId: Int</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/route/","title":"Route","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/route</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/route/#route","title":"route","text":"<p>[androidJvm]\\ val route: KClass&lt;*&gt;</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/selected-icon/","title":"Selected icon","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/selectedIcon</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/selected-icon/#selectedicon","title":"selectedIcon","text":"<p>[androidJvm]\\ val selectedIcon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/title-text-id/","title":"Title text id","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/titleTextId</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/title-text-id/#titletextid","title":"titleTextId","text":"<p>[androidJvm]\\ val titleTextId: Int</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/unselected-icon/","title":"Unselected icon","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/unselectedIcon</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/unselected-icon/#unselectedicon","title":"unselectedIcon","text":"<p>[androidJvm]\\ val unselectedIcon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/valueOf</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): TopLevelDestination</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/values/","title":"Values","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/values</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;TopLevelDestination&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/HOME</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/#home","title":"HOME","text":"<p>[androidJvm]\\ HOME</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation.home/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.home</p>"},{"location":"app/app/dev.atick.compose.navigation.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation.home/#types","title":"Types","text":"Name Summary Home [androidJvm]@Serializabledata object HomeSerializable data object representing the Home screen."},{"location":"app/app/dev.atick.compose.navigation.home/#functions","title":"Functions","text":"Name Summary homeScreen [androidJvm]fun NavGraphBuilder.homeScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)Adds the Home screen to the NavGraphBuilder. navigateToHome [androidJvm]fun NavController.navigateToHome(navOptions: NavOptions? = null)Extension function for NavController to navigate to the Home screen."},{"location":"app/app/dev.atick.compose.navigation.home/home-screen/","title":"Home screen","text":"<p>//app/dev.atick.compose.navigation.home/homeScreen</p>"},{"location":"app/app/dev.atick.compose.navigation.home/home-screen/#homescreen","title":"homeScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.homeScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p> <p>Adds the Home screen to the NavGraphBuilder.</p>"},{"location":"app/app/dev.atick.compose.navigation.home/home-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onShowSnackbar Lambda function to show a snackbar with a message and optional action."},{"location":"app/app/dev.atick.compose.navigation.home/navigate-to-home/","title":"Navigate to home","text":"<p>//app/dev.atick.compose.navigation.home/navigateToHome</p>"},{"location":"app/app/dev.atick.compose.navigation.home/navigate-to-home/#navigatetohome","title":"navigateToHome","text":"<p>[androidJvm]\\ fun NavController.navigateToHome(navOptions: NavOptions? = null)</p> <p>Extension function for NavController to navigate to the Home screen.</p>"},{"location":"app/app/dev.atick.compose.navigation.home/navigate-to-home/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions Optional navigation options."},{"location":"app/app/dev.atick.compose.navigation.home/-home/","title":"Index","text":"<p>//app/dev.atick.compose.navigation.home/Home</p>"},{"location":"app/app/dev.atick.compose.navigation.home/-home/#home","title":"Home","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Home</p> <p>Serializable data object representing the Home screen.</p>"},{"location":"app/app/dev.atick.compose.repository.home/","title":"Index","text":"<p>//app/dev.atick.compose.repository.home</p>"},{"location":"app/app/dev.atick.compose.repository.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.repository.home/#types","title":"Types","text":"Name Summary HomeRepository [androidJvm]interface HomeRepositoryInterface defining operations for interacting with the home repository. HomeRepositoryImpl [androidJvm]class HomeRepositoryImpl@Injectconstructor : HomeRepositoryImplementation of the HomeRepository interface."},{"location":"app/app/dev.atick.compose.repository.home/-home-repository/","title":"Index","text":"<p>//app/dev.atick.compose.repository.home/HomeRepository</p>"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository/#homerepository","title":"HomeRepository","text":"<p>interface HomeRepository</p> <p>Interface defining operations for interacting with the home repository.</p>"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository/#inheritors","title":"Inheritors","text":"HomeRepositoryImpl"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository-impl/","title":"Index","text":"<p>//app/dev.atick.compose.repository.home/HomeRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository-impl/#homerepositoryimpl","title":"HomeRepositoryImpl","text":"<p>[androidJvm]\\ class HomeRepositoryImpl@Injectconstructor : HomeRepository</p> <p>Implementation of the HomeRepository interface.</p> <p>This class is responsible for providing the data related to the Home feature. It is injected using Dagger's @Inject annotation.</p>"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository-impl/#constructors","title":"Constructors","text":"HomeRepositoryImpl [androidJvm]@Injectconstructor()"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository-impl/-home-repository-impl/","title":"home repository impl","text":"<p>//app/dev.atick.compose.repository.home/HomeRepositoryImpl/HomeRepositoryImpl</p>"},{"location":"app/app/dev.atick.compose.repository.home/-home-repository-impl/-home-repository-impl/#homerepositoryimpl","title":"HomeRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor()</p>"},{"location":"app/app/dev.atick.compose.ui/","title":"Index","text":"<p>//app/dev.atick.compose.ui</p>"},{"location":"app/app/dev.atick.compose.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui/#types","title":"Types","text":"Name Summary JetpackAppState [androidJvm]@Stableclass JetpackAppState(val isUserLoggedIn: Boolean, val userProfilePictureUri: String?, val navController: NavHostController, val windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)State holder class for the Jetpack Compose application."},{"location":"app/app/dev.atick.compose.ui/#functions","title":"Functions","text":"Name Summary JetpackApp [androidJvm]@Composablefun JetpackApp(appState: JetpackAppState)Composable function that represents the Jetpack Compose application. JetpackBottomBar [androidJvm]@Composablefun JetpackBottomBar(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)Composable function that represents the bottom navigation bar for the Jetpack Compose application. JetpackNavRail [androidJvm]@Composablefun JetpackNavRail(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)Composable function that represents the navigation rail for the Jetpack Compose application. rememberJetpackAppState [androidJvm]@Composablefun rememberJetpackAppState(isUserLoggedIn: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, userProfilePictureUri: String? = null, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppStateRemembers and creates an instance of JetpackAppState."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/","title":"jetpack app","text":"<p>//app/dev.atick.compose.ui/JetpackApp</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/#jetpackapp","title":"JetpackApp","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackApp(appState: JetpackAppState)</p> <p>Composable function that represents the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/#parameters","title":"Parameters","text":"<p>androidJvm</p> appState The state of the Jetpack application."},{"location":"app/app/dev.atick.compose.ui/-jetpack-bottom-bar/","title":"jetpack bottom bar","text":"<p>//app/dev.atick.compose.ui/JetpackBottomBar</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-bottom-bar/#jetpackbottombar","title":"JetpackBottomBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackBottomBar(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)</p> <p>Composable function that represents the bottom navigation bar for the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-bottom-bar/#parameters","title":"Parameters","text":"<p>androidJvm</p> destinations A list of top-level destinations to be displayed in the bottom navigation bar. destinationsWithUnreadResources A set of destinations that have unread resources. onNavigateToDestination A lambda function to handle navigation to a selected destination. currentDestination The current navigation destination. modifier The modifier to be applied to the bottom navigation bar."},{"location":"app/app/dev.atick.compose.ui/-jetpack-nav-rail/","title":"jetpack nav rail","text":"<p>//app/dev.atick.compose.ui/JetpackNavRail</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-nav-rail/#jetpacknavrail","title":"JetpackNavRail","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavRail(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)</p> <p>Composable function that represents the navigation rail for the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-nav-rail/#parameters","title":"Parameters","text":"<p>androidJvm</p> destinations A list of top-level destinations to be displayed in the navigation rail. destinationsWithUnreadResources A set of destinations that have unread resources. onNavigateToDestination A lambda function to handle navigation to a selected destination. currentDestination The current navigation destination. modifier The modifier to be applied to the navigation rail."},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/","title":"Remember jetpack app state","text":"<p>//app/dev.atick.compose.ui/rememberJetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#rememberjetpackappstate","title":"rememberJetpackAppState","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun rememberJetpackAppState(isUserLoggedIn: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, userProfilePictureUri: String? = null, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppState</p> <p>Remembers and creates an instance of JetpackAppState.</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#return","title":"Return","text":"<p>An instance of JetpackAppState.</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> isUserLoggedIn Indicates if the user is logged in. windowSizeClass The current window size class. networkUtils Utility for network state management. userProfilePictureUri The URI of the user's profile picture. coroutineScope The coroutine scope for managing coroutines. navController The navigation controller for managing navigation."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/","title":"Index","text":"<p>//app/dev.atick.compose.ui/JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ @Stable</p> <p>class JetpackAppState(val isUserLoggedIn: Boolean, val userProfilePictureUri: String?, val navController: NavHostController, val windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p> <p>State holder class for the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#constructors","title":"Constructors","text":"JetpackAppState [androidJvm]constructor(isUserLoggedIn: Boolean, userProfilePictureUri: String?, navController: NavHostController, windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#properties","title":"Properties","text":"Name Summary currentDestination [androidJvm]@get:Composableval currentDestination: NavDestination?The current navigation destination. currentTopLevelDestination [androidJvm]@get:Composableval currentTopLevelDestination: TopLevelDestination?The current top-level navigation destination. isOffline [androidJvm]val isOffline: StateFlow&lt;Boolean&gt;Indicates if the application is offline. isUserLoggedIn [androidJvm]val isUserLoggedIn: BooleanIndicates if the user is logged in. navController [androidJvm]val navController: NavHostControllerThe navigation controller for managing navigation. shouldShowBottomBar [androidJvm]@get:Composableval shouldShowBottomBar: BooleanIndicates if the bottom bar should be shown. shouldShowNavRail [androidJvm]@get:Composableval shouldShowNavRail: BooleanIndicates if the navigation rail should be shown. topLevelDestinations [androidJvm]val topLevelDestinations: List&lt;TopLevelDestination&gt;List of top-level destinations. topLevelDestinationsWithUnreadResources [androidJvm]val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt;State flow of top-level destinations with unread resources. userProfilePictureUri [androidJvm]val userProfilePictureUri: String?The URI of the user's profile picture. windowSizeClass [androidJvm]val windowSizeClass: WindowSizeClassThe current window size class."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#functions","title":"Functions","text":"Name Summary navigateToTopLevelDestination [androidJvm]fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)Navigates to the specified top-level destination."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/","title":"jetpack app state","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ constructor(isUserLoggedIn: Boolean, userProfilePictureUri: String?, navController: NavHostController, windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-destination/","title":"Current destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/currentDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-destination/#currentdestination","title":"currentDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentDestination: NavDestination?</p> <p>The current navigation destination.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/","title":"Current top level destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/currentTopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/#currenttopleveldestination","title":"currentTopLevelDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentTopLevelDestination: TopLevelDestination?</p> <p>The current top-level navigation destination.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-offline/","title":"Is offline","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/isOffline</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-offline/#isoffline","title":"isOffline","text":"<p>[androidJvm]\\ val isOffline: StateFlow&lt;Boolean&gt;</p> <p>Indicates if the application is offline.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-user-logged-in/","title":"Is user logged in","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/isUserLoggedIn</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-user-logged-in/#isuserloggedin","title":"isUserLoggedIn","text":"<p>[androidJvm]\\ val isUserLoggedIn: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/nav-controller/","title":"Nav controller","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navController</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/nav-controller/#navcontroller","title":"navController","text":"<p>[androidJvm]\\ val navController: NavHostController</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/","title":"Navigate to top level destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navigateToTopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/#navigatetotopleveldestination","title":"navigateToTopLevelDestination","text":"<p>[androidJvm]\\ fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)</p> <p>Navigates to the specified top-level destination.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/#parameters","title":"Parameters","text":"<p>androidJvm</p> topLevelDestination The top-level destination to navigate to."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-bottom-bar/","title":"Should show bottom bar","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowBottomBar</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-bottom-bar/#shouldshowbottombar","title":"shouldShowBottomBar","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowBottomBar: Boolean</p> <p>Indicates if the bottom bar should be shown.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-nav-rail/","title":"Should show nav rail","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowNavRail</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-nav-rail/#shouldshownavrail","title":"shouldShowNavRail","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowNavRail: Boolean</p> <p>Indicates if the navigation rail should be shown.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/","title":"Top level destinations with unread resources","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/topLevelDestinationsWithUnreadResources</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/#topleveldestinationswithunreadresources","title":"topLevelDestinationsWithUnreadResources","text":"<p>[androidJvm]\\ val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt;</p> <p>State flow of top-level destinations with unread resources.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/","title":"Top level destinations","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/topLevelDestinations</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/#topleveldestinations","title":"topLevelDestinations","text":"<p>[androidJvm]\\ val topLevelDestinations: List&lt;TopLevelDestination&gt;</p> <p>List of top-level destinations.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/user-profile-picture-uri/","title":"User profile picture uri","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/userProfilePictureUri</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/user-profile-picture-uri/#userprofilepictureuri","title":"userProfilePictureUri","text":"<p>[androidJvm]\\ val userProfilePictureUri: String?</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/window-size-class/","title":"Window size class","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/windowSizeClass</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/window-size-class/#windowsizeclass","title":"windowSizeClass","text":"<p>[androidJvm]\\ val windowSizeClass: WindowSizeClass</p>"},{"location":"app/app/dev.atick.compose.ui.home/","title":"Index","text":"<p>//app/dev.atick.compose.ui.home</p>"},{"location":"app/app/dev.atick.compose.ui.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui.home/#types","title":"Types","text":"Name Summary HomeViewModel [androidJvm]class HomeViewModel@Injectconstructor(homeRepository: HomeRepository) : ViewModelView model for the home screen."},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/","title":"Index","text":"<p>//app/dev.atick.compose.ui.home/HomeViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/#homeviewmodel","title":"HomeViewModel","text":"<p>class HomeViewModel@Injectconstructor(homeRepository: HomeRepository) : ViewModel</p> <p>View model for the home screen.</p>"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepository The repository for accessing home screen data."},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/#constructors","title":"Constructors","text":"HomeViewModel [androidJvm]@Injectconstructor(homeRepository: HomeRepository)"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/#properties","title":"Properties","text":"Name Summary homeUiState [androidJvm]val homeUiState: StateFlow&lt;UiState&lt;HomeScreenData&gt;&gt;"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/-home-view-model/","title":"home view model","text":"<p>//app/dev.atick.compose.ui.home/HomeViewModel/HomeViewModel</p>"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/-home-view-model/#homeviewmodel","title":"HomeViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(homeRepository: HomeRepository)</p>"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/-home-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepository The repository for accessing home screen data."},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/home-ui-state/","title":"Home ui state","text":"<p>//app/dev.atick.compose.ui.home/HomeViewModel/homeUiState</p>"},{"location":"app/app/dev.atick.compose.ui.home/-home-view-model/home-ui-state/#homeuistate","title":"homeUiState","text":"<p>[androidJvm]\\ val homeUiState: StateFlow&lt;UiState&lt;HomeScreenData&gt;&gt;</p>"},{"location":"auth/","title":"Index","text":"<p>//auth</p>"},{"location":"auth/#auth","title":"auth","text":""},{"location":"auth/#packages","title":"Packages","text":"Name dev.atick.auth.config dev.atick.auth.data dev.atick.auth.di dev.atick.auth.models dev.atick.auth.navigation dev.atick.auth.repository dev.atick.auth.ui dev.atick.auth.ui.signin dev.atick.auth.ui.signup"},{"location":"auth/auth/dev.atick.auth.config/","title":"Index","text":"<p>//auth/dev.atick.auth.config</p>"},{"location":"auth/auth/dev.atick.auth.config/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.config/#types","title":"Types","text":"Name Summary Config [androidJvm]object ConfigConfiguration object containing constants and values used in the application."},{"location":"auth/auth/dev.atick.auth.config/-config/","title":"Index","text":"<p>//auth/dev.atick.auth.config/Config</p>"},{"location":"auth/auth/dev.atick.auth.config/-config/#config","title":"Config","text":"<p>[androidJvm]\\ object Config</p> <p>Configuration object containing constants and values used in the application.</p>"},{"location":"auth/auth/dev.atick.auth.config/-config/#properties","title":"Properties","text":"Name Summary WEB_CLIENT_ID [androidJvm]const val WEB_CLIENT_ID: StringThe Web Client ID used for Google Sign-In authentication. This identifier is associated with your application and is used to authenticate with Google services. Ensure that it is properly configured and secured in the Google Developer Console."},{"location":"auth/auth/dev.atick.auth.config/-config/-w-e-b_-c-l-i-e-n-t_-i-d/","title":"w e b  c l i e n t  i d","text":"<p>//auth/dev.atick.auth.config/Config/WEB_CLIENT_ID</p>"},{"location":"auth/auth/dev.atick.auth.config/-config/-w-e-b_-c-l-i-e-n-t_-i-d/#web_client_id","title":"WEB_CLIENT_ID","text":"<p>[androidJvm]\\ const val WEB_CLIENT_ID: String</p> <p>The Web Client ID used for Google Sign-In authentication. This identifier is associated with your application and is used to authenticate with Google services. Ensure that it is properly configured and secured in the Google Developer Console.</p>"},{"location":"auth/auth/dev.atick.auth.data/","title":"Index","text":"<p>//auth/dev.atick.auth.data</p>"},{"location":"auth/auth/dev.atick.auth.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.data/#types","title":"Types","text":"Name Summary AuthDataSource [androidJvm]interface AuthDataSourceInterface defining data source operations for authentication. AuthDataSourceImpl [androidJvm]class AuthDataSourceImpl@Injectconstructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher) : AuthDataSourceImplementation of the AuthDataSource interface responsible for handling authentication data operations."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/","title":"Index","text":"<p>//auth/dev.atick.auth.data/AuthDataSource</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/#authdatasource","title":"AuthDataSource","text":"<p>interface AuthDataSource</p> <p>Interface defining data source operations for authentication.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/#inheritors","title":"Inheritors","text":"AuthDataSourceImpl"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/#properties","title":"Properties","text":"Name Summary currentUser [androidJvm]abstract val currentUser: AuthUser?Gets the currently authenticated user, if any."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUserRegister a new user with an email and password. registerWithGoogle [androidJvm]abstract suspend fun registerWithGoogle(activity: Activity): AuthUserRegister a new user with Google. signInWithEmailAndPassword [androidJvm]abstract suspend fun signInWithEmailAndPassword(email: String, password: String): AuthUserSign in with an email and password. signInWithGoogle [androidJvm]abstract suspend fun signInWithGoogle(activity: Activity): AuthUserSign in with a Google account. signInWithSavedCredentials [androidJvm]abstract suspend fun signInWithSavedCredentials(activity: Activity): AuthUserLook for saved credentials. signOut [androidJvm]abstract suspend fun signOut()Sign out the currently authenticated user."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/current-user/","title":"Current user","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/currentUser</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/current-user/#currentuser","title":"currentUser","text":"<p>[androidJvm]\\ abstract val currentUser: AuthUser?</p> <p>Gets the currently authenticated user, if any.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/current-user/#return","title":"Return","text":"<p>The currently authenticated AuthUser, or null if not signed in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/registerWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUser</p> <p>Register a new user with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/registerWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun registerWithGoogle(activity: Activity): AuthUser</p> <p>Register a new user with Google.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/signInWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun signInWithEmailAndPassword(email: String, password: String): AuthUser</p> <p>Sign in with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/signInWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun signInWithGoogle(activity: Activity): AuthUser</p> <p>Sign in with a Google account.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/signInWithSavedCredentials</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ abstract suspend fun signInWithSavedCredentials(activity: Activity): AuthUser</p> <p>Look for saved credentials.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-out/","title":"Sign out","text":"<p>//auth/dev.atick.auth.data/AuthDataSource/signOut</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ abstract suspend fun signOut()</p> <p>Sign out the currently authenticated user.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/","title":"Index","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/#authdatasourceimpl","title":"AuthDataSourceImpl","text":"<p>class AuthDataSourceImpl@Injectconstructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher) : AuthDataSource</p> <p>Implementation of the AuthDataSource interface responsible for handling authentication data operations.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseAuth The Firebase Authentication instance for performing authentication operations. credentialManager The CredentialManager for handling credential operations. ioDispatcher The CoroutineDispatcher for executing suspend functions in an IO context."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/#constructors","title":"Constructors","text":"AuthDataSourceImpl [androidJvm]@Injectconstructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher)"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/#properties","title":"Properties","text":"Name Summary currentUser [androidJvm]open override val currentUser: AuthUser?Gets the currently authenticated user, if any."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUserRegister a new user with an email and password. registerWithGoogle [androidJvm]open suspend override fun registerWithGoogle(activity: Activity): AuthUserRegister with Google. signInWithEmailAndPassword [androidJvm]open suspend override fun signInWithEmailAndPassword(email: String, password: String): AuthUserSign in with an email and password. signInWithGoogle [androidJvm]open suspend override fun signInWithGoogle(activity: Activity): AuthUserSign in with Google. signInWithSavedCredentials [androidJvm]open suspend override fun signInWithSavedCredentials(activity: Activity): AuthUserLook for saved credentials. signOut [androidJvm]open suspend override fun signOut()Sign out the currently authenticated user."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/-auth-data-source-impl/","title":"auth data source impl","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/AuthDataSourceImpl</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/-auth-data-source-impl/#authdatasourceimpl","title":"AuthDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/-auth-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseAuth The Firebase Authentication instance for performing authentication operations. credentialManager The CredentialManager for handling credential operations. ioDispatcher The CoroutineDispatcher for executing suspend functions in an IO context."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/current-user/","title":"Current user","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/currentUser</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/current-user/#currentuser","title":"currentUser","text":"<p>[androidJvm]\\ open override val currentUser: AuthUser?</p> <p>Gets the currently authenticated user, if any.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/current-user/#return","title":"Return","text":"<p>The currently authenticated AuthUser, or null if not signed in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/registerWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUser</p> <p>Register a new user with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/registerWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun registerWithGoogle(activity: Activity): AuthUser</p> <p>Register with Google.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity context."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/signInWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun signInWithEmailAndPassword(email: String, password: String): AuthUser</p> <p>Sign in with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/signInWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun signInWithGoogle(activity: Activity): AuthUser</p> <p>Sign in with Google.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity context."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/signInWithSavedCredentials</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ open suspend override fun signInWithSavedCredentials(activity: Activity): AuthUser</p> <p>Look for saved credentials.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-out/","title":"Sign out","text":"<p>//auth/dev.atick.auth.data/AuthDataSourceImpl/signOut</p>"},{"location":"auth/auth/dev.atick.auth.data/-auth-data-source-impl/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ open suspend override fun signOut()</p> <p>Sign out the currently authenticated user.</p>"},{"location":"auth/auth/dev.atick.auth.di/","title":"Index","text":"<p>//auth/dev.atick.auth.di</p>"},{"location":"auth/auth/dev.atick.auth.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.di/#types","title":"Types","text":"Name Summary CredentialManagerModule [androidJvm]@Moduleobject CredentialManagerModule DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger Hilt module for providing data source dependencies. FirebaseAuthModule [androidJvm]@Moduleobject FirebaseAuthModuleDagger Hilt module for providing Firebase Authentication-related dependencies. RepositoryModule [androidJvm]@Moduleabstract class RepositoryModuleDagger Hilt module for providing repository dependencies."},{"location":"auth/auth/dev.atick.auth.di/-credential-manager-module/","title":"Index","text":"<p>//auth/dev.atick.auth.di/CredentialManagerModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-credential-manager-module/#credentialmanagermodule","title":"CredentialManagerModule","text":"<p>[androidJvm]\\ @Module</p> <p>object CredentialManagerModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-credential-manager-module/#functions","title":"Functions","text":"Name Summary provideCredentialManager [androidJvm]@Provides@Singletonfun provideCredentialManager(context: Context): CredentialManager"},{"location":"auth/auth/dev.atick.auth.di/-credential-manager-module/provide-credential-manager/","title":"Provide credential manager","text":"<p>//auth/dev.atick.auth.di/CredentialManagerModule/provideCredentialManager</p>"},{"location":"auth/auth/dev.atick.auth.di/-credential-manager-module/provide-credential-manager/#providecredentialmanager","title":"provideCredentialManager","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideCredentialManager(context: Context): CredentialManager</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/","title":"Index","text":"<p>//auth/dev.atick.auth.di/DataSourceModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger Hilt module for providing data source dependencies.</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindAuthDataSource [androidJvm]@Binds@Singletonabstract fun bindAuthDataSource(authDataSourceImpl: AuthDataSourceImpl): AuthDataSourceBinds the AuthDataSourceImpl implementation to the AuthDataSource interface."},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//auth/dev.atick.auth.di/DataSourceModule/DataSourceModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/bind-auth-data-source/","title":"Bind auth data source","text":"<p>//auth/dev.atick.auth.di/DataSourceModule/bindAuthDataSource</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/bind-auth-data-source/#bindauthdatasource","title":"bindAuthDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindAuthDataSource(authDataSourceImpl: AuthDataSourceImpl): AuthDataSource</p> <p>Binds the AuthDataSourceImpl implementation to the AuthDataSource interface.</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/bind-auth-data-source/#return","title":"Return","text":"<p>An instance of AuthDataSource for dependency injection.</p>"},{"location":"auth/auth/dev.atick.auth.di/-data-source-module/bind-auth-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> authDataSourceImpl The implementation of AuthDataSource to be bound."},{"location":"auth/auth/dev.atick.auth.di/-firebase-auth-module/","title":"Index","text":"<p>//auth/dev.atick.auth.di/FirebaseAuthModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-firebase-auth-module/#firebaseauthmodule","title":"FirebaseAuthModule","text":"<p>[androidJvm]\\ @Module</p> <p>object FirebaseAuthModule</p> <p>Dagger Hilt module for providing Firebase Authentication-related dependencies.</p>"},{"location":"auth/auth/dev.atick.auth.di/-firebase-auth-module/#functions","title":"Functions","text":"Name Summary provideFirebaseAuth [androidJvm]@Provides@Singletonfun provideFirebaseAuth(): FirebaseAuthProvides a singleton instance of FirebaseAuth."},{"location":"auth/auth/dev.atick.auth.di/-firebase-auth-module/provide-firebase-auth/","title":"Provide firebase auth","text":"<p>//auth/dev.atick.auth.di/FirebaseAuthModule/provideFirebaseAuth</p>"},{"location":"auth/auth/dev.atick.auth.di/-firebase-auth-module/provide-firebase-auth/#providefirebaseauth","title":"provideFirebaseAuth","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideFirebaseAuth(): FirebaseAuth</p> <p>Provides a singleton instance of FirebaseAuth.</p>"},{"location":"auth/auth/dev.atick.auth.di/-firebase-auth-module/provide-firebase-auth/#return","title":"Return","text":"<p>An instance of FirebaseAuth for authentication operations.</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/","title":"Index","text":"<p>//auth/dev.atick.auth.di/RepositoryModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class RepositoryModule</p> <p>Dagger Hilt module for providing repository dependencies.</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/#constructors","title":"Constructors","text":"RepositoryModule [androidJvm]constructor()"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/#functions","title":"Functions","text":"Name Summary bindAuthRepository [androidJvm]@Binds@Singletonabstract fun bindAuthRepository(authRepositoryImpl: AuthRepositoryImpl): AuthRepositoryBinds the AuthRepositoryImpl implementation to the AuthRepository interface."},{"location":"auth/auth/dev.atick.auth.di/-repository-module/-repository-module/","title":"repository module","text":"<p>//auth/dev.atick.auth.di/RepositoryModule/RepositoryModule</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/bind-auth-repository/","title":"Bind auth repository","text":"<p>//auth/dev.atick.auth.di/RepositoryModule/bindAuthRepository</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/bind-auth-repository/#bindauthrepository","title":"bindAuthRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindAuthRepository(authRepositoryImpl: AuthRepositoryImpl): AuthRepository</p> <p>Binds the AuthRepositoryImpl implementation to the AuthRepository interface.</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/bind-auth-repository/#return","title":"Return","text":"<p>An instance of AuthRepository for dependency injection.</p>"},{"location":"auth/auth/dev.atick.auth.di/-repository-module/bind-auth-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> authRepositoryImpl The implementation of AuthRepository to be bound."},{"location":"auth/auth/dev.atick.auth.models/","title":"Index","text":"<p>//auth/dev.atick.auth.models</p>"},{"location":"auth/auth/dev.atick.auth.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.models/#types","title":"Types","text":"Name Summary AuthScreenData [androidJvm]data class AuthScreenData(val name: TextFiledData = TextFiledData(String()), val email: TextFiledData = TextFiledData(String()), val password: TextFiledData = TextFiledData(String()))Data class representing the input data for an authentication screen. AuthUser [androidJvm]data class AuthUser(val id: String, val name: String, val profilePictureUri: Uri?)Represents an authenticated user with basic information."},{"location":"auth/auth/dev.atick.auth.models/#functions","title":"Functions","text":"Name Summary asAuthUser [androidJvm]fun FirebaseUser.asAuthUser(): AuthUserConverts a Firebase user object to an AuthUser object."},{"location":"auth/auth/dev.atick.auth.models/as-auth-user/","title":"As auth user","text":"<p>//auth/dev.atick.auth.models/asAuthUser</p>"},{"location":"auth/auth/dev.atick.auth.models/as-auth-user/#asauthuser","title":"asAuthUser","text":"<p>[androidJvm]\\ fun FirebaseUser.asAuthUser(): AuthUser</p> <p>Converts a Firebase user object to an AuthUser object.</p>"},{"location":"auth/auth/dev.atick.auth.models/as-auth-user/#return","title":"Return","text":"<p>The corresponding AuthUser object.</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/","title":"Index","text":"<p>//auth/dev.atick.auth.models/AuthScreenData</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/#authscreendata","title":"AuthScreenData","text":"<p>data class AuthScreenData(val name: TextFiledData = TextFiledData(String()), val email: TextFiledData = TextFiledData(String()), val password: TextFiledData = TextFiledData(String()))</p> <p>Data class representing the input data for an authentication screen.</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The data for the user's name input field. email The data for the user's email input field. password The data for the user's password input field."},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/#constructors","title":"Constructors","text":"AuthScreenData [androidJvm]constructor(name: TextFiledData = TextFiledData(String()), email: TextFiledData = TextFiledData(String()), password: TextFiledData = TextFiledData(String()))"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/#properties","title":"Properties","text":"Name Summary email [androidJvm]val email: TextFiledData name [androidJvm]val name: TextFiledData password [androidJvm]val password: TextFiledData"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/-auth-screen-data/","title":"auth screen data","text":"<p>//auth/dev.atick.auth.models/AuthScreenData/AuthScreenData</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/-auth-screen-data/#authscreendata","title":"AuthScreenData","text":"<p>[androidJvm]\\ constructor(name: TextFiledData = TextFiledData(String()), email: TextFiledData = TextFiledData(String()), password: TextFiledData = TextFiledData(String()))</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/-auth-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The data for the user's name input field. email The data for the user's email input field. password The data for the user's password input field."},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/email/","title":"Email","text":"<p>//auth/dev.atick.auth.models/AuthScreenData/email</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/email/#email","title":"email","text":"<p>[androidJvm]\\ val email: TextFiledData</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/email/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The data for the user's email input field."},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/name/","title":"Name","text":"<p>//auth/dev.atick.auth.models/AuthScreenData/name</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: TextFiledData</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/name/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The data for the user's name input field."},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/password/","title":"Password","text":"<p>//auth/dev.atick.auth.models/AuthScreenData/password</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/password/#password","title":"password","text":"<p>[androidJvm]\\ val password: TextFiledData</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-screen-data/password/#parameters","title":"Parameters","text":"<p>androidJvm</p> password The data for the user's password input field."},{"location":"auth/auth/dev.atick.auth.models/-auth-user/","title":"Index","text":"<p>//auth/dev.atick.auth.models/AuthUser</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/#authuser","title":"AuthUser","text":"<p>[androidJvm]\\ data class AuthUser(val id: String, val name: String, val profilePictureUri: Uri?)</p> <p>Represents an authenticated user with basic information.</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/#constructors","title":"Constructors","text":"AuthUser [androidJvm]constructor(id: String, name: String, profilePictureUri: Uri?)"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: StringThe unique identifier for the user. name [androidJvm]val name: StringThe user's name. profilePictureUri [androidJvm]val profilePictureUri: Uri?The URI for the user's profile picture, or null if not available."},{"location":"auth/auth/dev.atick.auth.models/-auth-user/#functions","title":"Functions","text":"Name Summary asProfile [androidJvm]fun asProfile(): ProfileConverts this AuthUser object to a Profile object."},{"location":"auth/auth/dev.atick.auth.models/-auth-user/-auth-user/","title":"auth user","text":"<p>//auth/dev.atick.auth.models/AuthUser/AuthUser</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/-auth-user/#authuser","title":"AuthUser","text":"<p>[androidJvm]\\ constructor(id: String, name: String, profilePictureUri: Uri?)</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/as-profile/","title":"As profile","text":"<p>//auth/dev.atick.auth.models/AuthUser/asProfile</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/as-profile/#asprofile","title":"asProfile","text":"<p>[androidJvm]\\ fun asProfile(): Profile</p> <p>Converts this AuthUser object to a Profile object.</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/as-profile/#return","title":"Return","text":"<p>The corresponding Profile object.</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/id/","title":"Id","text":"<p>//auth/dev.atick.auth.models/AuthUser/id</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/name/","title":"Name","text":"<p>//auth/dev.atick.auth.models/AuthUser/name</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/profile-picture-uri/","title":"Profile picture uri","text":"<p>//auth/dev.atick.auth.models/AuthUser/profilePictureUri</p>"},{"location":"auth/auth/dev.atick.auth.models/-auth-user/profile-picture-uri/#profilepictureuri","title":"profilePictureUri","text":"<p>[androidJvm]\\ val profilePictureUri: Uri?</p>"},{"location":"auth/auth/dev.atick.auth.navigation/","title":"Index","text":"<p>//auth/dev.atick.auth.navigation</p>"},{"location":"auth/auth/dev.atick.auth.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.navigation/#types","title":"Types","text":"Name Summary AuthNavGraph [androidJvm]@Serializabledata object AuthNavGraph SignIn [androidJvm]@Serializabledata object SignIn SignUp [androidJvm]@Serializabledata object SignUp"},{"location":"auth/auth/dev.atick.auth.navigation/#functions","title":"Functions","text":"Name Summary authNavGraph [androidJvm]fun NavGraphBuilder.authNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit) navigateToAuthNavGraph [androidJvm]fun NavController.navigateToAuthNavGraph(navOptions: NavOptions? = null) navigateToSignInRoute [androidJvm]fun NavController.navigateToSignInRoute(navOptions: NavOptions? = null) navigateToSignUpRoute [androidJvm]fun NavController.navigateToSignUpRoute(navOptions: NavOptions? = null) signInScreen [androidJvm]fun NavGraphBuilder.signInScreen(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean) signUpScreen [androidJvm]fun NavGraphBuilder.signUpScreen(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)"},{"location":"auth/auth/dev.atick.auth.navigation/auth-nav-graph/","title":"Auth nav graph","text":"<p>//auth/dev.atick.auth.navigation/authNavGraph</p>"},{"location":"auth/auth/dev.atick.auth.navigation/auth-nav-graph/#authnavgraph","title":"authNavGraph","text":"<p>[androidJvm]\\ fun NavGraphBuilder.authNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)</p>"},{"location":"auth/auth/dev.atick.auth.navigation/navigate-to-auth-nav-graph/","title":"Navigate to auth nav graph","text":"<p>//auth/dev.atick.auth.navigation/navigateToAuthNavGraph</p>"},{"location":"auth/auth/dev.atick.auth.navigation/navigate-to-auth-nav-graph/#navigatetoauthnavgraph","title":"navigateToAuthNavGraph","text":"<p>[androidJvm]\\ fun NavController.navigateToAuthNavGraph(navOptions: NavOptions? = null)</p>"},{"location":"auth/auth/dev.atick.auth.navigation/navigate-to-sign-in-route/","title":"Navigate to sign in route","text":"<p>//auth/dev.atick.auth.navigation/navigateToSignInRoute</p>"},{"location":"auth/auth/dev.atick.auth.navigation/navigate-to-sign-in-route/#navigatetosigninroute","title":"navigateToSignInRoute","text":"<p>[androidJvm]\\ fun NavController.navigateToSignInRoute(navOptions: NavOptions? = null)</p>"},{"location":"auth/auth/dev.atick.auth.navigation/navigate-to-sign-up-route/","title":"Navigate to sign up route","text":"<p>//auth/dev.atick.auth.navigation/navigateToSignUpRoute</p>"},{"location":"auth/auth/dev.atick.auth.navigation/navigate-to-sign-up-route/#navigatetosignuproute","title":"navigateToSignUpRoute","text":"<p>[androidJvm]\\ fun NavController.navigateToSignUpRoute(navOptions: NavOptions? = null)</p>"},{"location":"auth/auth/dev.atick.auth.navigation/sign-in-screen/","title":"Sign in screen","text":"<p>//auth/dev.atick.auth.navigation/signInScreen</p>"},{"location":"auth/auth/dev.atick.auth.navigation/sign-in-screen/#signinscreen","title":"signInScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.signInScreen(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p>"},{"location":"auth/auth/dev.atick.auth.navigation/sign-up-screen/","title":"Sign up screen","text":"<p>//auth/dev.atick.auth.navigation/signUpScreen</p>"},{"location":"auth/auth/dev.atick.auth.navigation/sign-up-screen/#signupscreen","title":"signUpScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.signUpScreen(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p>"},{"location":"auth/auth/dev.atick.auth.navigation/-auth-nav-graph/","title":"Index","text":"<p>//auth/dev.atick.auth.navigation/AuthNavGraph</p>"},{"location":"auth/auth/dev.atick.auth.navigation/-auth-nav-graph/#authnavgraph","title":"AuthNavGraph","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object AuthNavGraph</p>"},{"location":"auth/auth/dev.atick.auth.navigation/-sign-in/","title":"Index","text":"<p>//auth/dev.atick.auth.navigation/SignIn</p>"},{"location":"auth/auth/dev.atick.auth.navigation/-sign-in/#signin","title":"SignIn","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object SignIn</p>"},{"location":"auth/auth/dev.atick.auth.navigation/-sign-up/","title":"Index","text":"<p>//auth/dev.atick.auth.navigation/SignUp</p>"},{"location":"auth/auth/dev.atick.auth.navigation/-sign-up/#signup","title":"SignUp","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object SignUp</p>"},{"location":"auth/auth/dev.atick.auth.repository/","title":"Index","text":"<p>//auth/dev.atick.auth.repository</p>"},{"location":"auth/auth/dev.atick.auth.repository/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.repository/#types","title":"Types","text":"Name Summary AuthRepository [androidJvm]interface AuthRepositoryInterface defining authentication-related operations. AuthRepositoryImpl [androidJvm]class AuthRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : AuthRepositoryImplementation of the AuthRepository interface responsible for handling authentication operations."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/","title":"Index","text":"<p>//auth/dev.atick.auth.repository/AuthRepository</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/#authrepository","title":"AuthRepository","text":"<p>interface AuthRepository</p> <p>Interface defining authentication-related operations.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/#inheritors","title":"Inheritors","text":"AuthRepositoryImpl"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;Register a new user with an email and password. registerWithGoogle [androidJvm]abstract suspend fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;Register a new user with Google. signInWithEmailAndPassword [androidJvm]abstract suspend fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;Sign in with an email and password. signInWithGoogle [androidJvm]abstract suspend fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;Sign in with Google. signInWithSavedCredentials [androidJvm]abstract suspend fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;Sign in with saved credentials."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.auth.repository/AuthRepository/registerWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.auth.repository/AuthRepository/registerWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with Google.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-google/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity used to launch the Google sign-in intent."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//auth/dev.atick.auth.repository/AuthRepository/signInWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;</p> <p>Sign in with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.auth.repository/AuthRepository/signInWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with Google.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-google/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.auth.repository/AuthRepository/signInWithSavedCredentials</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ abstract suspend fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with saved credentials.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/","title":"Index","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/#authrepositoryimpl","title":"AuthRepositoryImpl","text":"<p>class AuthRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : AuthRepository</p> <p>Implementation of the AuthRepository interface responsible for handling authentication operations.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> authDataSource The data source for authentication operations. userPreferencesDataSource The data source for user preferences."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/#constructors","title":"Constructors","text":"AuthRepositoryImpl [androidJvm]@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;Register a new user with an email and password. registerWithGoogle [androidJvm]open suspend override fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;Register a new user with Google. signInWithEmailAndPassword [androidJvm]open suspend override fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;Sign in with an email and password. signInWithGoogle [androidJvm]open suspend override fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;Sign in with Google. signInWithSavedCredentials [androidJvm]open suspend override fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;Sign in with saved credentials."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/-auth-repository-impl/","title":"auth repository impl","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl/AuthRepositoryImpl</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/-auth-repository-impl/#authrepositoryimpl","title":"AuthRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/-auth-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> authDataSource The data source for authentication operations. userPreferencesDataSource The data source for user preferences."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl/registerWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl/registerWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with Google.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-google/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The current activity."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl/signInWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;</p> <p>Sign in with an email and password.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl/signInWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with Google.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-google/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The current activity."},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.auth.repository/AuthRepositoryImpl/signInWithSavedCredentials</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ open suspend override fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with saved credentials.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"auth/auth/dev.atick.auth.repository/-auth-repository-impl/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"auth/auth/dev.atick.auth.ui/","title":"Index","text":"<p>//auth/dev.atick.auth.ui</p>"},{"location":"auth/auth/dev.atick.auth.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.ui/#types","title":"Types","text":"Name Summary AuthViewModel [androidJvm]class AuthViewModel@Injectconstructor(authRepository: AuthRepository) : ViewModel"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/","title":"Index","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/#authviewmodel","title":"AuthViewModel","text":"<p>[androidJvm]\\ class AuthViewModel@Injectconstructor(authRepository: AuthRepository) : ViewModel</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/#constructors","title":"Constructors","text":"AuthViewModel [androidJvm]@Injectconstructor(authRepository: AuthRepository)"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/#properties","title":"Properties","text":"Name Summary authUiState [androidJvm]val authUiState: StateFlow&lt;UiState&lt;AuthScreenData&gt;&gt;"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? loginWithEmailAndPassword [androidJvm]fun loginWithEmailAndPassword() registerWithEmailAndPassword [androidJvm]fun registerWithEmailAndPassword(activity: Activity) registerWithGoogle [androidJvm]fun registerWithGoogle(activity: Activity) signInWithGoogle [androidJvm]fun signInWithGoogle(activity: Activity) signInWithSavedCredentials [androidJvm]fun signInWithSavedCredentials(activity: Activity) updateEmail [androidJvm]fun updateEmail(email: String) updateName [androidJvm]fun updateName(name: String) updatePassword [androidJvm]fun updatePassword(password: String)"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/-auth-view-model/","title":"auth view model","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/AuthViewModel</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/-auth-view-model/#authviewmodel","title":"AuthViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authRepository: AuthRepository)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/auth-ui-state/","title":"Auth ui state","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/authUiState</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/auth-ui-state/#authuistate","title":"authUiState","text":"<p>[androidJvm]\\ val authUiState: StateFlow&lt;UiState&lt;AuthScreenData&gt;&gt;</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/login-with-email-and-password/","title":"Login with email and password","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/loginWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/login-with-email-and-password/#loginwithemailandpassword","title":"loginWithEmailAndPassword","text":"<p>[androidJvm]\\ fun loginWithEmailAndPassword()</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/registerWithEmailAndPassword</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ fun registerWithEmailAndPassword(activity: Activity)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/registerWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ fun registerWithGoogle(activity: Activity)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/signInWithGoogle</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ fun signInWithGoogle(activity: Activity)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/signInWithSavedCredentials</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ fun signInWithSavedCredentials(activity: Activity)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/update-email/","title":"Update email","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/updateEmail</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/update-email/#updateemail","title":"updateEmail","text":"<p>[androidJvm]\\ fun updateEmail(email: String)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/update-name/","title":"Update name","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/updateName</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/update-name/#updatename","title":"updateName","text":"<p>[androidJvm]\\ fun updateName(name: String)</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/update-password/","title":"Update password","text":"<p>//auth/dev.atick.auth.ui/AuthViewModel/updatePassword</p>"},{"location":"auth/auth/dev.atick.auth.ui/-auth-view-model/update-password/#updatepassword","title":"updatePassword","text":"<p>[androidJvm]\\ fun updatePassword(password: String)</p>"},{"location":"auth/auth/dev.atick.auth.ui.signin/","title":"Index","text":"<p>//auth/dev.atick.auth.ui.signin</p>"},{"location":"auth/auth/dev.atick.auth.ui.signin/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.ui.signin/#functions","title":"Functions","text":"Name Summary SignInRoute [androidJvm]@Composablefun SignInRoute(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean, authViewModel: AuthViewModel = hiltViewModel()) SignInScreenPreview [androidJvm]@Composablefun SignInScreenPreview()"},{"location":"auth/auth/dev.atick.auth.ui.signin/-sign-in-route/","title":"sign in route","text":"<p>//auth/dev.atick.auth.ui.signin/SignInRoute</p>"},{"location":"auth/auth/dev.atick.auth.ui.signin/-sign-in-route/#signinroute","title":"SignInRoute","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SignInRoute(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean, authViewModel: AuthViewModel = hiltViewModel())</p>"},{"location":"auth/auth/dev.atick.auth.ui.signin/-sign-in-screen-preview/","title":"sign in screen preview","text":"<p>//auth/dev.atick.auth.ui.signin/SignInScreenPreview</p>"},{"location":"auth/auth/dev.atick.auth.ui.signin/-sign-in-screen-preview/#signinscreenpreview","title":"SignInScreenPreview","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SignInScreenPreview()</p>"},{"location":"auth/auth/dev.atick.auth.ui.signup/","title":"Index","text":"<p>//auth/dev.atick.auth.ui.signup</p>"},{"location":"auth/auth/dev.atick.auth.ui.signup/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"auth/auth/dev.atick.auth.ui.signup/#functions","title":"Functions","text":"Name Summary SignUpRoute [androidJvm]@Composablefun SignUpRoute(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean, authViewModel: AuthViewModel = hiltViewModel()) SignUpScreenPreview [androidJvm]@Composablefun SignUpScreenPreview()"},{"location":"auth/auth/dev.atick.auth.ui.signup/-sign-up-route/","title":"sign up route","text":"<p>//auth/dev.atick.auth.ui.signup/SignUpRoute</p>"},{"location":"auth/auth/dev.atick.auth.ui.signup/-sign-up-route/#signuproute","title":"SignUpRoute","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SignUpRoute(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean, authViewModel: AuthViewModel = hiltViewModel())</p>"},{"location":"auth/auth/dev.atick.auth.ui.signup/-sign-up-screen-preview/","title":"sign up screen preview","text":"<p>//auth/dev.atick.auth.ui.signup/SignUpScreenPreview</p>"},{"location":"auth/auth/dev.atick.auth.ui.signup/-sign-up-screen-preview/#signupscreenpreview","title":"SignUpScreenPreview","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SignUpScreenPreview()</p>"},{"location":"core/android/","title":"Index","text":"<p>//android</p>"},{"location":"core/android/#android","title":"android","text":""},{"location":"core/android/#packages","title":"Packages","text":"Name dev.atick.core.di dev.atick.core.extensions dev.atick.core.utils"},{"location":"core/android/android/dev.atick.core.di/","title":"Index","text":"<p>//android/dev.atick.core.di</p>"},{"location":"core/android/android/dev.atick.core.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.di/#types","title":"Types","text":"Name Summary ApplicationScope [androidJvm]@Qualifierannotation class ApplicationScopeAnnotation used to mark the application scope. CoroutineModule [androidJvm]@Moduleobject CoroutineModuleDagger module that provides a CoroutineScope tied to the application lifecycle. DefaultDispatcher [androidJvm]@Qualifierannotation class DefaultDispatcherAnnotation used to mark the default coroutine dispatcher. DispatcherModule [androidJvm]@Moduleobject DispatcherModuleDagger module that provides coroutine dispatchers for different contexts. IoDispatcher [androidJvm]@Qualifierannotation class IoDispatcherAnnotation used to mark the I/O coroutine dispatcher. MainDispatcher [androidJvm]@Qualifierannotation class MainDispatcherAnnotation used to mark the main coroutine dispatcher. StringDecoderModule [androidJvm]@Moduleabstract class StringDecoderModuleDagger module providing bindings for StringDecoder implementations."},{"location":"core/android/android/dev.atick.core.di/-application-scope/","title":"Index","text":"<p>//android/dev.atick.core.di/ApplicationScope</p>"},{"location":"core/android/android/dev.atick.core.di/-application-scope/#applicationscope","title":"ApplicationScope","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class ApplicationScope</p> <p>Annotation used to mark the application scope.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/","title":"Index","text":"<p>//android/dev.atick.core.di/CoroutineModule</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/#coroutinemodule","title":"CoroutineModule","text":"<p>[androidJvm]\\ @Module</p> <p>object CoroutineModule</p> <p>Dagger module that provides a CoroutineScope tied to the application lifecycle.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/#functions","title":"Functions","text":"Name Summary providesCoroutineScope [androidJvm]@Provides@Singletonfun providesCoroutineScope(dispatcher: CoroutineDispatcher): CoroutineScopeProvides a CoroutineScope that is tied to the application lifecycle."},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/","title":"Provides coroutine scope","text":"<p>//android/dev.atick.core.di/CoroutineModule/providesCoroutineScope</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/#providescoroutinescope","title":"providesCoroutineScope","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun providesCoroutineScope(dispatcher: CoroutineDispatcher): CoroutineScope</p> <p>Provides a CoroutineScope that is tied to the application lifecycle.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/#return","title":"Return","text":"<p>A CoroutineScope with a SupervisorJob and the provided dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/#parameters","title":"Parameters","text":"<p>androidJvm</p> dispatcher The CoroutineDispatcher to be used by the CoroutineScope."},{"location":"core/android/android/dev.atick.core.di/-default-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/DefaultDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-default-dispatcher/#defaultdispatcher","title":"DefaultDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class DefaultDispatcher</p> <p>Annotation used to mark the default coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/","title":"Index","text":"<p>//android/dev.atick.core.di/DispatcherModule</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/#dispatchermodule","title":"DispatcherModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DispatcherModule</p> <p>Dagger module that provides coroutine dispatchers for different contexts.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/#functions","title":"Functions","text":"Name Summary providesDefaultDispatcher [androidJvm]@Providesfun providesDefaultDispatcher(): CoroutineDispatcherProvides the default coroutine dispatcher, which is used for general-purpose background tasks. providesIoDispatcher [androidJvm]@Providesfun providesIoDispatcher(): CoroutineDispatcherProvides the I/O coroutine dispatcher, which is used for I/O-bound tasks such as disk or network operations. providesMainDispatcher [androidJvm]@Providesfun providesMainDispatcher(): CoroutineDispatcherProvides the main coroutine dispatcher, which is used for executing tasks on the main/UI thread."},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/","title":"Provides default dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesDefaultDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/#providesdefaultdispatcher","title":"providesDefaultDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesDefaultDispatcher(): CoroutineDispatcher</p> <p>Provides the default coroutine dispatcher, which is used for general-purpose background tasks.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/#return","title":"Return","text":"<p>The default coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/","title":"Provides io dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesIoDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/#providesiodispatcher","title":"providesIoDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesIoDispatcher(): CoroutineDispatcher</p> <p>Provides the I/O coroutine dispatcher, which is used for I/O-bound tasks such as disk or network operations.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/#return","title":"Return","text":"<p>The I/O coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/","title":"Provides main dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesMainDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/#providesmaindispatcher","title":"providesMainDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesMainDispatcher(): CoroutineDispatcher</p> <p>Provides the main coroutine dispatcher, which is used for executing tasks on the main/UI thread.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/#return","title":"Return","text":"<p>The main coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-io-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/IoDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-io-dispatcher/#iodispatcher","title":"IoDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class IoDispatcher</p> <p>Annotation used to mark the I/O coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-main-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/MainDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-main-dispatcher/#maindispatcher","title":"MainDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class MainDispatcher</p> <p>Annotation used to mark the main coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/","title":"Index","text":"<p>//android/dev.atick.core.di/StringDecoderModule</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#stringdecodermodule","title":"StringDecoderModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class StringDecoderModule</p> <p>Dagger module providing bindings for StringDecoder implementations.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#constructors","title":"Constructors","text":"StringDecoderModule [androidJvm]constructor()"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#functions","title":"Functions","text":"Name Summary bindStringDecoder [androidJvm]@Bindsabstract fun bindStringDecoder(uriDecoder: UriDecoder): StringDecoderBinds the provided UriDecoder instance as the implementation for StringDecoder."},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/-string-decoder-module/","title":"string decoder module","text":"<p>//android/dev.atick.core.di/StringDecoderModule/StringDecoderModule</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/-string-decoder-module/#stringdecodermodule","title":"StringDecoderModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/","title":"Bind string decoder","text":"<p>//android/dev.atick.core.di/StringDecoderModule/bindStringDecoder</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/#bindstringdecoder","title":"bindStringDecoder","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>abstract fun bindStringDecoder(uriDecoder: UriDecoder): StringDecoder</p> <p>Binds the provided UriDecoder instance as the implementation for StringDecoder.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/#parameters","title":"Parameters","text":"<p>androidJvm</p> uriDecoder The instance of UriDecoder to be bound as StringDecoder."},{"location":"core/android/android/dev.atick.core.extensions/","title":"Index","text":"<p>//android/dev.atick.core.extensions</p>"},{"location":"core/android/android/dev.atick.core.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.extensions/#types","title":"Types","text":"Name Summary Options [androidJvm]annotation class OptionsAnnotation to define the valid options for notification importance levels."},{"location":"core/android/android/dev.atick.core.extensions/#functions","title":"Functions","text":"Name Summary asFormattedDateTime [androidJvm]fun Long.asFormattedDateTime(): StringFormats a Long timestamp to a human-readable date-time string. Uses the system default time zone. asOneTimeEvent [androidJvm]fun Throwable.asOneTimeEvent(): OneTimeEvent&lt;Throwable?&gt; cancelNotification [androidJvm]fun Context.cancelNotification(notificationId: Int)Cancels a previously shown notification. createNotification [androidJvm]fun Context.createNotification(channelId: String, @StringRestitle: Int, @StringRescontent: Int, icon: Int, pendingIntent: PendingIntent? = null): Notificationfun Context.createNotification(channelId: String, title: String, content: String, icon: Int, pendingIntent: PendingIntent? = null): NotificationCreates a notification using the specified channel ID, title, content, and icon. createNotificationChannel [androidJvm]fun Context.createNotificationChannel(channelId: String, @StringReschannelName: Int, @StringReschannelDescription: Int, importance: Int)Creates a notification channel with the specified channel ID, name, description, and importance. createProgressNotification [androidJvm]fun Context.createProgressNotification(channelId: String, @StringRestitle: Int, total: Int, current: Int, @DrawableResicon: Int, pendingIntent: PendingIntent? = null): NotificationCreates a progress notification using the specified channel ID, title, total, current, and icon. format [androidJvm]fun &lt;T : Number, Comparable&lt;T&gt;&gt; T.format(nDecimal: Int = 2): StringFormats a number (Float or Double) to a string with specified number of decimal places. Handles special cases like NaN and Infinity. Uses locale-specific decimal separator. Removes trailing zeros after decimal point. getActivity [androidJvm]fun Context.getActivity(): ComponentActivity?Provides the activity from Context (https://stackoverflow.com/a/68423182/12737399) getFileFromContentUri [androidJvm]fun Context.getFileFromContentUri(contentUri: Uri): FileRetrieves a File object from the given content URI. getStackTraceString [androidJvm]fun Throwable.getStackTraceString(): String getTmpFileUri [androidJvm]fun Context.getTmpFileUri(appId: String): UriRetrieves a temporary file URI for the specified app ID. hasPermission [androidJvm]fun Context.hasPermission(permission: String): BooleanChecks if the app has a given permission. isAllPermissionsGranted [androidJvm]fun Context.isAllPermissionsGranted(permissions: List&lt;String&gt;): BooleanChecks if all the given permissions are granted. isEmailValid [androidJvm]fun String?.isEmailValid(): BooleanChecks if the string is a valid email address. isPasswordValid [androidJvm]fun String?.isPasswordValid(): BooleanChecks if the string is a valid password based on the specified criteria. isValidFullName [androidJvm]fun String?.isValidFullName(): BooleanChecks if a given full name is valid. showNotification [androidJvm]fun Context.showNotification(notificationId: Int, notification: Notification)Shows a notification using the specified notification ID and notification object. showToast [androidJvm]fun Context.showToast(message: String)Displays a short toast message. stateInDelayed [androidJvm]fun &lt;T&gt; Flow&lt;T&gt;.stateInDelayed(initialValue: T, scope: CoroutineScope): StateFlow&lt;T&gt;Returns a StateFlow that represents the last value emitted by the Flow"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/","title":"As formatted date time","text":"<p>//android/dev.atick.core.extensions/asFormattedDateTime</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/#asformatteddatetime","title":"asFormattedDateTime","text":"<p>[androidJvm]\\ fun Long.asFormattedDateTime(): String</p> <p>Formats a Long timestamp to a human-readable date-time string. Uses the system default time zone.</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/#return","title":"Return","text":"<p>Formatted date-time string</p> <p>Example: 1640995200000L.asFormattedDateTime() -&gt; \"December 31, 2021 at 11:59 PM\"</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-one-time-event/","title":"As one time event","text":"<p>//android/dev.atick.core.extensions/asOneTimeEvent</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-one-time-event/#asonetimeevent","title":"asOneTimeEvent","text":"<p>[androidJvm]\\ fun Throwable.asOneTimeEvent(): OneTimeEvent&lt;Throwable?&gt;</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/","title":"Cancel notification","text":"<p>//android/dev.atick.core.extensions/cancelNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/#cancelnotification","title":"cancelNotification","text":"<p>[androidJvm]\\ fun Context.cancelNotification(notificationId: Int)</p> <p>Cancels a previously shown notification.</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> notificationId The ID of the notification to be canceled."},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/","title":"Create notification channel","text":"<p>//android/dev.atick.core.extensions/createNotificationChannel</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/#createnotificationchannel","title":"createNotificationChannel","text":"<p>[androidJvm]\\ fun Context.createNotificationChannel(channelId: String, @StringReschannelName: Int, @StringReschannelDescription: Int, importance: Int)</p> <p>Creates a notification channel with the specified channel ID, name, description, and importance.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. channelName The name of the notification channel. channelDescription The description of the notification channel. importance The importance level of the notification channel."},{"location":"core/android/android/dev.atick.core.extensions/create-notification/","title":"Create notification","text":"<p>//android/dev.atick.core.extensions/createNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#createnotification","title":"createNotification","text":"<p>[androidJvm]\\ fun Context.createNotification(channelId: String, @StringRestitle: Int, @StringRescontent: Int, icon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>fun Context.createNotification(channelId: String, title: String, content: String, icon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>Creates a notification using the specified channel ID, title, content, and icon.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#return","title":"Return","text":"<p>The notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. title The title of the notification. content The content of the notification. icon The icon of the notification."},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/","title":"Create progress notification","text":"<p>//android/dev.atick.core.extensions/createProgressNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#createprogressnotification","title":"createProgressNotification","text":"<p>[androidJvm]\\ fun Context.createProgressNotification(channelId: String, @StringRestitle: Int, total: Int, current: Int, @DrawableResicon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>Creates a progress notification using the specified channel ID, title, total, current, and icon.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#return","title":"Return","text":"<p>The notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. title The title of the notification. total The total progress value. current The current progress value. icon The icon of the notification."},{"location":"core/android/android/dev.atick.core.extensions/format/","title":"Format","text":"<p>//android/dev.atick.core.extensions/format</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#format","title":"format","text":"<p>[androidJvm]\\ fun &lt;T : Number, Comparable&lt;T&gt;&gt; T.format(nDecimal: Int = 2): String</p> <p>Formats a number (Float or Double) to a string with specified number of decimal places. Handles special cases like NaN and Infinity. Uses locale-specific decimal separator. Removes trailing zeros after decimal point.</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#return","title":"Return","text":"<p>Formatted string representation of the number</p> <p>Examples: 123.4567.format() -&gt; \"123.46\" 123.4f.format() -&gt; \"123.40\" 123.0.format() -&gt; \"123\" (-123.45).format() -&gt; \"-123.45\" Double.NaN.format() -&gt; \"NaN\" Float.POSITIVE_INFINITY.format() -&gt; \"\u221e\"</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#parameters","title":"Parameters","text":"<p>androidJvm</p> nDecimal Number of decimal places (default is 2)"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/","title":"Get activity","text":"<p>//android/dev.atick.core.extensions/getActivity</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/#getactivity","title":"getActivity","text":"<p>[androidJvm]\\ fun Context.getActivity(): ComponentActivity?</p> <p>Provides the activity from Context (https://stackoverflow.com/a/68423182/12737399)</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/#return","title":"Return","text":"<p>The activity associated with the context, or <code>null</code> if the context is not an activity.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/","title":"Get file from content uri","text":"<p>//android/dev.atick.core.extensions/getFileFromContentUri</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#getfilefromcontenturi","title":"getFileFromContentUri","text":"<p>[androidJvm]\\ fun Context.getFileFromContentUri(contentUri: Uri): File</p> <p>Retrieves a File object from the given content URI.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#return","title":"Return","text":"<p>The File object representing the content URI.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#parameters","title":"Parameters","text":"<p>androidJvm</p> contentUri The content URI of the file."},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#throws","title":"Throws","text":"FileNotFoundException If the content URI cannot be opened or file cannot be created. IOException If there is an error during file operations. SecurityException If there are insufficient permissions to access the content."},{"location":"core/android/android/dev.atick.core.extensions/get-stack-trace-string/","title":"Get stack trace string","text":"<p>//android/dev.atick.core.extensions/getStackTraceString</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-stack-trace-string/#getstacktracestring","title":"getStackTraceString","text":"<p>[androidJvm]\\ fun Throwable.getStackTraceString(): String</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/","title":"Get tmp file uri","text":"<p>//android/dev.atick.core.extensions/getTmpFileUri</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#gettmpfileuri","title":"getTmpFileUri","text":"<p>[androidJvm]\\ fun Context.getTmpFileUri(appId: String): Uri</p> <p>Retrieves a temporary file URI for the specified app ID.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#return","title":"Return","text":"<p>The URI of the temporary file.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#parameters","title":"Parameters","text":"<p>androidJvm</p> appId The ID of the app."},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#throws","title":"Throws","text":"IllegalAccessException if unable to create or retrieve the temporary file."},{"location":"core/android/android/dev.atick.core.extensions/has-permission/","title":"Has permission","text":"<p>//android/dev.atick.core.extensions/hasPermission</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#haspermission","title":"hasPermission","text":"<p>[androidJvm]\\ fun Context.hasPermission(permission: String): Boolean</p> <p>Checks if the app has a given permission.</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#return","title":"Return","text":"<p><code>true</code> if the permission is granted, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#parameters","title":"Parameters","text":"<p>androidJvm</p> permission The permission to check."},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/","title":"Is all permissions granted","text":"<p>//android/dev.atick.core.extensions/isAllPermissionsGranted</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#isallpermissionsgranted","title":"isAllPermissionsGranted","text":"<p>[androidJvm]\\ fun Context.isAllPermissionsGranted(permissions: List&lt;String&gt;): Boolean</p> <p>Checks if all the given permissions are granted.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#return","title":"Return","text":"<p><code>true</code> if all permissions are granted, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#parameters","title":"Parameters","text":"<p>androidJvm</p> permissions List of permissions to check."},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/","title":"Is email valid","text":"<p>//android/dev.atick.core.extensions/isEmailValid</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/#isemailvalid","title":"isEmailValid","text":"<p>[androidJvm]\\ fun String?.isEmailValid(): Boolean</p> <p>Checks if the string is a valid email address.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/#return","title":"Return","text":"<p><code>true</code> if the string is a valid email address, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/","title":"Is password valid","text":"<p>//android/dev.atick.core.extensions/isPasswordValid</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/#ispasswordvalid","title":"isPasswordValid","text":"<p>[androidJvm]\\ fun String?.isPasswordValid(): Boolean</p> <p>Checks if the string is a valid password based on the specified criteria.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/#return","title":"Return","text":"<p><code>true</code> if the string is a valid password, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/","title":"Is valid full name","text":"<p>//android/dev.atick.core.extensions/isValidFullName</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/#isvalidfullname","title":"isValidFullName","text":"<p>[androidJvm]\\ fun String?.isValidFullName(): Boolean</p> <p>Checks if a given full name is valid.</p> <p>A valid full name consists of at least two parts: a first name and a last name. Each part should contain only letters (assuming names don't contain special characters).</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/#return","title":"Return","text":"<p><code>true</code> if the full name is valid, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/","title":"Show notification","text":"<p>//android/dev.atick.core.extensions/showNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/#shownotification","title":"showNotification","text":"<p>[androidJvm]\\ fun Context.showNotification(notificationId: Int, notification: Notification)</p> <p>Shows a notification using the specified notification ID and notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> notificationId The ID of the notification. notification The notification object to be shown."},{"location":"core/android/android/dev.atick.core.extensions/show-toast/","title":"Show toast","text":"<p>//android/dev.atick.core.extensions/showToast</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-toast/#showtoast","title":"showToast","text":"<p>[androidJvm]\\ fun Context.showToast(message: String)</p> <p>Displays a short toast message.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-toast/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to be displayed in the toast."},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/","title":"State in delayed","text":"<p>//android/dev.atick.core.extensions/stateInDelayed</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#stateindelayed","title":"stateInDelayed","text":"<p>[androidJvm]\\ fun &lt;T&gt; Flow&lt;T&gt;.stateInDelayed(initialValue: T, scope: CoroutineScope): StateFlow&lt;T&gt;</p> <p>Returns a StateFlow that represents the last value emitted by the Flow</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#return","title":"Return","text":"<p>A StateFlow that represents the last value emitted by the Flow</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#parameters","title":"Parameters","text":"<p>androidJvm</p> initialValue The initial value of the StateFlow scope The CoroutineScope to be used for the StateFlow"},{"location":"core/android/android/dev.atick.core.extensions/-options/","title":"Index","text":"<p>//android/dev.atick.core.extensions/Options</p>"},{"location":"core/android/android/dev.atick.core.extensions/-options/#options","title":"Options","text":"<p>[androidJvm]\\ annotation class Options</p> <p>Annotation to define the valid options for notification importance levels.</p>"},{"location":"core/android/android/dev.atick.core.utils/","title":"Index","text":"<p>//android/dev.atick.core.utils</p>"},{"location":"core/android/android/dev.atick.core.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.utils/#types","title":"Types","text":"Name Summary OneTimeEvent [androidJvm]class OneTimeEvent&lt;T&gt;(content: T)A wrapper for data that is exposed via a LiveData that represents an event. Resource [androidJvm]sealed class Resource&lt;T&gt;A sealed class that represents the result of a resource operation. StringDecoder [androidJvm]interface StringDecoderInterface representing a string decoder. UriDecoder [androidJvm]class UriDecoder@Injectconstructor : StringDecoderImplementation of StringDecoder that uses Android's Uri.decode method for decoding strings."},{"location":"core/android/android/dev.atick.core.utils/#functions","title":"Functions","text":"Name Summary networkBoundResource [androidJvm]inline fun &lt;ResultType, RequestType&gt; networkBoundResource(crossinline query: () -&gt; Flow&lt;ResultType&gt;, crossinline fetch: suspend () -&gt; RequestType, crossinline saveFetchedResult: suspend (RequestType) -&gt; Unit, crossinline shouldFetch: (ResultType) -&gt; Boolean = { true }): Flow&lt;Resource&lt;ResultType&gt;&gt;Creates a network-bound resource flow that performs a query and fetches new data if necessary. suspendCoroutineWithTimeout [androidJvm]inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeMillis: Long, crossinline block: (CancellableContinuation&lt;T&gt;) -&gt; Unit): Tinline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeout: Duration, crossinline block: (Continuation&lt;T&gt;) -&gt; Unit): TSuspends the current coroutine until the specified block is completed or the timeout is reached. suspendRunCatching [androidJvm]inline suspend fun &lt;T&gt; suspendRunCatching(crossinline block: suspend () -&gt; T): Result&lt;T&gt;Runs the specified block and returns the result as a Result."},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/","title":"Network bound resource","text":"<p>//android/dev.atick.core.utils/networkBoundResource</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#networkboundresource","title":"networkBoundResource","text":"<p>[androidJvm]\\ inline fun &lt;ResultType, RequestType&gt; networkBoundResource(crossinline query: () -&gt; Flow&lt;ResultType&gt;, crossinline fetch: suspend () -&gt; RequestType, crossinline saveFetchedResult: suspend (RequestType) -&gt; Unit, crossinline shouldFetch: (ResultType) -&gt; Boolean = { true }): Flow&lt;Resource&lt;ResultType&gt;&gt;</p> <p>Creates a network-bound resource flow that performs a query and fetches new data if necessary.</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#return","title":"Return","text":"<p>A flow emitting the resource state based on the query and fetch operations.</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> ResultType The type of the query result. RequestType The type of the fetched data. query The query function that returns a flow of the current data. fetch The suspend function that fetches new data. saveFetchedResult The suspend function that saves the fetched result. shouldFetch The predicate function that determines if fetching new data is necessary."},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/","title":"Suspend coroutine with timeout","text":"<p>//android/dev.atick.core.utils/suspendCoroutineWithTimeout</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#suspendcoroutinewithtimeout","title":"suspendCoroutineWithTimeout","text":"<p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeout: Duration, crossinline block: (Continuation&lt;T&gt;) -&gt; Unit): T</p> <p>Suspends the current coroutine until the specified block is completed or the timeout is reached.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#return","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#parameters","title":"Parameters","text":"<p>androidJvm</p> timeout The duration to wait for the block to complete. block The block to execute. <p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeMillis: Long, crossinline block: (CancellableContinuation&lt;T&gt;) -&gt; Unit): T</p> <p>Suspends the current coroutine until the specified block is completed or the timeout is reached.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#return_1","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> timeMillis The time in milliseconds to wait for the block to complete. block The block to execute."},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/","title":"Suspend run catching","text":"<p>//android/dev.atick.core.utils/suspendRunCatching</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#suspendruncatching","title":"suspendRunCatching","text":"<p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendRunCatching(crossinline block: suspend () -&gt; T): Result&lt;T&gt;</p> <p>Runs the specified block and returns the result as a Result.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#return","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#parameters","title":"Parameters","text":"<p>androidJvm</p> block The block to execute."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/","title":"Index","text":"<p>//android/dev.atick.core.utils/OneTimeEvent</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#onetimeevent","title":"OneTimeEvent","text":"<p>class OneTimeEvent&lt;T&gt;(content: T)</p> <p>A wrapper for data that is exposed via a LiveData that represents an event.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the content."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#constructors","title":"Constructors","text":"OneTimeEvent [androidJvm]constructor(content: T)"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#functions","title":"Functions","text":"Name Summary getContentIfNotHandled [androidJvm]fun getContentIfNotHandled(): T?Returns the content if it has not been handled yet, and marks it as handled. peekContent [androidJvm]fun peekContent(): TReturns the content, even if it has already been handled."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/-one-time-event/","title":"one time event","text":"<p>//android/dev.atick.core.utils/OneTimeEvent/OneTimeEvent</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/-one-time-event/#onetimeevent","title":"OneTimeEvent","text":"<p>[androidJvm]\\ constructor(content: T)</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/-one-time-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the content."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/get-content-if-not-handled/","title":"Get content if not handled","text":"<p>//android/dev.atick.core.utils/OneTimeEvent/getContentIfNotHandled</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/get-content-if-not-handled/#getcontentifnothandled","title":"getContentIfNotHandled","text":"<p>[androidJvm]\\ fun getContentIfNotHandled(): T?</p> <p>Returns the content if it has not been handled yet, and marks it as handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/get-content-if-not-handled/#return","title":"Return","text":"<p>The content if it has not been handled, otherwise null.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/peek-content/","title":"Peek content","text":"<p>//android/dev.atick.core.utils/OneTimeEvent/peekContent</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/peek-content/#peekcontent","title":"peekContent","text":"<p>[androidJvm]\\ fun peekContent(): T</p> <p>Returns the content, even if it has already been handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/peek-content/#return","title":"Return","text":"<p>The content.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/#resource","title":"Resource","text":"<p>sealed class Resource&lt;T&gt;</p> <p>A sealed class that represents the result of a resource operation.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation. error The error that occurred during the operation, if any."},{"location":"core/android/android/dev.atick.core.utils/-resource/#inheritors","title":"Inheritors","text":"Success Loading Error"},{"location":"core/android/android/dev.atick.core.utils/-resource/#types","title":"Types","text":"Name Summary Error [androidJvm]class Error&lt;T&gt;(data: T? = null, error: Throwable) : Resource&lt;T&gt; Represents an error state with optional data and an error. Loading [androidJvm]class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt; Represents a loading state with optional data. Success [androidJvm]class Success&lt;T&gt;(data: T) : Resource&lt;T&gt; Represents a successful result with data."},{"location":"core/android/android/dev.atick.core.utils/-resource/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? = null error [androidJvm]val error: Throwable? = null"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/","title":"Data","text":"<p>//android/dev.atick.core.utils/Resource/data</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/#data","title":"data","text":"<p>[androidJvm]\\ val data: T? = null</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/#parameters","title":"Parameters","text":"<p>androidJvm</p> data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/error/","title":"Error","text":"<p>//android/dev.atick.core.utils/Resource/error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/error/#error","title":"error","text":"<p>[androidJvm]\\ val error: Throwable? = null</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/error/#parameters","title":"Parameters","text":"<p>androidJvm</p> error The error that occurred during the operation, if any."},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#error","title":"Error","text":"<p>class Error&lt;T&gt;(data: T? = null, error: Throwable) : Resource&lt;T&gt; </p> <p>Represents an error state with optional data and an error.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation. error The error that occurred during the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#constructors","title":"Constructors","text":"Error [androidJvm]constructor(data: T? = null, error: Throwable)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/","title":"error","text":"<p>//android/dev.atick.core.utils/Resource/Error/Error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/#error","title":"Error","text":"<p>[androidJvm]\\ constructor(data: T? = null, error: Throwable)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation. error The error that occurred during the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Loading</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#loading","title":"Loading","text":"<p>class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt; </p> <p>Represents a loading state with optional data.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#constructors","title":"Constructors","text":"Loading [androidJvm]constructor(data: T? = null)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/","title":"loading","text":"<p>//android/dev.atick.core.utils/Resource/Loading/Loading</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/#loading","title":"Loading","text":"<p>[androidJvm]\\ constructor(data: T? = null)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Success</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#success","title":"Success","text":"<p>class Success&lt;T&gt;(data: T) : Resource&lt;T&gt; </p> <p>Represents a successful result with data.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#constructors","title":"Constructors","text":"Success [androidJvm]constructor(data: T)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/","title":"success","text":"<p>//android/dev.atick.core.utils/Resource/Success/Success</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/#success","title":"Success","text":"<p>[androidJvm]\\ constructor(data: T)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/","title":"Index","text":"<p>//android/dev.atick.core.utils/StringDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#stringdecoder","title":"StringDecoder","text":"<p>interface StringDecoder</p> <p>Interface representing a string decoder.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#inheritors","title":"Inheritors","text":"UriDecoder"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#functions","title":"Functions","text":"Name Summary decodeString [androidJvm]abstract fun decodeString(encodedString: String): StringDecodes an encoded string."},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/","title":"Decode string","text":"<p>//android/dev.atick.core.utils/StringDecoder/decodeString</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#decodestring","title":"decodeString","text":"<p>[androidJvm]\\ abstract fun decodeString(encodedString: String): String</p> <p>Decodes an encoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#return","title":"Return","text":"<p>The decoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> encodedString The string to be decoded."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/","title":"Index","text":"<p>//android/dev.atick.core.utils/UriDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#uridecoder","title":"UriDecoder","text":"<p>[androidJvm]\\ class UriDecoder@Injectconstructor : StringDecoder</p> <p>Implementation of StringDecoder that uses Android's Uri.decode method for decoding strings.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#constructors","title":"Constructors","text":"UriDecoder [androidJvm]@Injectconstructor()Creates a UriDecoder instance."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#functions","title":"Functions","text":"Name Summary decodeString [androidJvm]open override fun decodeString(encodedString: String): StringDecodes an encoded string using Android's Uri.decode method."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/-uri-decoder/","title":"uri decoder","text":"<p>//android/dev.atick.core.utils/UriDecoder/UriDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/-uri-decoder/#uridecoder","title":"UriDecoder","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor()</p> <p>Creates a UriDecoder instance.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/","title":"Decode string","text":"<p>//android/dev.atick.core.utils/UriDecoder/decodeString</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#decodestring","title":"decodeString","text":"<p>[androidJvm]\\ open override fun decodeString(encodedString: String): String</p> <p>Decodes an encoded string using Android's Uri.decode method.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#return","title":"Return","text":"<p>The decoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> encodedString The string to be decoded."},{"location":"core/ui/","title":"Index","text":"<p>//ui</p>"},{"location":"core/ui/#ui","title":"ui","text":""},{"location":"core/ui/#packages","title":"Packages","text":"Name dev.atick.core.ui.components dev.atick.core.ui.extensions dev.atick.core.ui.theme dev.atick.core.ui.utils"},{"location":"core/ui/ui/dev.atick.core.ui.components/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.components/#types","title":"Types","text":"Name Summary JetpackButtonDefaults [androidJvm]object JetpackButtonDefaultsJetpack button default values. JetpackChipDefaults [androidJvm]object JetpackChipDefaultsJetpack chip default values. JetpackIconButtonDefaults [androidJvm]object JetpackIconButtonDefaultsJetpack icon button default values. JetpackNavigationDefaults [androidJvm]object JetpackNavigationDefaultsJetpack navigation default values."},{"location":"core/ui/ui/dev.atick.core.ui.components/#functions","title":"Functions","text":"Name Summary AppBackground [androidJvm]@Composablefun AppBackground(modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)The main background for the app. Uses LocalBackgroundTheme to set the color and tonal elevation of a Surface. AppGradientBackground [androidJvm]@Composablefun AppGradientBackground(modifier: Modifier = Modifier, gradientColors: GradientColors = LocalGradientColors.current, content: @Composable() -&gt; Unit)A gradient background for select screens. Uses LocalBackgroundTheme to set the gradient colors of a Box within a Surface. DynamicAsyncImage [androidJvm]@Composablefun DynamicAsyncImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier, placeholder: Painter? = null)A wrapper around AsyncImage which determines the colorFilter based on the theme JetpackButton [androidJvm]@Composablefun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)Jetpack filled button with generic content slot. Wraps Material 3 Button.[androidJvm]@Composablefun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack filled button with text and icon content slots. JetpackFilterChip [androidJvm]@Composablefun JetpackFilterChip(selected: Boolean, onSelectedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, label: @Composable() -&gt; Unit)Jetpack filter chip with included leading checked icon as well as text content slot. JetpackIconToggleButton [androidJvm]@Composablefun JetpackIconToggleButton(checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, icon: @Composable() -&gt; Unit, checkedIcon: @Composable() -&gt; Unit = icon)Jetpack toggle button with icon and checked icon content slots. Wraps Material 3 IconButton. JetpackLoadingWheel [androidJvm]@Composablefun JetpackLoadingWheel(contentDesc: String, modifier: Modifier = Modifier) JetpackNavigationBar [androidJvm]@Composablefun JetpackNavigationBar(modifier: Modifier = Modifier, content: @ComposableRowScope.() -&gt; Unit)Jetpack navigation bar with content slot. Wraps Material 3 NavigationBar. JetpackNavigationBarItem [androidJvm]@Composablefun RowScope.JetpackNavigationBarItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)Jetpack navigation bar item with icon and label content slots. Wraps Material 3 NavigationBarItem. JetpackNavigationRail [androidJvm]@Composablefun JetpackNavigationRail(modifier: Modifier = Modifier, header: @ComposableColumnScope.() -&gt; Unit? = null, content: @ComposableColumnScope.() -&gt; Unit)Jetpack navigation rail with header and content slots. Wraps Material 3 NavigationRail. JetpackNavigationRailItem [androidJvm]@Composablefun JetpackNavigationRailItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)Jetpack navigation rail item with icon and label content slots. Wraps Material 3 NavigationRailItem. JetpackOutlinedButton [androidJvm]@Composablefun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)Jetpack outlined button with generic content slot. Wraps Material 3 OutlinedButton.[androidJvm]@Composablefun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack outlined button with text and icon content slots. JetpackOverlayLoadingWheel [androidJvm]@Composablefun JetpackOverlayLoadingWheel(contentDesc: String, modifier: Modifier = Modifier) JetpackPasswordFiled [androidJvm]@Composablefun JetpackPasswordFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, errorMessage: String? = null)A Jetpack Compose password field with customizable appearance and optional error message display. JetpackTextButton [androidJvm]@Composablefun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @ComposableRowScope.() -&gt; Unit)Jetpack text button with generic content slot. Wraps Material 3 TextButton.[androidJvm]@Composablefun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack text button with text and icon content slots. JetpackTextFiled [androidJvm]@Composablefun JetpackTextFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null)A Jetpack Compose text field with customizable appearance and optional error message display. JetpackTopAppBar [androidJvm]@Composablefun JetpackTopAppBar(@StringRestitleRes: Int, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onActionClick: () -&gt; Unit = {})@Composablefun JetpackTopAppBar(@StringRestitleRes: Int, navigationIcon: ImageVector, navigationIconContentDescription: String?, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onNavigationClick: () -&gt; Unit = {}, onActionClick: () -&gt; Unit = {}) JetpackTopAppBarWithAvatar [androidJvm]@Composablefun JetpackTopAppBarWithAvatar(@StringRestitleRes: Int, avatarUri: String?, avatarContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onAvatarClick: () -&gt; Unit = {})"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/","title":"app background","text":"<p>//ui/dev.atick.core.ui.components/AppBackground</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/#appbackground","title":"AppBackground","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun AppBackground(modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)</p> <p>The main background for the app. Uses LocalBackgroundTheme to set the color and tonal elevation of a Surface.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the background. content The background content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/","title":"app gradient background","text":"<p>//ui/dev.atick.core.ui.components/AppGradientBackground</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/#appgradientbackground","title":"AppGradientBackground","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun AppGradientBackground(modifier: Modifier = Modifier, gradientColors: GradientColors = LocalGradientColors.current, content: @Composable() -&gt; Unit)</p> <p>A gradient background for select screens. Uses LocalBackgroundTheme to set the gradient colors of a Box within a Surface.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the background. gradientColors The gradient colors to be rendered. content The background content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-dynamic-async-image/","title":"dynamic async image","text":"<p>//ui/dev.atick.core.ui.components/DynamicAsyncImage</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-dynamic-async-image/#dynamicasyncimage","title":"DynamicAsyncImage","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun DynamicAsyncImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier, placeholder: Painter? = null)</p> <p>A wrapper around AsyncImage which determines the colorFilter based on the theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/","title":"jetpack button","text":"<p>//ui/dev.atick.core.ui.components/JetpackButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#jetpackbutton","title":"JetpackButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack filled button with generic content slot. Wraps Material 3 Button.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. contentPadding The spacing values to apply internally between the container and the content. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack filled button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/","title":"jetpack filter chip","text":"<p>//ui/dev.atick.core.ui.components/JetpackFilterChip</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/#jetpackfilterchip","title":"JetpackFilterChip","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackFilterChip(selected: Boolean, onSelectedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, label: @Composable() -&gt; Unit)</p> <p>Jetpack filter chip with included leading checked icon as well as text content slot.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether the chip is currently checked. onSelectedChange Called when the user clicks the chip and toggles checked. modifier Modifier to be applied to the chip. enabled Controls the enabled state of the chip. When <code>false</code>, this chip will not be clickable and will appear disabled to accessibility services. label The text label content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/","title":"jetpack icon toggle button","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconToggleButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/#jetpackicontogglebutton","title":"JetpackIconToggleButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackIconToggleButton(checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, icon: @Composable() -&gt; Unit, checkedIcon: @Composable() -&gt; Unit = icon)</p> <p>Jetpack toggle button with icon and checked icon content slots. Wraps Material 3 IconButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> checked Whether the toggle button is currently checked. onCheckedChange Called when the user clicks the toggle button and toggles checked. modifier Modifier to be applied to the toggle button. enabled Controls the enabled state of the toggle button. When <code>false</code>, this toggle button will not be clickable and will appear disabled to accessibility services. icon The icon content to show when unchecked. checkedIcon The icon content to show when checked."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/","title":"jetpack loading wheel","text":"<p>//ui/dev.atick.core.ui.components/JetpackLoadingWheel</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/#jetpackloadingwheel","title":"JetpackLoadingWheel","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/","title":"jetpack navigation bar item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationBarItem</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/#jetpacknavigationbaritem","title":"JetpackNavigationBarItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun RowScope.JetpackNavigationBarItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)</p> <p>Jetpack navigation bar item with icon and label content slots. Wraps Material 3 NavigationBarItem.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this item is selected. onClick The callback to be invoked when this item is selected. icon The item icon content. modifier Modifier to be applied to this item. selectedIcon The item icon content when selected. enabled controls the enabled state of this item. When <code>false</code>, this item will not be clickable and will appear disabled to accessibility services. label The item text label content. alwaysShowLabel Whether to always show the label for this item. If false, the label will only be shown when this item is selected."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/","title":"jetpack navigation bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/#jetpacknavigationbar","title":"JetpackNavigationBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationBar(modifier: Modifier = Modifier, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack navigation bar with content slot. Wraps Material 3 NavigationBar.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation bar. content Destinations inside the navigation bar. This should contain multiple NavigationBarItems."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/","title":"jetpack navigation rail item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationRailItem</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/#jetpacknavigationrailitem","title":"JetpackNavigationRailItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationRailItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)</p> <p>Jetpack navigation rail item with icon and label content slots. Wraps Material 3 NavigationRailItem.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this item is selected. onClick The callback to be invoked when this item is selected. icon The item icon content. modifier Modifier to be applied to this item. selectedIcon The item icon content when selected. enabled controls the enabled state of this item. When <code>false</code>, this item will not be clickable and will appear disabled to accessibility services. label The item text label content. alwaysShowLabel Whether to always show the label for this item. If false, the label will only be shown when this item is selected."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/","title":"jetpack navigation rail","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationRail</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/#jetpacknavigationrail","title":"JetpackNavigationRail","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationRail(modifier: Modifier = Modifier, header: @ComposableColumnScope.() -&gt; Unit? = null, content: @ComposableColumnScope.() -&gt; Unit)</p> <p>Jetpack navigation rail with header and content slots. Wraps Material 3 NavigationRail.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation rail. header Optional header that may hold a floating action button or a logo. content Destinations inside the navigation rail. This should contain multiple NavigationRailItems."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/","title":"jetpack outlined button","text":"<p>//ui/dev.atick.core.ui.components/JetpackOutlinedButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#jetpackoutlinedbutton","title":"JetpackOutlinedButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack outlined button with generic content slot. Wraps Material 3 OutlinedButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. contentPadding The spacing values to apply internally between the container and the content. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack outlined button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/","title":"jetpack overlay loading wheel","text":"<p>//ui/dev.atick.core.ui.components/JetpackOverlayLoadingWheel</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/#jetpackoverlayloadingwheel","title":"JetpackOverlayLoadingWheel","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOverlayLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/","title":"jetpack password filed","text":"<p>//ui/dev.atick.core.ui.components/JetpackPasswordFiled</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/#jetpackpasswordfiled","title":"JetpackPasswordFiled","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackPasswordFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, errorMessage: String? = null)</p> <p>A Jetpack Compose password field with customizable appearance and optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the password field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the password field. leadingIcon A composable function that represents the leading icon of the password field. modifier The modifier for this password field. errorMessage The error message to display below the password field, if any."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/","title":"jetpack text button","text":"<p>//ui/dev.atick.core.ui.components/JetpackTextButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#jetpacktextbutton","title":"JetpackTextButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack text button with generic content slot. Wraps Material 3 TextButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack text button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-filed/","title":"jetpack text filed","text":"<p>//ui/dev.atick.core.ui.components/JetpackTextFiled</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-filed/#jetpacktextfiled","title":"JetpackTextFiled","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null)</p> <p>A Jetpack Compose text field with customizable appearance and optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-filed/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the text field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the text field. leadingIcon A composable function that represents the leading icon of the text field. modifier The modifier for this text field. keyboardOptions The keyboard options for the text field. trailingIcon A composable function that represents the trailing icon of the text field. errorMessage The error message to display below the text field, if any."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar-with-avatar/","title":"jetpack top app bar with avatar","text":"<p>//ui/dev.atick.core.ui.components/JetpackTopAppBarWithAvatar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar-with-avatar/#jetpacktopappbarwithavatar","title":"JetpackTopAppBarWithAvatar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTopAppBarWithAvatar(@StringRestitleRes: Int, avatarUri: String?, avatarContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onAvatarClick: () -&gt; Unit = {})</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/","title":"jetpack top app bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackTopAppBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/#jetpacktopappbar","title":"JetpackTopAppBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTopAppBar(@StringRestitleRes: Int, navigationIcon: ImageVector, navigationIconContentDescription: String?, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onNavigationClick: () -&gt; Unit = {}, onActionClick: () -&gt; Unit = {})</p> <p>@Composable</p> <p>fun JetpackTopAppBar(@StringRestitleRes: Int, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onActionClick: () -&gt; Unit = {})</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/#jetpackbuttondefaults","title":"JetpackButtonDefaults","text":"<p>[androidJvm]\\ object JetpackButtonDefaults</p> <p>Jetpack button default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/#properties","title":"Properties","text":"Name Summary DisabledOutlinedButtonBorderAlpha [androidJvm]const val DisabledOutlinedButtonBorderAlpha: Float = 0.12f OutlinedButtonBorderWidth [androidJvm]val OutlinedButtonBorderWidth: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-disabled-outlined-button-border-alpha/","title":"disabled outlined button border alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults/DisabledOutlinedButtonBorderAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-disabled-outlined-button-border-alpha/#disabledoutlinedbuttonborderalpha","title":"DisabledOutlinedButtonBorderAlpha","text":"<p>[androidJvm]\\ const val DisabledOutlinedButtonBorderAlpha: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-outlined-button-border-width/","title":"outlined button border width","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults/OutlinedButtonBorderWidth</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-outlined-button-border-width/#outlinedbuttonborderwidth","title":"OutlinedButtonBorderWidth","text":"<p>[androidJvm]\\ val OutlinedButtonBorderWidth: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/#jetpackchipdefaults","title":"JetpackChipDefaults","text":"<p>[androidJvm]\\ object JetpackChipDefaults</p> <p>Jetpack chip default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/#properties","title":"Properties","text":"Name Summary ChipBorderWidth [androidJvm]val ChipBorderWidth: Dp DisabledChipContainerAlpha [androidJvm]const val DisabledChipContainerAlpha: Float = 0.12f DisabledChipContentAlpha [androidJvm]const val DisabledChipContentAlpha: Float = 0.38f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-chip-border-width/","title":"chip border width","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/ChipBorderWidth</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-chip-border-width/#chipborderwidth","title":"ChipBorderWidth","text":"<p>[androidJvm]\\ val ChipBorderWidth: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-container-alpha/","title":"disabled chip container alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/DisabledChipContainerAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-container-alpha/#disabledchipcontaineralpha","title":"DisabledChipContainerAlpha","text":"<p>[androidJvm]\\ const val DisabledChipContainerAlpha: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-content-alpha/","title":"disabled chip content alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/DisabledChipContentAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-disabled-chip-content-alpha/#disabledchipcontentalpha","title":"DisabledChipContentAlpha","text":"<p>[androidJvm]\\ const val DisabledChipContentAlpha: Float = 0.38f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconButtonDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/#jetpackiconbuttondefaults","title":"JetpackIconButtonDefaults","text":"<p>[androidJvm]\\ object JetpackIconButtonDefaults</p> <p>Jetpack icon button default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/#properties","title":"Properties","text":"Name Summary DisabledIconButtonContainerAlpha [androidJvm]const val DisabledIconButtonContainerAlpha: Float = 0.12f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/-disabled-icon-button-container-alpha/","title":"disabled icon button container alpha","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconButtonDefaults/DisabledIconButtonContainerAlpha</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/-disabled-icon-button-container-alpha/#disablediconbuttoncontaineralpha","title":"DisabledIconButtonContainerAlpha","text":"<p>[androidJvm]\\ const val DisabledIconButtonContainerAlpha: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/#jetpacknavigationdefaults","title":"JetpackNavigationDefaults","text":"<p>[androidJvm]\\ object JetpackNavigationDefaults</p> <p>Jetpack navigation default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/#functions","title":"Functions","text":"Name Summary navigationContentColor [androidJvm]@Composablefun navigationContentColor(): Color navigationIndicatorColor [androidJvm]@Composablefun navigationIndicatorColor(): Color navigationSelectedItemColor [androidJvm]@Composablefun navigationSelectedItemColor(): Color"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-content-color/","title":"Navigation content color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationContentColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-content-color/#navigationcontentcolor","title":"navigationContentColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationContentColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-indicator-color/","title":"Navigation indicator color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationIndicatorColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-indicator-color/#navigationindicatorcolor","title":"navigationIndicatorColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationIndicatorColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-selected-item-color/","title":"Navigation selected item color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationSelectedItemColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-selected-item-color/#navigationselecteditemcolor","title":"navigationSelectedItemColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationSelectedItemColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/","title":"Index","text":"<p>//ui/dev.atick.core.ui.extensions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#properties","title":"Properties","text":"Name Summary isSystemInDarkTheme [androidJvm]val Configuration.isSystemInDarkTheme: BooleanConvenience wrapper for dark mode checking"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#functions","title":"Functions","text":"Name Summary checkForPermissions [androidJvm]inline fun ComponentActivity.checkForPermissions(permissions: List&lt;String&gt;, crossinline onSuccess: () -&gt; Unit)Check for permissions. collectWithLifecycle [androidJvm]inline fun &lt;T&gt; LifecycleOwner.collectWithLifecycle(flow: Flow&lt;T&gt;, crossinline action: (T) -&gt; Unit)Observe a Flow and execute an action when the value is changed. isSystemInDarkTheme [androidJvm]fun ComponentActivity.isSystemInDarkTheme(): Flow&lt;Boolean&gt;Registers listener for configuration changes to retrieve whether system is in dark theme or not. Immediately upon subscribing, it sends the current value and then registers listener for changes. observe [androidJvm]inline fun &lt;T&gt; LifecycleOwner.observe(liveData: LiveData&lt;T&gt;, crossinline action: (T) -&gt; Unit)Observe a LiveData and execute an action when the value is changed. observeEvent [androidJvm]inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: LiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: MutableLiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)Observe a LiveData and execute an action when the value is changed. openPermissionSettings [androidJvm]fun ComponentActivity.openPermissionSettings()Open app settings. permissionLauncher [androidJvm]inline fun ComponentActivity.permissionLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Array&lt;String&gt;&gt;Launch an activity for permission. resultLauncher [androidJvm]inline fun ComponentActivity.resultLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Intent&gt;Launch an activity for result."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/","title":"Check for permissions","text":"<p>//ui/dev.atick.core.ui.extensions/checkForPermissions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/#checkforpermissions","title":"checkForPermissions","text":"<p>[androidJvm]\\ inline fun ComponentActivity.checkForPermissions(permissions: List&lt;String&gt;, crossinline onSuccess: () -&gt; Unit)</p> <p>Check for permissions.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/#parameters","title":"Parameters","text":"<p>androidJvm</p> permissions List of permissions to be checked. onSuccess Callback when the result is successful."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/","title":"Collect with lifecycle","text":"<p>//ui/dev.atick.core.ui.extensions/collectWithLifecycle</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/#collectwithlifecycle","title":"collectWithLifecycle","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.collectWithLifecycle(flow: Flow&lt;T&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a Flow and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/is-system-in-dark-theme/","title":"Is system in dark theme","text":"<p>//ui/dev.atick.core.ui.extensions/isSystemInDarkTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/is-system-in-dark-theme/#issystemindarktheme","title":"isSystemInDarkTheme","text":"<p>[androidJvm]\\ fun ComponentActivity.isSystemInDarkTheme(): Flow&lt;Boolean&gt;</p> <p>Registers listener for configuration changes to retrieve whether system is in dark theme or not. Immediately upon subscribing, it sends the current value and then registers listener for changes.</p> <p>[androidJvm]\\ val Configuration.isSystemInDarkTheme: Boolean</p> <p>Convenience wrapper for dark mode checking</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/","title":"Observe event","text":"<p>//ui/dev.atick.core.ui.extensions/observeEvent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/#observeevent","title":"observeEvent","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: LiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)</p> <p>inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: MutableLiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a LiveData and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/","title":"Observe","text":"<p>//ui/dev.atick.core.ui.extensions/observe</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/#observe","title":"observe","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.observe(liveData: LiveData&lt;T&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a LiveData and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/open-permission-settings/","title":"Open permission settings","text":"<p>//ui/dev.atick.core.ui.extensions/openPermissionSettings</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/open-permission-settings/#openpermissionsettings","title":"openPermissionSettings","text":"<p>[androidJvm]\\ fun ComponentActivity.openPermissionSettings()</p> <p>Open app settings.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/","title":"Permission launcher","text":"<p>//ui/dev.atick.core.ui.extensions/permissionLauncher</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/#permissionlauncher","title":"permissionLauncher","text":"<p>[androidJvm]\\ inline fun ComponentActivity.permissionLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Array&lt;String&gt;&gt;</p> <p>Launch an activity for permission.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSuccess Callback when the result is successful. onFailure Callback when the result is failed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/","title":"Result launcher","text":"<p>//ui/dev.atick.core.ui.extensions/resultLauncher</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/#resultlauncher","title":"resultLauncher","text":"<p>[androidJvm]\\ inline fun ComponentActivity.resultLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Intent&gt;</p> <p>Launch an activity for result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSuccess Callback when the result is successful. onFailure Callback when the result is failed."},{"location":"core/ui/ui/dev.atick.core.ui.theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.theme/#types","title":"Types","text":"Name Summary BackgroundTheme [androidJvm]@Immutabledata class BackgroundTheme(val color: Color = Color.Unspecified, val tonalElevation: Dp = Dp.Unspecified)A class to model background color and tonal elevation values for Now in Android. GradientColors [androidJvm]@Immutabledata class GradientColors(val top: Color = Color.Unspecified, val bottom: Color = Color.Unspecified, val container: Color = Color.Unspecified)A class to model gradient color values. TintTheme [androidJvm]@Immutabledata class TintTheme(val iconTint: Color? = null)A class to model background color and tonal elevation values."},{"location":"core/ui/ui/dev.atick.core.ui.theme/#properties","title":"Properties","text":"Name Summary DarkDefaultColorScheme [androidJvm]@VisibleForTestingval DarkDefaultColorScheme: ColorSchemeDark default theme color scheme LightDefaultColorScheme [androidJvm]@VisibleForTestingval LightDefaultColorScheme: ColorSchemeLight default theme color scheme LocalBackgroundTheme [androidJvm]val LocalBackgroundTheme: ProvidableCompositionLocal&lt;BackgroundTheme&gt;A composition local for BackgroundTheme. LocalGradientColors [androidJvm]val LocalGradientColors: ProvidableCompositionLocal&lt;GradientColors&gt;A composition local for GradientColors. LocalTintTheme [androidJvm]val LocalTintTheme: ProvidableCompositionLocal&lt;TintTheme&gt;A composition local for TintTheme."},{"location":"core/ui/ui/dev.atick.core.ui.theme/#functions","title":"Functions","text":"Name Summary JetpackTheme [androidJvm]@Composablefun JetpackTheme(darkTheme: Boolean = isSystemInDarkTheme(), disableDynamicTheming: Boolean = false, content: @Composable() -&gt; Unit)Now in Android theme. supportsDynamicTheming [androidJvm]@ChecksSdkIntAtLeast(api = 31)fun supportsDynamicTheming(): Boolean"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-default-color-scheme/","title":"dark default color scheme","text":"<p>//ui/dev.atick.core.ui.theme/DarkDefaultColorScheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-default-color-scheme/#darkdefaultcolorscheme","title":"DarkDefaultColorScheme","text":"<p>[androidJvm]\\</p> <p>@VisibleForTesting</p> <p>val DarkDefaultColorScheme: ColorScheme</p> <p>Dark default theme color scheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/","title":"jetpack theme","text":"<p>//ui/dev.atick.core.ui.theme/JetpackTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/#jetpacktheme","title":"JetpackTheme","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTheme(darkTheme: Boolean = isSystemInDarkTheme(), disableDynamicTheming: Boolean = false, content: @Composable() -&gt; Unit)</p> <p>Now in Android theme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkTheme Whether the theme should use a dark color scheme (follows system by default). disableDynamicTheming If <code>true</code>, disables the use of dynamic theming, even when it is     supported. This parameter has no effect if androidTheme is <code>true</code>."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-default-color-scheme/","title":"light default color scheme","text":"<p>//ui/dev.atick.core.ui.theme/LightDefaultColorScheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-default-color-scheme/#lightdefaultcolorscheme","title":"LightDefaultColorScheme","text":"<p>[androidJvm]\\</p> <p>@VisibleForTesting</p> <p>val LightDefaultColorScheme: ColorScheme</p> <p>Light default theme color scheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-background-theme/","title":"local background theme","text":"<p>//ui/dev.atick.core.ui.theme/LocalBackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-background-theme/#localbackgroundtheme","title":"LocalBackgroundTheme","text":"<p>[androidJvm]\\ val LocalBackgroundTheme: ProvidableCompositionLocal&lt;BackgroundTheme&gt;</p> <p>A composition local for BackgroundTheme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-gradient-colors/","title":"local gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/LocalGradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-gradient-colors/#localgradientcolors","title":"LocalGradientColors","text":"<p>[androidJvm]\\ val LocalGradientColors: ProvidableCompositionLocal&lt;GradientColors&gt;</p> <p>A composition local for GradientColors.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-tint-theme/","title":"local tint theme","text":"<p>//ui/dev.atick.core.ui.theme/LocalTintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-tint-theme/#localtinttheme","title":"LocalTintTheme","text":"<p>[androidJvm]\\ val LocalTintTheme: ProvidableCompositionLocal&lt;TintTheme&gt;</p> <p>A composition local for TintTheme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/supports-dynamic-theming/","title":"Supports dynamic theming","text":"<p>//ui/dev.atick.core.ui.theme/supportsDynamicTheming</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/supports-dynamic-theming/#supportsdynamictheming","title":"supportsDynamicTheming","text":"<p>[androidJvm]\\</p> <p>@ChecksSdkIntAtLeast(api = 31)</p> <p>fun supportsDynamicTheming(): Boolean</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#backgroundtheme","title":"BackgroundTheme","text":"<p>[androidJvm]\\ @Immutable</p> <p>data class BackgroundTheme(val color: Color = Color.Unspecified, val tonalElevation: Dp = Dp.Unspecified)</p> <p>A class to model background color and tonal elevation values for Now in Android.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#constructors","title":"Constructors","text":"BackgroundTheme [androidJvm]constructor(color: Color = Color.Unspecified, tonalElevation: Dp = Dp.Unspecified)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#properties","title":"Properties","text":"Name Summary color [androidJvm]val color: Color tonalElevation [androidJvm]val tonalElevation: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/","title":"background theme","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/BackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/#backgroundtheme","title":"BackgroundTheme","text":"<p>[androidJvm]\\ constructor(color: Color = Color.Unspecified, tonalElevation: Dp = Dp.Unspecified)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/","title":"Color","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/#color","title":"color","text":"<p>[androidJvm]\\ val color: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/","title":"Tonal elevation","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/tonalElevation</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/#tonalelevation","title":"tonalElevation","text":"<p>[androidJvm]\\ val tonalElevation: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#gradientcolors","title":"GradientColors","text":"<p>@Immutable</p> <p>data class GradientColors(val top: Color = Color.Unspecified, val bottom: Color = Color.Unspecified, val container: Color = Color.Unspecified)</p> <p>A class to model gradient color values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered. bottom The bottom gradient color to be rendered. container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#constructors","title":"Constructors","text":"GradientColors [androidJvm]constructor(top: Color = Color.Unspecified, bottom: Color = Color.Unspecified, container: Color = Color.Unspecified)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#properties","title":"Properties","text":"Name Summary bottom [androidJvm]val bottom: Color container [androidJvm]val container: Color top [androidJvm]val top: Color"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/","title":"gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/GradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/#gradientcolors","title":"GradientColors","text":"<p>[androidJvm]\\ constructor(top: Color = Color.Unspecified, bottom: Color = Color.Unspecified, container: Color = Color.Unspecified)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered. bottom The bottom gradient color to be rendered. container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/","title":"Bottom","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/bottom</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/#bottom","title":"bottom","text":"<p>[androidJvm]\\ val bottom: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/#parameters","title":"Parameters","text":"<p>androidJvm</p> bottom The bottom gradient color to be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/","title":"Container","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/container</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/#container","title":"container","text":"<p>[androidJvm]\\ val container: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/#parameters","title":"Parameters","text":"<p>androidJvm</p> container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/","title":"Top","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/top</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/#top","title":"top","text":"<p>[androidJvm]\\ val top: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#tinttheme","title":"TintTheme","text":"<p>[androidJvm]\\ @Immutable</p> <p>data class TintTheme(val iconTint: Color? = null)</p> <p>A class to model background color and tonal elevation values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#constructors","title":"Constructors","text":"TintTheme [androidJvm]constructor(iconTint: Color? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#properties","title":"Properties","text":"Name Summary iconTint [androidJvm]val iconTint: Color? = null"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/","title":"tint theme","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme/TintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/#tinttheme","title":"TintTheme","text":"<p>[androidJvm]\\ constructor(iconTint: Color? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/","title":"Icon tint","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme/iconTint</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/#icontint","title":"iconTint","text":"<p>[androidJvm]\\ val iconTint: Color? = null</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.utils/#types","title":"Types","text":"Name Summary CrashReporter [androidJvm]interface CrashReporterInterface for reporting exceptions. DevicePreviews [androidJvm]@Preview(name = \"phone\", device = \"spec:width=360dp,height=640dp,dpi=480\")@Preview(name = \"landscape\", device = \"spec:width=640dp,height=360dp,dpi=480\")@Preview(name = \"foldable\", device = \"spec:width=673dp,height=841dp,dpi=480\")@Preview(name = \"tablet\", device = \"spec:width=1280dp,height=800dp,dpi=480\")annotation class DevicePreviewsMultipreview annotation that represents various device sizes. Add this annotation to a composable to render various devices. FirebaseCrashReporter [androidJvm]class FirebaseCrashReporter : CrashReporterImplementation of CrashReporter that uses Firebase Crashlytics. TakePictureActivityContract [androidJvm]class TakePictureActivityContract : ActivityResultContract&lt;Uri, Pair&lt;Boolean, Uri&gt;&gt; Contract for taking picture. TextFiledData [androidJvm]data class TextFiledData(val value: String, val errorMessage: String? = null)Data class representing the state of a text field. UiState [androidJvm]data class UiState&lt;T : Any&gt;(val data: T, val loading: Boolean = false, val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))Data class representing the state of the UI. UiText [androidJvm]sealed class UiTextA sealed class that represents a string that can be either a string resource or a dynamic string."},{"location":"core/ui/ui/dev.atick.core.ui.utils/#functions","title":"Functions","text":"Name Summary StatefulComposable [androidJvm]@Composablefun &lt;T : Any&gt; StatefulComposable(state: UiState&lt;T&gt;, onShowSnackbar: suspend (String, String?) -&gt; Boolean, crashReporter: CrashReporter = FirebaseCrashReporter(), content: @Composable(T) -&gt; Unit)A composable function that represents a stateful UI component. updateState [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateState(update: T.() -&gt; T)Extension function to update the state of a MutableStateFlow. updateStateWith [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateStateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;T&gt;)Extension function to update the state of a MutableStateFlow with a suspend operation. updateWith [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;Unit&gt;)Extension function to update the state of a MutableStateFlow with a suspend operation that returns Unit."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/","title":"stateful composable","text":"<p>//ui/dev.atick.core.ui.utils/StatefulComposable</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/#statefulcomposable","title":"StatefulComposable","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun &lt;T : Any&gt; StatefulComposable(state: UiState&lt;T&gt;, onShowSnackbar: suspend (String, String?) -&gt; Boolean, crashReporter: CrashReporter = FirebaseCrashReporter(), content: @Composable(T) -&gt; Unit)</p> <p>A composable function that represents a stateful UI component.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. state The current state of the UI. onShowSnackbar A suspend function to show a snackbar with a message and an optional action. crashReporter An optional crash reporter to report exceptions (default is FirebaseCrashReporter). content A composable function that defines the UI content based on the state data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/","title":"Update state with","text":"<p>//ui/dev.atick.core.ui.utils/updateStateWith</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/#updatestatewith","title":"updateStateWith","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateStateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;T&gt;)</p> <p>Extension function to update the state of a MutableStateFlow with a suspend operation.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. scope The CoroutineScope to launch the operation. operation A suspend function that returns a Result of the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/","title":"Update state","text":"<p>//ui/dev.atick.core.ui.utils/updateState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/#updatestate","title":"updateState","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateState(update: T.() -&gt; T)</p> <p>Extension function to update the state of a MutableStateFlow.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. update A function to update the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/","title":"Update with","text":"<p>//ui/dev.atick.core.ui.utils/updateWith</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/#updatewith","title":"updateWith","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateWith(scope: CoroutineScope, crossinline operation: suspend () -&gt; Result&lt;Unit&gt;)</p> <p>Extension function to update the state of a MutableStateFlow with a suspend operation that returns Unit.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. scope The CoroutineScope to launch the operation. operation A suspend function that returns a Result of Unit."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/CrashReporter</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/#crashreporter","title":"CrashReporter","text":"<p>interface CrashReporter</p> <p>Interface for reporting exceptions.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/#inheritors","title":"Inheritors","text":"FirebaseCrashReporter"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/#functions","title":"Functions","text":"Name Summary reportException [androidJvm]abstract fun reportException(throwable: Throwable)Reports an exception."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/report-exception/","title":"Report exception","text":"<p>//ui/dev.atick.core.ui.utils/CrashReporter/reportException</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/report-exception/#reportexception","title":"reportException","text":"<p>[androidJvm]\\ abstract fun reportException(throwable: Throwable)</p> <p>Reports an exception.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-crash-reporter/report-exception/#parameters","title":"Parameters","text":"<p>androidJvm</p> throwable The exception to be reported."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-device-previews/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/DevicePreviews</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-device-previews/#devicepreviews","title":"DevicePreviews","text":"<p>[androidJvm]\\ @Preview(name = \"phone\", device = \"spec:width=360dp,height=640dp,dpi=480\")</p> <p>@Preview(name = \"landscape\", device = \"spec:width=640dp,height=360dp,dpi=480\")</p> <p>@Preview(name = \"foldable\", device = \"spec:width=673dp,height=841dp,dpi=480\")</p> <p>@Preview(name = \"tablet\", device = \"spec:width=1280dp,height=800dp,dpi=480\")</p> <p>annotation class DevicePreviews</p> <p>Multipreview annotation that represents various device sizes. Add this annotation to a composable to render various devices.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/FirebaseCrashReporter</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/#firebasecrashreporter","title":"FirebaseCrashReporter","text":"<p>[androidJvm]\\ class FirebaseCrashReporter : CrashReporter</p> <p>Implementation of CrashReporter that uses Firebase Crashlytics.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/#constructors","title":"Constructors","text":"FirebaseCrashReporter [androidJvm]constructor()"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/#functions","title":"Functions","text":"Name Summary reportException [androidJvm]open override fun reportException(throwable: Throwable)Reports an exception to Firebase Crashlytics."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/-firebase-crash-reporter/","title":"firebase crash reporter","text":"<p>//ui/dev.atick.core.ui.utils/FirebaseCrashReporter/FirebaseCrashReporter</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/-firebase-crash-reporter/#firebasecrashreporter","title":"FirebaseCrashReporter","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/report-exception/","title":"Report exception","text":"<p>//ui/dev.atick.core.ui.utils/FirebaseCrashReporter/reportException</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/report-exception/#reportexception","title":"reportException","text":"<p>[androidJvm]\\ open override fun reportException(throwable: Throwable)</p> <p>Reports an exception to Firebase Crashlytics.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-firebase-crash-reporter/report-exception/#parameters","title":"Parameters","text":"<p>androidJvm</p> throwable The exception to be reported."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#takepictureactivitycontract","title":"TakePictureActivityContract","text":"<p>[androidJvm]\\ class TakePictureActivityContract : ActivityResultContract&lt;Uri, Pair&lt;Boolean, Uri&gt;&gt; </p> <p>Contract for taking picture.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#constructors","title":"Constructors","text":"TakePictureActivityContract [androidJvm]constructor()"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#functions","title":"Functions","text":"Name Summary createIntent [androidJvm]@CallSuperopen override fun createIntent(context: Context, input: Uri): IntentCreate an intent for taking picture. getSynchronousResult [androidJvm]open override fun getSynchronousResult(context: Context, input: Uri): ActivityResultContract.SynchronousResult&lt;Pair&lt;Boolean, Uri&gt;&gt;?Get the synchronous result. parseResult [androidJvm]open override fun parseResult(resultCode: Int, intent: Intent?): Pair&lt;Boolean, Uri&gt;Parse the result."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/-take-picture-activity-contract/","title":"take picture activity contract","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/TakePictureActivityContract</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/-take-picture-activity-contract/#takepictureactivitycontract","title":"TakePictureActivityContract","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/","title":"Create intent","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/createIntent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#createintent","title":"createIntent","text":"<p>[androidJvm]\\</p> <p>@CallSuper</p> <p>open override fun createIntent(context: Context, input: Uri): Intent</p> <p>Create an intent for taking picture.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#return","title":"Return","text":"<p>The intent.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The context. input The input."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/","title":"Get synchronous result","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/getSynchronousResult</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#getsynchronousresult","title":"getSynchronousResult","text":"<p>[androidJvm]\\ open override fun getSynchronousResult(context: Context, input: Uri): ActivityResultContract.SynchronousResult&lt;Pair&lt;Boolean, Uri&gt;&gt;?</p> <p>Get the synchronous result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#return","title":"Return","text":"<p>The synchronous result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The context. input The input."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/","title":"Parse result","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/parseResult</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#parseresult","title":"parseResult","text":"<p>[androidJvm]\\ open override fun parseResult(resultCode: Int, intent: Intent?): Pair&lt;Boolean, Uri&gt;</p> <p>Parse the result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#return","title":"Return","text":"<p>The result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#parameters","title":"Parameters","text":"<p>androidJvm</p> resultCode The result code. intent The intent."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/#textfileddata","title":"TextFiledData","text":"<p>[androidJvm]\\ data class TextFiledData(val value: String, val errorMessage: String? = null)</p> <p>Data class representing the state of a text field.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/#constructors","title":"Constructors","text":"TextFiledData [androidJvm]constructor(value: String, errorMessage: String? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/#properties","title":"Properties","text":"Name Summary errorMessage [androidJvm]val errorMessage: String? = nullAn optional error message associated with the text field. value [androidJvm]val value: StringThe current value of the text field."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/-text-filed-data/","title":"text filed data","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData/TextFiledData</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/-text-filed-data/#textfileddata","title":"TextFiledData","text":"<p>[androidJvm]\\ constructor(value: String, errorMessage: String? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/error-message/","title":"Error message","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData/errorMessage</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/error-message/#errormessage","title":"errorMessage","text":"<p>[androidJvm]\\ val errorMessage: String? = null</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/value/","title":"Value","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData/value</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: String</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#uistate","title":"UiState","text":"<p>data class UiState&lt;T : Any&gt;(val data: T, val loading: Boolean = false, val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))</p> <p>Data class representing the state of the UI.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#constructors","title":"Constructors","text":"UiState [androidJvm]constructor(data: T, loading: Boolean = false, error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: TThe current data of the UI. error [androidJvm]val error: OneTimeEvent&lt;Throwable?&gt;An event representing an error that may have occurred. loading [androidJvm]val loading: Boolean = falseA flag indicating whether the UI is in a loading state."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/","title":"ui state","text":"<p>//ui/dev.atick.core.ui.utils/UiState/UiState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/#uistate","title":"UiState","text":"<p>[androidJvm]\\ constructor(data: T, loading: Boolean = false, error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/data/","title":"Data","text":"<p>//ui/dev.atick.core.ui.utils/UiState/data</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/data/#data","title":"data","text":"<p>[androidJvm]\\ val data: T</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/error/","title":"Error","text":"<p>//ui/dev.atick.core.ui.utils/UiState/error</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/error/#error","title":"error","text":"<p>[androidJvm]\\ val error: OneTimeEvent&lt;Throwable?&gt;</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/loading/","title":"Loading","text":"<p>//ui/dev.atick.core.ui.utils/UiState/loading</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/loading/#loading","title":"loading","text":"<p>[androidJvm]\\ val loading: Boolean = false</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#uitext","title":"UiText","text":"<p>sealed class UiText</p> <p>A sealed class that represents a string that can be either a string resource or a dynamic string.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#inheritors","title":"Inheritors","text":"DynamicString StringResource"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#types","title":"Types","text":"Name Summary DynamicString [androidJvm]data class DynamicString(val value: String) : UiTextA dynamic string that can be used to represent a string that is not known at compile time. StringResource [androidJvm]class StringResource(@StringResval resId: Int, val args: Any) : UiTextA string resource that can be used to represent a string that is known at compile time."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/as-string/","title":"As string","text":"<p>//ui/dev.atick.core.ui.utils/UiText/asString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/as-string/#asstring","title":"asString","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun asString(): String</p> <p>fun asString(context: Context): String</p> <p>Returns the string value of this UiText.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#dynamicstring","title":"DynamicString","text":"<p>data class DynamicString(val value: String) : UiText</p> <p>A dynamic string that can be used to represent a string that is not known at compile time.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#constructors","title":"Constructors","text":"DynamicString [androidJvm]constructor(value: String)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#properties","title":"Properties","text":"Name Summary value [androidJvm]val value: String"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/","title":"dynamic string","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString/DynamicString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/#dynamicstring","title":"DynamicString","text":"<p>[androidJvm]\\ constructor(value: String)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/","title":"Value","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString/value</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: String</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#stringresource","title":"StringResource","text":"<p>class StringResource(@StringResval resId: Int, val args: Any) : UiText</p> <p>A string resource that can be used to represent a string that is known at compile time.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id. args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#constructors","title":"Constructors","text":"StringResource [androidJvm]constructor(@StringResresId: Int, vararg args: Any)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#properties","title":"Properties","text":"Name Summary args [androidJvm]val args: Array&lt;out Any&gt; resId [androidJvm]val resId: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/","title":"string resource","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/StringResource</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/#stringresource","title":"StringResource","text":"<p>[androidJvm]\\ constructor(@StringResresId: Int, vararg args: Any)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id. args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/","title":"Args","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/args</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/#args","title":"args","text":"<p>[androidJvm]\\ val args: Array&lt;out Any&gt;</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/#parameters","title":"Parameters","text":"<p>androidJvm</p> args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/","title":"Res id","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/resId</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/#resid","title":"resId","text":"<p>[androidJvm]\\ val resId: Int</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id."},{"location":"demo/","title":"Index","text":"<p>//demo</p>"},{"location":"demo/#demo","title":"demo","text":""},{"location":"demo/#packages","title":"Packages","text":"Name dev.atick.compose dev.atick.compose.data.home dev.atick.compose.data.profile dev.atick.compose.di.repository dev.atick.compose.navigation dev.atick.compose.navigation.details dev.atick.compose.navigation.home dev.atick.compose.navigation.profile dev.atick.compose.repository.home dev.atick.compose.repository.profile dev.atick.compose.ui dev.atick.compose.ui.details dev.atick.compose.ui.home dev.atick.compose.ui.profile"},{"location":"demo/demo/dev.atick.compose/","title":"Index","text":"<p>//demo/dev.atick.compose</p>"},{"location":"demo/demo/dev.atick.compose/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose/#types","title":"Types","text":"Name Summary App [androidJvm]class App : ApplicationThe main application class that extends Application and is annotated with HiltAndroidApp. MainActivity [androidJvm]class MainActivity : ComponentActivityMain activity for the application. MainActivityViewModel [androidJvm]class MainActivityViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModelAnnotates a ViewModel class that is managed by Hilt's dependency injection system. ThemeSettings [androidJvm]data class ThemeSettings(val darkTheme: Boolean, val disableDynamicTheming: Boolean = true)Class for the system theme settings. This wrapping class allows us to combine all the changes and prevent unnecessary recompositions."},{"location":"demo/demo/dev.atick.compose/-app/","title":"Index","text":"<p>//demo/dev.atick.compose/App</p>"},{"location":"demo/demo/dev.atick.compose/-app/#app","title":"App","text":"<p>[androidJvm]\\ class App : Application</p> <p>The main application class that extends Application and is annotated with HiltAndroidApp.</p>"},{"location":"demo/demo/dev.atick.compose/-app/#constructors","title":"Constructors","text":"App [androidJvm]constructor()"},{"location":"demo/demo/dev.atick.compose/-app/#functions","title":"Functions","text":"Name Summary bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getResources [androidJvm]open override fun getResources(): Resources getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]fun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): Topen override fun getSystemService(p0: String): Any getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(p0: Configuration) onCreate [androidJvm]open override fun onCreate()Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode. onLowMemory [androidJvm]open override fun onLowMemory() onTerminate [androidJvm]open fun onTerminate() onTrimMemory [androidJvm]open override fun onTrimMemory(p0: Int) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerOnProvideAssistDataListener [androidJvm]open fun registerOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setTheme [androidJvm]open override fun setTheme(p0: Int) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopService [androidJvm]open override fun stopService(p0: Intent): Boolean unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterOnProvideAssistDataListener [androidJvm]open fun unregisterOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"demo/demo/dev.atick.compose/-app/-app/","title":"app","text":"<p>//demo/dev.atick.compose/App/App</p>"},{"location":"demo/demo/dev.atick.compose/-app/-app/#app","title":"App","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"demo/demo/dev.atick.compose/-app/on-create/","title":"On create","text":"<p>//demo/dev.atick.compose/App/onCreate</p>"},{"location":"demo/demo/dev.atick.compose/-app/on-create/#oncreate","title":"onCreate","text":"<p>[androidJvm]\\ open override fun onCreate()</p> <p>Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode.</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity/","title":"Index","text":"<p>//demo/dev.atick.compose/MainActivity</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ class MainActivity : ComponentActivity</p> <p>Main activity for the application.</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity/#constructors","title":"Constructors","text":"MainActivity [androidJvm]constructor()"},{"location":"demo/demo/dev.atick.compose/-main-activity/#properties","title":"Properties","text":"Name Summary activityResultRegistry [androidJvm]override val activityResultRegistry: ActivityResultRegistry defaultViewModelCreationExtras [androidJvm]open override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]open override val defaultViewModelProviderFactory: ViewModelProvider.Factory fullyDrawnReporter [androidJvm]open override val fullyDrawnReporter: FullyDrawnReporter lastCustomNonConfigurationInstance [androidJvm]open val lastCustomNonConfigurationInstance: Any? lifecycle [androidJvm]open override val lifecycle: Lifecycle networkUtils [androidJvm]@Injectlateinit var networkUtils: NetworkUtils onBackPressedDispatcher [androidJvm]override val onBackPressedDispatcher: OnBackPressedDispatcher savedStateRegistry [androidJvm]override val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]open override val viewModelStore: ViewModelStore"},{"location":"demo/demo/dev.atick.compose/-main-activity/#functions","title":"Functions","text":"Name Summary addContentView [androidJvm]open override fun addContentView(view: View?, params: ViewGroup.LayoutParams?) addMenuProvider [androidJvm]open override fun addMenuProvider(provider: MenuProvider)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner, state: Lifecycle.State) addOnConfigurationChangedListener [androidJvm]override fun addOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) addOnContextAvailableListener [androidJvm]override fun addOnContextAvailableListener(listener: OnContextAvailableListener) addOnMultiWindowModeChangedListener [androidJvm]override fun addOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) addOnNewIntentListener [androidJvm]override fun addOnNewIntentListener(listener: Consumer&lt;Intent&gt;) addOnPictureInPictureModeChangedListener [androidJvm]override fun addOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) addOnTrimMemoryListener [androidJvm]override fun addOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) addOnUserLeaveHintListener [androidJvm]override fun addOnUserLeaveHintListener(listener: Runnable) applyOverrideConfiguration [androidJvm]open fun applyOverrideConfiguration(p0: Configuration) bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearOverrideActivityTransition [androidJvm]open fun clearOverrideActivityTransition(p0: Int) clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() closeContextMenu [androidJvm]open fun closeContextMenu() closeOptionsMenu [androidJvm]open fun closeOptionsMenu() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createPendingResult [androidJvm]open fun createPendingResult(p0: Int, p1: Intent, p2: Int): PendingIntent createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean dismissDialog [androidJvm]fun ~~dismissDialog~~(p0: Int) dismissKeyboardShortcutsHelper [androidJvm]fun dismissKeyboardShortcutsHelper() dispatchGenericMotionEvent [androidJvm]open override fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchKeyEvent [androidJvm]open override fun dispatchKeyEvent(event: KeyEvent): Boolean dispatchKeyShortcutEvent [androidJvm]open override fun dispatchKeyShortcutEvent(event: KeyEvent): Boolean dispatchPopulateAccessibilityEvent [androidJvm]open override fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchTouchEvent [androidJvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [androidJvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dump [androidJvm]open fun dump(p0: String, p1: FileDescriptor?, p2: PrintWriter, p3: Array&lt;String&gt;?) enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) enterPictureInPictureMode [androidJvm]open fun ~~enterPictureInPictureMode~~()open fun enterPictureInPictureMode(p0: PictureInPictureParams): Boolean fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; findViewById [androidJvm]open fun &lt;T : View&gt; findViewById(p0: Int): T finish [androidJvm]open fun finish() finishActivity [androidJvm]open fun finishActivity(p0: Int) finishActivityFromChild [androidJvm]open fun ~~finishActivityFromChild~~(p0: Activity, p1: Int) finishAffinity [androidJvm]open fun finishAffinity() finishAfterTransition [androidJvm]open fun finishAfterTransition() finishAndRemoveTask [androidJvm]open fun finishAndRemoveTask() finishFromChild [androidJvm]open fun ~~finishFromChild~~(p0: Activity) getActionBar [androidJvm]open fun getActionBar(): ActionBar? getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getCaller [androidJvm]open fun getCaller(): ComponentCaller? getCallingActivity [androidJvm]open fun getCallingActivity(): ComponentName? getCallingPackage [androidJvm]open fun getCallingPackage(): String? getChangingConfigurations [androidJvm]open fun getChangingConfigurations(): Int getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getComponentName [androidJvm]open fun getComponentName(): ComponentName getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getContentScene [androidJvm]open fun getContentScene(): Scene getContentTransitionManager [androidJvm]open fun getContentTransitionManager(): TransitionManager getCurrentCaller [androidJvm]open fun getCurrentCaller(): ComponentCaller getCurrentFocus [androidJvm]open fun getCurrentFocus(): View? getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getExtraData [androidJvm]open fun &lt;T : ComponentActivity.ExtraData&gt; ~~getExtraData~~(extraDataClass: Class&lt;T&gt;): T? getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getFragmentManager [androidJvm]open fun ~~getFragmentManager~~(): FragmentManager getInitialCaller [androidJvm]open fun getInitialCaller(): ComponentCaller getIntent [androidJvm]open fun getIntent(): Intent getLastNonConfigurationInstance [androidJvm]open fun getLastNonConfigurationInstance(): Any? getLaunchedFromPackage [androidJvm]open fun getLaunchedFromPackage(): String? getLaunchedFromUid [androidJvm]open fun getLaunchedFromUid(): Int getLayoutInflater [androidJvm]open fun getLayoutInflater(): LayoutInflater getLoaderManager [androidJvm]open fun ~~getLoaderManager~~(): LoaderManager getLocalClassName [androidJvm]open fun getLocalClassName(): String getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getMaxNumPictureInPictureActions [androidJvm]open fun getMaxNumPictureInPictureActions(): Int getMediaController [androidJvm]fun getMediaController(): MediaController getMenuInflater [androidJvm]open fun getMenuInflater(): MenuInflater getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOnBackInvokedDispatcher [androidJvm]open fun getOnBackInvokedDispatcher(): OnBackInvokedDispatcher getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getParent [androidJvm]fun ~~getParent~~(): Activity getParentActivityIntent [androidJvm]open fun getParentActivityIntent(): Intent? getPreferences [androidJvm]open fun getPreferences(p0: Int): SharedPreferences getReferrer [androidJvm]open fun getReferrer(): Uri? getRequestedOrientation [androidJvm]open fun getRequestedOrientation(): Int getResources [androidJvm]open override fun getResources(): Resources getSearchEvent [androidJvm]fun getSearchEvent(): SearchEvent getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getSplashScreen [androidJvm]fun getSplashScreen(): SplashScreen getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]open override fun getSystemService(p0: String): Anyfun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): T getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getTaskId [androidJvm]open fun getTaskId(): Int getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getTitle [androidJvm]fun getTitle(): CharSequence getTitleColor [androidJvm]fun getTitleColor(): Int getVoiceInteractor [androidJvm]open fun getVoiceInteractor(): VoiceInteractor getVolumeControlStream [androidJvm]fun getVolumeControlStream(): Int getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int getWindow [androidJvm]open fun getWindow(): Window getWindowManager [androidJvm]open fun getWindowManager(): WindowManager grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) hasWindowFocus [androidJvm]open fun hasWindowFocus(): Boolean initializeViewTreeOwners [androidJvm]open fun initializeViewTreeOwners() invalidateMenu [androidJvm]open override fun invalidateMenu() invalidateOptionsMenu [androidJvm]open fun invalidateOptionsMenu() isActivityTransitionRunning [androidJvm]open fun isActivityTransitionRunning(): Boolean isChangingConfigurations [androidJvm]open fun isChangingConfigurations(): Boolean isChild [androidJvm]fun ~~isChild~~(): Boolean isDestroyed [androidJvm]open fun isDestroyed(): Boolean isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isFinishing [androidJvm]open fun isFinishing(): Boolean isImmersive [androidJvm]open fun isImmersive(): Boolean isInMultiWindowMode [androidJvm]open fun isInMultiWindowMode(): Boolean isInPictureInPictureMode [androidJvm]open fun isInPictureInPictureMode(): Boolean isLaunchedFromBubble [androidJvm]open fun isLaunchedFromBubble(): Boolean isLocalVoiceInteractionSupported [androidJvm]open fun isLocalVoiceInteractionSupported(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isTaskRoot [androidJvm]open fun isTaskRoot(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean isVoiceInteraction [androidJvm]open fun isVoiceInteraction(): Boolean isVoiceInteractionRoot [androidJvm]open fun isVoiceInteractionRoot(): Boolean managedQuery [androidJvm]fun ~~managedQuery~~(p0: Uri, p1: Array&lt;String&gt;, p2: String, p3: Array&lt;String&gt;, p4: String): Cursor moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean moveTaskToBack [androidJvm]open fun moveTaskToBack(p0: Boolean): Boolean navigateUpTo [androidJvm]open fun navigateUpTo(p0: Intent): Boolean navigateUpToFromChild [androidJvm]open fun ~~navigateUpToFromChild~~(p0: Activity, p1: Intent): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onActionModeFinished [androidJvm]open override fun onActionModeFinished(p0: ActionMode) onActionModeStarted [androidJvm]open override fun onActionModeStarted(p0: ActionMode) onActivityReenter [androidJvm]open fun onActivityReenter(p0: Int, p1: Intent) onActivityResult [androidJvm]open fun onActivityResult(p0: Int, p1: Int, p2: Intent?, p3: ComponentCaller) onAttachedToWindow [androidJvm]open override fun onAttachedToWindow() onAttachFragment [androidJvm]open fun ~~onAttachFragment~~(p0: Fragment) onBackPressed [androidJvm]open override fun ~~onBackPressed~~() onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(newConfig: Configuration) onContentChanged [androidJvm]open override fun onContentChanged() onContextItemSelected [androidJvm]open fun onContextItemSelected(p0: MenuItem): Boolean onContextMenuClosed [androidJvm]open fun onContextMenuClosed(p0: Menu) onCreate [androidJvm]open fun onCreate(p0: Bundle?, p1: PersistableBundle?) onCreateContextMenu [androidJvm]open override fun onCreateContextMenu(p0: ContextMenu, p1: View, p2: ContextMenu.ContextMenuInfo) onCreateDescription [androidJvm]open fun onCreateDescription(): CharSequence? onCreateNavigateUpTaskStack [androidJvm]open fun onCreateNavigateUpTaskStack(p0: TaskStackBuilder) onCreateOptionsMenu [androidJvm]open fun onCreateOptionsMenu(p0: Menu): Boolean onCreatePanelMenu [androidJvm]open override fun onCreatePanelMenu(featureId: Int, menu: Menu): Boolean onCreatePanelView [androidJvm]open override fun onCreatePanelView(p0: Int): View? onCreateThumbnail [androidJvm]open fun ~~onCreateThumbnail~~(p0: Bitmap, p1: Canvas): Boolean onCreateView [androidJvm]open override fun onCreateView(p0: String, p1: Context, p2: AttributeSet): View?open override fun onCreateView(p0: View?, p1: String, p2: Context, p3: AttributeSet): View? onDetachedFromWindow [androidJvm]open override fun onDetachedFromWindow() onEnterAnimationComplete [androidJvm]open fun onEnterAnimationComplete() onGenericMotionEvent [androidJvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onGetDirectActions [androidJvm]open fun onGetDirectActions(p0: CancellationSignal, p1: Consumer&lt;MutableList&lt;DirectAction&gt;&gt;) onKeyDown [androidJvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [androidJvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [androidJvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyShortcut [androidJvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [androidJvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onLocalVoiceInteractionStarted [androidJvm]open fun onLocalVoiceInteractionStarted() onLocalVoiceInteractionStopped [androidJvm]open fun onLocalVoiceInteractionStopped() onLowMemory [androidJvm]open override fun onLowMemory() onMenuItemSelected [androidJvm]open override fun onMenuItemSelected(featureId: Int, item: MenuItem): Boolean onMenuOpened [androidJvm]open override fun onMenuOpened(p0: Int, p1: Menu): Boolean onMultiWindowModeChanged [androidJvm]open override fun ~~onMultiWindowModeChanged~~(isInMultiWindowMode: Boolean)open override fun onMultiWindowModeChanged(isInMultiWindowMode: Boolean, newConfig: Configuration) onNavigateUp [androidJvm]open fun onNavigateUp(): Boolean onNavigateUpFromChild [androidJvm]open fun ~~onNavigateUpFromChild~~(p0: Activity): Boolean onNewIntent [androidJvm]open fun onNewIntent(p0: Intent, p1: ComponentCaller) onOptionsItemSelected [androidJvm]open fun onOptionsItemSelected(p0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]open fun onOptionsMenuClosed(p0: Menu) onPanelClosed [androidJvm]open override fun onPanelClosed(featureId: Int, menu: Menu) onPerformDirectAction [androidJvm]open fun onPerformDirectAction(p0: String, p1: Bundle, p2: CancellationSignal, p3: Consumer&lt;Bundle&gt;) onPictureInPictureModeChanged [androidJvm]open override fun ~~onPictureInPictureModeChanged~~(isInPictureInPictureMode: Boolean)open override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration) onPictureInPictureRequested [androidJvm]open fun onPictureInPictureRequested(): Boolean onPictureInPictureUiStateChanged [androidJvm]open fun onPictureInPictureUiStateChanged(p0: PictureInPictureUiState) onPointerCaptureChanged [androidJvm]open fun onPointerCaptureChanged(p0: Boolean) onPostCreate [androidJvm]open fun onPostCreate(p0: Bundle?, p1: PersistableBundle?) onPrepareNavigateUpTaskStack [androidJvm]open fun onPrepareNavigateUpTaskStack(p0: TaskStackBuilder) onPrepareOptionsMenu [androidJvm]open fun onPrepareOptionsMenu(p0: Menu): Boolean onPreparePanel [androidJvm]open override fun onPreparePanel(featureId: Int, view: View?, menu: Menu): Boolean onProvideAssistContent [androidJvm]open fun onProvideAssistContent(p0: AssistContent) onProvideAssistData [androidJvm]open fun onProvideAssistData(p0: Bundle) onProvideKeyboardShortcuts [androidJvm]open override fun onProvideKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Menu?, p2: Int) onProvideReferrer [androidJvm]open fun onProvideReferrer(): Uri onRequestPermissionsResult [androidJvm]open fun onRequestPermissionsResult(p0: Int, p1: Array&lt;String&gt;, p2: IntArray, p3: Int)open override fun ~~onRequestPermissionsResult~~(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) onRestoreInstanceState [androidJvm]open fun onRestoreInstanceState(p0: Bundle?, p1: PersistableBundle?) onRetainCustomNonConfigurationInstance [androidJvm]open fun ~~onRetainCustomNonConfigurationInstance~~(): Any? onRetainNonConfigurationInstance [androidJvm]override fun onRetainNonConfigurationInstance(): Any? onSaveInstanceState [androidJvm]open fun onSaveInstanceState(p0: Bundle, p1: PersistableBundle) onSearchRequested [androidJvm]open override fun onSearchRequested(): Booleanopen override fun onSearchRequested(p0: SearchEvent?): Boolean onStateNotSaved [androidJvm]open fun ~~onStateNotSaved~~() onTopResumedActivityChanged [androidJvm]open fun onTopResumedActivityChanged(p0: Boolean) onTouchEvent [androidJvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [androidJvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onTrimMemory [androidJvm]open override fun onTrimMemory(level: Int) onUserInteraction [androidJvm]open fun onUserInteraction() onVisibleBehindCanceled [androidJvm]open fun ~~onVisibleBehindCanceled~~() onWindowAttributesChanged [androidJvm]open override fun onWindowAttributesChanged(p0: WindowManager.LayoutParams) onWindowFocusChanged [androidJvm]open override fun onWindowFocusChanged(p0: Boolean) onWindowStartingActionMode [androidJvm]open override fun onWindowStartingActionMode(p0: ActionMode.Callback): ActionMode?open override fun onWindowStartingActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? openContextMenu [androidJvm]open fun openContextMenu(p0: View) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOptionsMenu [androidJvm]open fun openOptionsMenu() openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase overrideActivityTransition [androidJvm]open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int)open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int, p3: Int) overridePendingTransition [androidJvm]open fun ~~overridePendingTransition~~(p0: Int, p1: Int)open fun ~~overridePendingTransition~~(p0: Int, p1: Int, p2: Int) peekAvailableContext [androidJvm]open override fun peekAvailableContext(): Context? peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable postponeEnterTransition [androidJvm]open fun postponeEnterTransition() putExtraData [androidJvm]open fun ~~putExtraData~~(extraData: ComponentActivity.ExtraData) recreate [androidJvm]open fun recreate() registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerForActivityResult [androidJvm]override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, registry: ActivityResultRegistry, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(p0: View) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? registerScreenCaptureCallback [androidJvm]open fun registerScreenCaptureCallback(p0: Executor, p1: Activity.ScreenCaptureCallback) releaseInstance [androidJvm]open fun releaseInstance(): Boolean removeDialog [androidJvm]fun ~~removeDialog~~(p0: Int) removeMenuProvider [androidJvm]open override fun removeMenuProvider(provider: MenuProvider) removeOnConfigurationChangedListener [androidJvm]override fun removeOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) removeOnContextAvailableListener [androidJvm]override fun removeOnContextAvailableListener(listener: OnContextAvailableListener) removeOnMultiWindowModeChangedListener [androidJvm]override fun removeOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) removeOnNewIntentListener [androidJvm]override fun removeOnNewIntentListener(listener: Consumer&lt;Intent&gt;) removeOnPictureInPictureModeChangedListener [androidJvm]override fun removeOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) removeOnTrimMemoryListener [androidJvm]override fun removeOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) removeOnUserLeaveHintListener [androidJvm]override fun removeOnUserLeaveHintListener(listener: Runnable) removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) reportFullyDrawn [androidJvm]open override fun reportFullyDrawn() requestDragAndDropPermissions [androidJvm]open fun requestDragAndDropPermissions(p0: DragEvent): DragAndDropPermissions requestFullscreenMode [androidJvm]open fun requestFullscreenMode(p0: Int, p1: OutcomeReceiver&lt;Void, Throwable&gt;?) requestPermissions [androidJvm]fun requestPermissions(p0: Array&lt;String&gt;, p1: Int)fun requestPermissions(p0: Array&lt;String&gt;, p1: Int, p2: Int) requestShowKeyboardShortcuts [androidJvm]fun requestShowKeyboardShortcuts() requestVisibleBehind [androidJvm]open fun ~~requestVisibleBehind~~(p0: Boolean): Boolean requestWindowFeature [androidJvm]fun requestWindowFeature(p0: Int): Boolean requireViewById [androidJvm]fun &lt;T : View&gt; requireViewById(p0: Int): T &amp; Any revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) runOnUiThread [androidJvm]fun runOnUiThread(p0: Runnable) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setActionBar [androidJvm]open fun setActionBar(p0: Toolbar?) setAllowCrossUidActivitySwitchFromBelow [androidJvm]open fun setAllowCrossUidActivitySwitchFromBelow(p0: Boolean) setContentTransitionManager [androidJvm]open fun setContentTransitionManager(p0: TransitionManager) setContentView [androidJvm]open override fun setContentView(view: View?)open override fun setContentView(layoutResID: Int)open override fun setContentView(view: View?, params: ViewGroup.LayoutParams?) setDefaultKeyMode [androidJvm]fun setDefaultKeyMode(p0: Int) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(p0: SharedElementCallback) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(p0: SharedElementCallback) setFeatureDrawable [androidJvm]fun setFeatureDrawable(p0: Int, p1: Drawable) setFeatureDrawableAlpha [androidJvm]fun setFeatureDrawableAlpha(p0: Int, p1: Int) setFeatureDrawableResource [androidJvm]fun setFeatureDrawableResource(p0: Int, p1: Int) setFeatureDrawableUri [androidJvm]fun setFeatureDrawableUri(p0: Int, p1: Uri) setFinishOnTouchOutside [androidJvm]open fun setFinishOnTouchOutside(p0: Boolean) setImmersive [androidJvm]open fun setImmersive(p0: Boolean) setInheritShowWhenLocked [androidJvm]open fun setInheritShowWhenLocked(p0: Boolean) setIntent [androidJvm]open fun setIntent(p0: Intent)open fun setIntent(p0: Intent?, p1: ComponentCaller?) setLocusContext [androidJvm]open fun setLocusContext(p0: LocusId?, p1: Bundle?) setMediaController [androidJvm]fun setMediaController(p0: MediaController) setPictureInPictureParams [androidJvm]open fun setPictureInPictureParams(p0: PictureInPictureParams) setProgress [androidJvm]fun ~~setProgress~~(p0: Int) setProgressBarIndeterminate [androidJvm]fun ~~setProgressBarIndeterminate~~(p0: Boolean) setProgressBarIndeterminateVisibility [androidJvm]fun ~~setProgressBarIndeterminateVisibility~~(p0: Boolean) setProgressBarVisibility [androidJvm]fun ~~setProgressBarVisibility~~(p0: Boolean) setRecentsScreenshotEnabled [androidJvm]open fun setRecentsScreenshotEnabled(p0: Boolean) setRequestedOrientation [androidJvm]open fun setRequestedOrientation(p0: Int) setResult [androidJvm]fun setResult(p0: Int)fun setResult(p0: Int, p1: Intent) setSecondaryProgress [androidJvm]fun ~~setSecondaryProgress~~(p0: Int) setShouldDockBigOverlays [androidJvm]open fun setShouldDockBigOverlays(p0: Boolean) setShowWhenLocked [androidJvm]open fun setShowWhenLocked(p0: Boolean) setTaskDescription [androidJvm]open fun setTaskDescription(p0: ActivityManager.TaskDescription) setTheme [androidJvm]open override fun setTheme(p0: Int)open fun setTheme(p0: Resources.Theme?) setTitle [androidJvm]open fun setTitle(p0: CharSequence)open fun setTitle(p0: Int) setTitleColor [androidJvm]open fun ~~setTitleColor~~(p0: Int) setTranslucent [androidJvm]open fun setTranslucent(p0: Boolean): Boolean setTurnScreenOn [androidJvm]open fun setTurnScreenOn(p0: Boolean) setVisible [androidJvm]open fun setVisible(p0: Boolean) setVolumeControlStream [androidJvm]fun setVolumeControlStream(p0: Int) setVrModeEnabled [androidJvm]open fun setVrModeEnabled(p0: Boolean, p1: ComponentName) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) shouldDockBigOverlays [androidJvm]open fun shouldDockBigOverlays(): Boolean shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(p0: String): Booleanopen fun shouldShowRequestPermissionRationale(p0: String, p1: Int): Boolean shouldUpRecreateTask [androidJvm]open fun shouldUpRecreateTask(p0: Intent): Boolean showAssist [androidJvm]open fun showAssist(p0: Bundle): Boolean showDialog [androidJvm]fun ~~showDialog~~(p0: Int)fun ~~showDialog~~(p0: Int, p1: Bundle): Boolean showLockTaskEscapeMessage [androidJvm]open fun showLockTaskEscapeMessage() startActionMode [androidJvm]open fun startActionMode(p0: ActionMode.Callback): ActionMode?open fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startActivityForResult [androidJvm]open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int)open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int, options: Bundle?) startActivityFromChild [androidJvm]open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int)open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int, p3: Bundle?) startActivityFromFragment [androidJvm]open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int)open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int, p3: Bundle?) startActivityIfNeeded [androidJvm]open fun startActivityIfNeeded(p0: Intent, p1: Int): Booleanopen fun startActivityIfNeeded(p0: Intent, p1: Int, p2: Bundle?): Boolean startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startIntentSenderForResult [androidJvm]open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int)open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int, options: Bundle?) startIntentSenderFromChild [androidJvm]open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int)open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int, p7: Bundle?) startLocalVoiceInteraction [androidJvm]open fun startLocalVoiceInteraction(p0: Bundle) startLockTask [androidJvm]open fun startLockTask() startManagingCursor [androidJvm]open fun ~~startManagingCursor~~(p0: Cursor) startNextMatchingActivity [androidJvm]open fun startNextMatchingActivity(p0: Intent): Booleanopen fun startNextMatchingActivity(p0: Intent, p1: Bundle?): Boolean startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() startSearch [androidJvm]open fun startSearch(p0: String?, p1: Boolean, p2: Bundle?, p3: Boolean) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopLocalVoiceInteraction [androidJvm]open fun stopLocalVoiceInteraction() stopLockTask [androidJvm]open fun stopLockTask() stopManagingCursor [androidJvm]open fun ~~stopManagingCursor~~(p0: Cursor) stopService [androidJvm]open override fun stopService(p0: Intent): Boolean superDispatchKeyEvent [androidJvm]open override fun superDispatchKeyEvent(event: KeyEvent): Boolean takeKeyEvents [androidJvm]open fun takeKeyEvents(p0: Boolean) triggerSearch [androidJvm]open fun triggerSearch(p0: String, p1: Bundle?) unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(p0: View) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) unregisterScreenCaptureCallback [androidJvm]open fun unregisterScreenCaptureCallback(p0: Activity.ScreenCaptureCallback) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"demo/demo/dev.atick.compose/-main-activity/-main-activity/","title":"main activity","text":"<p>//demo/dev.atick.compose/MainActivity/MainActivity</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity/network-utils/","title":"Network utils","text":"<p>//demo/dev.atick.compose/MainActivity/networkUtils</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity/network-utils/#networkutils","title":"networkUtils","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var networkUtils: NetworkUtils</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/","title":"Index","text":"<p>//demo/dev.atick.compose/MainActivityViewModel</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>class MainActivityViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModel</p> <p>Annotates a ViewModel class that is managed by Hilt's dependency injection system.</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepository The repository providing access to user data."},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/#constructors","title":"Constructors","text":"MainActivityViewModel [androidJvm]@Injectconstructor(settingsRepository: SettingsRepository)Creates a MainActivityViewModel instance."},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/#properties","title":"Properties","text":"Name Summary uiState [androidJvm]val uiState: StateFlow&lt;UiState&lt;UserData&gt;&gt;Represents the state of the UI for user data."},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/","title":"main activity view model","text":"<p>//demo/dev.atick.compose/MainActivityViewModel/MainActivityViewModel</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(settingsRepository: SettingsRepository)</p> <p>Creates a MainActivityViewModel instance.</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepository The repository providing access to user data."},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/ui-state/","title":"Ui state","text":"<p>//demo/dev.atick.compose/MainActivityViewModel/uiState</p>"},{"location":"demo/demo/dev.atick.compose/-main-activity-view-model/ui-state/#uistate","title":"uiState","text":"<p>[androidJvm]\\ val uiState: StateFlow&lt;UiState&lt;UserData&gt;&gt;</p> <p>Represents the state of the UI for user data.</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/","title":"Index","text":"<p>//demo/dev.atick.compose/ThemeSettings</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/#themesettings","title":"ThemeSettings","text":"<p>[androidJvm]\\ data class ThemeSettings(val darkTheme: Boolean, val disableDynamicTheming: Boolean = true)</p> <p>Class for the system theme settings. This wrapping class allows us to combine all the changes and prevent unnecessary recompositions.</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/#constructors","title":"Constructors","text":"ThemeSettings [androidJvm]constructor(darkTheme: Boolean, disableDynamicTheming: Boolean = true)"},{"location":"demo/demo/dev.atick.compose/-theme-settings/#properties","title":"Properties","text":"Name Summary darkTheme [androidJvm]val darkTheme: Boolean disableDynamicTheming [androidJvm]val disableDynamicTheming: Boolean = true"},{"location":"demo/demo/dev.atick.compose/-theme-settings/-theme-settings/","title":"theme settings","text":"<p>//demo/dev.atick.compose/ThemeSettings/ThemeSettings</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/-theme-settings/#themesettings","title":"ThemeSettings","text":"<p>[androidJvm]\\ constructor(darkTheme: Boolean, disableDynamicTheming: Boolean = true)</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/dark-theme/","title":"Dark theme","text":"<p>//demo/dev.atick.compose/ThemeSettings/darkTheme</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/dark-theme/#darktheme","title":"darkTheme","text":"<p>[androidJvm]\\ val darkTheme: Boolean</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/disable-dynamic-theming/","title":"Disable dynamic theming","text":"<p>//demo/dev.atick.compose/ThemeSettings/disableDynamicTheming</p>"},{"location":"demo/demo/dev.atick.compose/-theme-settings/disable-dynamic-theming/#disabledynamictheming","title":"disableDynamicTheming","text":"<p>[androidJvm]\\ val disableDynamicTheming: Boolean = true</p>"},{"location":"demo/demo/dev.atick.compose.data.home/","title":"Index","text":"<p>//demo/dev.atick.compose.data.home</p>"},{"location":"demo/demo/dev.atick.compose.data.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.data.home/#types","title":"Types","text":"Name Summary HomeScreenData [androidJvm]@Immutabledata class HomeScreenData(val posts: List&lt;UiPost&gt; = listOf())Data class representing the data to be displayed on the home screen. UiPost [androidJvm]data class UiPost(val id: Int = 0, val title: String = \"\", val url: String = \"\", val thumbnailUrl: String = \"\")Data class representing a post to be shown on the ui."},{"location":"demo/demo/dev.atick.compose.data.home/#functions","title":"Functions","text":"Name Summary mapToPostEntities [androidJvm]fun List&lt;NetworkPost&gt;.mapToPostEntities(): List&lt;PostEntity&gt;Converts a list of NetworkPost objects to a list of PostEntity objects using the toPostEntity conversion function. mapToUiPost [androidJvm]fun List&lt;PostEntity&gt;.mapToUiPost(): List&lt;UiPost&gt;Converts a list of PostEntity objects to a list of UiPost objects for displaying in the UI, using the toUiPost conversion function. mapToUiPosts [androidJvm]fun List&lt;NetworkPost&gt;.mapToUiPosts(): List&lt;UiPost&gt;Converts a list of NetworkPost objects to a list of corresponding UiPost objects. toPostEntity [androidJvm]fun NetworkPost.toPostEntity(): PostEntityConverts a NetworkPost object to a PostEntity object. toUiPost [androidJvm]fun NetworkPost.toUiPost(): UiPostConverts a NetworkPost object to a corresponding UiPost object.[androidJvm]fun PostEntity.toUiPost(): UiPostConverts a PostEntity object to a UiPost object for displaying in the UI."},{"location":"demo/demo/dev.atick.compose.data.home/map-to-post-entities/","title":"Map to post entities","text":"<p>//demo/dev.atick.compose.data.home/mapToPostEntities</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-post-entities/#maptopostentities","title":"mapToPostEntities","text":"<p>[androidJvm]\\ fun List&lt;NetworkPost&gt;.mapToPostEntities(): List&lt;PostEntity&gt;</p> <p>Converts a list of NetworkPost objects to a list of PostEntity objects using the toPostEntity conversion function.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-post-entities/#receiver","title":"Receiver","text":"<p>The list of NetworkPost objects to be converted.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-post-entities/#return","title":"Return","text":"<p>A list of converted PostEntity objects.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-post/","title":"Map to ui post","text":"<p>//demo/dev.atick.compose.data.home/mapToUiPost</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-post/#maptouipost","title":"mapToUiPost","text":"<p>[androidJvm]\\ fun List&lt;PostEntity&gt;.mapToUiPost(): List&lt;UiPost&gt;</p> <p>Converts a list of PostEntity objects to a list of UiPost objects for displaying in the UI, using the toUiPost conversion function.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-post/#receiver","title":"Receiver","text":"<p>The list of PostEntity objects to be converted.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-post/#return","title":"Return","text":"<p>A list of converted UiPost objects.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-posts/","title":"Map to ui posts","text":"<p>//demo/dev.atick.compose.data.home/mapToUiPosts</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-posts/#maptouiposts","title":"mapToUiPosts","text":"<p>[androidJvm]\\ fun List&lt;NetworkPost&gt;.mapToUiPosts(): List&lt;UiPost&gt;</p> <p>Converts a list of NetworkPost objects to a list of corresponding UiPost objects.</p> <p>This extension function applies the NetworkPost.toUiPost conversion function to each element of the source list, effectively mapping the properties from NetworkPost objects to UiPost objects.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-posts/#receiver","title":"Receiver","text":"<p>The list of NetworkPost objects to convert to a list of UiPost objects.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/map-to-ui-posts/#return","title":"Return","text":"<p>A new list containing UiPost objects with properties mapped from the source NetworkPost objects.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-post-entity/","title":"To post entity","text":"<p>//demo/dev.atick.compose.data.home/toPostEntity</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-post-entity/#topostentity","title":"toPostEntity","text":"<p>[androidJvm]\\ fun NetworkPost.toPostEntity(): PostEntity</p> <p>Converts a NetworkPost object to a PostEntity object.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-post-entity/#return","title":"Return","text":"<p>The converted PostEntity object.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-ui-post/","title":"To ui post","text":"<p>//demo/dev.atick.compose.data.home/toUiPost</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-ui-post/#touipost","title":"toUiPost","text":"<p>[androidJvm]\\ fun PostEntity.toUiPost(): UiPost</p> <p>Converts a PostEntity object to a UiPost object for displaying in the UI.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-ui-post/#return","title":"Return","text":"<p>The converted UiPost object.</p> <p>[androidJvm]\\ fun NetworkPost.toUiPost(): UiPost</p> <p>Converts a NetworkPost object to a corresponding UiPost object.</p> <p>This extension function facilitates the conversion of a NetworkPost object into a UiPost object by mapping the properties from the source to the destination.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-ui-post/#receiver","title":"Receiver","text":"<p>The NetworkPost object to convert to UiPost.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/to-ui-post/#return_1","title":"Return","text":"<p>A new UiPost object with properties mapped from the source NetworkPost.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/","title":"Index","text":"<p>//demo/dev.atick.compose.data.home/HomeScreenData</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/#homescreendata","title":"HomeScreenData","text":"<p>[androidJvm]\\ @Immutable</p> <p>data class HomeScreenData(val posts: List&lt;UiPost&gt; = listOf())</p> <p>Data class representing the data to be displayed on the home screen.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/#constructors","title":"Constructors","text":"HomeScreenData [androidJvm]constructor(posts: List&lt;UiPost&gt; = listOf())"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/#properties","title":"Properties","text":"Name Summary posts [androidJvm]val posts: List&lt;UiPost&gt;The list of posts to be displayed on the home screen."},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/-home-screen-data/","title":"home screen data","text":"<p>//demo/dev.atick.compose.data.home/HomeScreenData/HomeScreenData</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/-home-screen-data/#homescreendata","title":"HomeScreenData","text":"<p>[androidJvm]\\ constructor(posts: List&lt;UiPost&gt; = listOf())</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/posts/","title":"Posts","text":"<p>//demo/dev.atick.compose.data.home/HomeScreenData/posts</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-home-screen-data/posts/#posts","title":"posts","text":"<p>[androidJvm]\\ val posts: List&lt;UiPost&gt;</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/","title":"Index","text":"<p>//demo/dev.atick.compose.data.home/UiPost</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/#uipost","title":"UiPost","text":"<p>[androidJvm]\\ data class UiPost(val id: Int = 0, val title: String = \"\", val url: String = \"\", val thumbnailUrl: String = \"\")</p> <p>Data class representing a post to be shown on the ui.</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/#constructors","title":"Constructors","text":"UiPost [androidJvm]constructor(id: Int = 0, title: String = \"\", url: String = \"\", thumbnailUrl: String = \"\")"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: Int = 0The unique identifier of the network post. thumbnailUrl [androidJvm]val thumbnailUrl: StringThe URL of the thumbnail image associated with the network post. title [androidJvm]val title: StringThe title of the network post. url [androidJvm]val url: StringThe URL associated with the network post."},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/-ui-post/","title":"ui post","text":"<p>//demo/dev.atick.compose.data.home/UiPost/UiPost</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/-ui-post/#uipost","title":"UiPost","text":"<p>[androidJvm]\\ constructor(id: Int = 0, title: String = \"\", url: String = \"\", thumbnailUrl: String = \"\")</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/id/","title":"Id","text":"<p>//demo/dev.atick.compose.data.home/UiPost/id</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Int = 0</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/thumbnail-url/","title":"Thumbnail url","text":"<p>//demo/dev.atick.compose.data.home/UiPost/thumbnailUrl</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/thumbnail-url/#thumbnailurl","title":"thumbnailUrl","text":"<p>[androidJvm]\\ val thumbnailUrl: String</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/title/","title":"Title","text":"<p>//demo/dev.atick.compose.data.home/UiPost/title</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: String</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/url/","title":"Url","text":"<p>//demo/dev.atick.compose.data.home/UiPost/url</p>"},{"location":"demo/demo/dev.atick.compose.data.home/-ui-post/url/#url","title":"url","text":"<p>[androidJvm]\\ val url: String</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/","title":"Index","text":"<p>//demo/dev.atick.compose.data.profile</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.data.profile/#types","title":"Types","text":"Name Summary ProfileScreenData [androidJvm]data class ProfileScreenData(val name: String = String(), val profilePictureUri: String? = null)Represents data for displaying a user's profile screen."},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/","title":"Index","text":"<p>//demo/dev.atick.compose.data.profile/ProfileScreenData</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/#profilescreendata","title":"ProfileScreenData","text":"<p>[androidJvm]\\ data class ProfileScreenData(val name: String = String(), val profilePictureUri: String? = null)</p> <p>Represents data for displaying a user's profile screen.</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/#constructors","title":"Constructors","text":"ProfileScreenData [androidJvm]constructor(name: String = String(), profilePictureUri: String? = null)"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: StringThe user's name to be displayed on the profile screen. profilePictureUri [androidJvm]val profilePictureUri: String? = nullThe URI for the user's profile picture, or null if not available."},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/-profile-screen-data/","title":"profile screen data","text":"<p>//demo/dev.atick.compose.data.profile/ProfileScreenData/ProfileScreenData</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/-profile-screen-data/#profilescreendata","title":"ProfileScreenData","text":"<p>[androidJvm]\\ constructor(name: String = String(), profilePictureUri: String? = null)</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/name/","title":"Name","text":"<p>//demo/dev.atick.compose.data.profile/ProfileScreenData/name</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/profile-picture-uri/","title":"Profile picture uri","text":"<p>//demo/dev.atick.compose.data.profile/ProfileScreenData/profilePictureUri</p>"},{"location":"demo/demo/dev.atick.compose.data.profile/-profile-screen-data/profile-picture-uri/#profilepictureuri","title":"profilePictureUri","text":"<p>[androidJvm]\\ val profilePictureUri: String? = null</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/","title":"Index","text":"<p>//demo/dev.atick.compose.di.repository</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.di.repository/#types","title":"Types","text":"Name Summary RepositoryModule [androidJvm]@Moduleabstract class RepositoryModuleDagger module that provides the binding for the PostsRepository interface."},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/","title":"Index","text":"<p>//demo/dev.atick.compose.di.repository/RepositoryModule</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class RepositoryModule</p> <p>Dagger module that provides the binding for the PostsRepository interface.</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/#constructors","title":"Constructors","text":"RepositoryModule [androidJvm]constructor()"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/#functions","title":"Functions","text":"Name Summary bindPostsRepository [androidJvm]@Binds@Singletonabstract fun bindPostsRepository(postsRepositoryImpl: PostsRepositoryImpl): PostsRepositoryBinds the PostsRepositoryImpl implementation to the PostsRepository interface. bindProfileDataRepository [androidJvm]@Binds@Singletonabstract fun bindProfileDataRepository(profileDataRepositoryImpl: ProfileDataRepositoryImpl): ProfileDataRepositoryThis method is used to bind a ProfileDataRepositoryImpl instance to the ProfileDataRepository interface. It is annotated with @Binds and @Singleton, indicating that a single instance of ProfileDataRepositoryImpl should be used as the implementation of ProfileDataRepository throughout the application."},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/-repository-module/","title":"repository module","text":"<p>//demo/dev.atick.compose.di.repository/RepositoryModule/RepositoryModule</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-posts-repository/","title":"Bind posts repository","text":"<p>//demo/dev.atick.compose.di.repository/RepositoryModule/bindPostsRepository</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-posts-repository/#bindpostsrepository","title":"bindPostsRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindPostsRepository(postsRepositoryImpl: PostsRepositoryImpl): PostsRepository</p> <p>Binds the PostsRepositoryImpl implementation to the PostsRepository interface.</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-posts-repository/#return","title":"Return","text":"<p>The PostsRepository interface.</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-posts-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> postsRepositoryImpl The implementation of PostsRepository to be bound."},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-profile-data-repository/","title":"Bind profile data repository","text":"<p>//demo/dev.atick.compose.di.repository/RepositoryModule/bindProfileDataRepository</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-profile-data-repository/#bindprofiledatarepository","title":"bindProfileDataRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindProfileDataRepository(profileDataRepositoryImpl: ProfileDataRepositoryImpl): ProfileDataRepository</p> <p>This method is used to bind a ProfileDataRepositoryImpl instance to the ProfileDataRepository interface. It is annotated with @Binds and @Singleton, indicating that a single instance of ProfileDataRepositoryImpl should be used as the implementation of ProfileDataRepository throughout the application.</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-profile-data-repository/#return","title":"Return","text":"<p>An instance of ProfileDataRepository representing the bound implementation.</p>"},{"location":"demo/demo/dev.atick.compose.di.repository/-repository-module/bind-profile-data-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> profileDataRepositoryImpl The ProfileDataRepositoryImpl instance to be bound to ProfileDataRepository."},{"location":"demo/demo/dev.atick.compose.navigation/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation</p>"},{"location":"demo/demo/dev.atick.compose.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.navigation/#types","title":"Types","text":"Name Summary TopLevelDestination [androidJvm]enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; Enum class representing top-level destinations in a navigation system."},{"location":"demo/demo/dev.atick.compose.navigation/#functions","title":"Functions","text":"Name Summary JetpackNavHost [androidJvm]@Composablefun JetpackNavHost(appState: JetpackAppState, onShowSnackbar: suspend (String, String?) -&gt; Boolean, modifier: Modifier = Modifier)"},{"location":"demo/demo/dev.atick.compose.navigation/-jetpack-nav-host/","title":"jetpack nav host","text":"<p>//demo/dev.atick.compose.navigation/JetpackNavHost</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-jetpack-nav-host/#jetpacknavhost","title":"JetpackNavHost","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavHost(appState: JetpackAppState, onShowSnackbar: suspend (String, String?) -&gt; Boolean, modifier: Modifier = Modifier)</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/#topleveldestination","title":"TopLevelDestination","text":"<p>[androidJvm]\\ enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; </p> <p>Enum class representing top-level destinations in a navigation system.</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/#entries","title":"Entries","text":"HOME [androidJvm]HOME PROFILE [androidJvm]PROFILE"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;TopLevelDestination&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): TopLevelDestinationReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;TopLevelDestination&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/entries/","title":"Entries","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/entries</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;TopLevelDestination&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/icon-text-id/","title":"Icon text id","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/iconTextId</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/icon-text-id/#icontextid","title":"iconTextId","text":"<p>[androidJvm]\\ val iconTextId: Int</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/route/","title":"Route","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/route</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/route/#route","title":"route","text":"<p>[androidJvm]\\ val route: KClass&lt;*&gt;</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/selected-icon/","title":"Selected icon","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/selectedIcon</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/selected-icon/#selectedicon","title":"selectedIcon","text":"<p>[androidJvm]\\ val selectedIcon: ImageVector</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/title-text-id/","title":"Title text id","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/titleTextId</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/title-text-id/#titletextid","title":"titleTextId","text":"<p>[androidJvm]\\ val titleTextId: Int</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/unselected-icon/","title":"Unselected icon","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/unselectedIcon</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/unselected-icon/#unselectedicon","title":"unselectedIcon","text":"<p>[androidJvm]\\ val unselectedIcon: ImageVector</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/value-of/","title":"Value of","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/valueOf</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): TopLevelDestination</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/values/","title":"Values","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/values</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;TopLevelDestination&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/HOME</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/#home","title":"HOME","text":"<p>[androidJvm]\\ HOME</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/-p-r-o-f-i-l-e/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation/TopLevelDestination/PROFILE</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/-p-r-o-f-i-l-e/#profile","title":"PROFILE","text":"<p>[androidJvm]\\ PROFILE</p>"},{"location":"demo/demo/dev.atick.compose.navigation/-top-level-destination/-p-r-o-f-i-l-e/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"demo/demo/dev.atick.compose.navigation.details/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.details</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.navigation.details/#types","title":"Types","text":"Name Summary Details [androidJvm]@Serializabledata class Details(val postId: Int)"},{"location":"demo/demo/dev.atick.compose.navigation.details/#functions","title":"Functions","text":"Name Summary detailsScreen [androidJvm]fun NavGraphBuilder.detailsScreen(onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean) navigateToDetailsScreen [androidJvm]fun NavController.navigateToDetailsScreen(postId: Int)"},{"location":"demo/demo/dev.atick.compose.navigation.details/details-screen/","title":"Details screen","text":"<p>//demo/dev.atick.compose.navigation.details/detailsScreen</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/details-screen/#detailsscreen","title":"detailsScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.detailsScreen(onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/navigate-to-details-screen/","title":"Navigate to details screen","text":"<p>//demo/dev.atick.compose.navigation.details/navigateToDetailsScreen</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/navigate-to-details-screen/#navigatetodetailsscreen","title":"navigateToDetailsScreen","text":"<p>[androidJvm]\\ fun NavController.navigateToDetailsScreen(postId: Int)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.details/Details</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/#details","title":"Details","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class Details(val postId: Int)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/#constructors","title":"Constructors","text":"Details [androidJvm]constructor(postId: Int)"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/#properties","title":"Properties","text":"Name Summary postId [androidJvm]val postId: Int"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/-details/","title":"details","text":"<p>//demo/dev.atick.compose.navigation.details/Details/Details</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/-details/#details","title":"Details","text":"<p>[androidJvm]\\ constructor(postId: Int)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/post-id/","title":"Post id","text":"<p>//demo/dev.atick.compose.navigation.details/Details/postId</p>"},{"location":"demo/demo/dev.atick.compose.navigation.details/-details/post-id/#postid","title":"postId","text":"<p>[androidJvm]\\ val postId: Int</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.home</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.navigation.home/#types","title":"Types","text":"Name Summary Home [androidJvm]@Serializabledata object Home HomeNavGraph [androidJvm]@Serializabledata object HomeNavGraph"},{"location":"demo/demo/dev.atick.compose.navigation.home/#functions","title":"Functions","text":"Name Summary homeNavGraph [androidJvm]fun NavGraphBuilder.homeNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit) homeScreen [androidJvm]fun NavGraphBuilder.homeScreen(onPostClick: (Int) -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean) navigateToHomeNavGraph [androidJvm]fun NavController.navigateToHomeNavGraph(navOptions: NavOptions? = null)"},{"location":"demo/demo/dev.atick.compose.navigation.home/home-nav-graph/","title":"Home nav graph","text":"<p>//demo/dev.atick.compose.navigation.home/homeNavGraph</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/home-nav-graph/#homenavgraph","title":"homeNavGraph","text":"<p>[androidJvm]\\ fun NavGraphBuilder.homeNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/home-screen/","title":"Home screen","text":"<p>//demo/dev.atick.compose.navigation.home/homeScreen</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/home-screen/#homescreen","title":"homeScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.homeScreen(onPostClick: (Int) -&gt; Unit, onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/navigate-to-home-nav-graph/","title":"Navigate to home nav graph","text":"<p>//demo/dev.atick.compose.navigation.home/navigateToHomeNavGraph</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/navigate-to-home-nav-graph/#navigatetohomenavgraph","title":"navigateToHomeNavGraph","text":"<p>[androidJvm]\\ fun NavController.navigateToHomeNavGraph(navOptions: NavOptions? = null)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/-home/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.home/Home</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/-home/#home","title":"Home","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Home</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/-home-nav-graph/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.home/HomeNavGraph</p>"},{"location":"demo/demo/dev.atick.compose.navigation.home/-home-nav-graph/#homenavgraph","title":"HomeNavGraph","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object HomeNavGraph</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.profile</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.navigation.profile/#types","title":"Types","text":"Name Summary Profile [androidJvm]@Serializabledata object Profile"},{"location":"demo/demo/dev.atick.compose.navigation.profile/#functions","title":"Functions","text":"Name Summary navigateProfile [androidJvm]fun NavController.navigateProfile(navOptions: NavOptions?) profileScreen [androidJvm]fun NavGraphBuilder.profileScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)"},{"location":"demo/demo/dev.atick.compose.navigation.profile/navigate-profile/","title":"Navigate profile","text":"<p>//demo/dev.atick.compose.navigation.profile/navigateProfile</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/navigate-profile/#navigateprofile","title":"navigateProfile","text":"<p>[androidJvm]\\ fun NavController.navigateProfile(navOptions: NavOptions?)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/profile-screen/","title":"Profile screen","text":"<p>//demo/dev.atick.compose.navigation.profile/profileScreen</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/profile-screen/#profilescreen","title":"profileScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.profileScreen(onShowSnackbar: suspend (String, String?) -&gt; Boolean)</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/-profile/","title":"Index","text":"<p>//demo/dev.atick.compose.navigation.profile/Profile</p>"},{"location":"demo/demo/dev.atick.compose.navigation.profile/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Profile</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/","title":"Index","text":"<p>//demo/dev.atick.compose.repository.home</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.repository.home/#types","title":"Types","text":"Name Summary PostsRepository [androidJvm]interface PostsRepositoryInterface defining operations for interacting with the home repository. PostsRepositoryImpl [androidJvm]class PostsRepositoryImpl@Injectconstructor(networkDataSource: NetworkDataSource, localDataSource: LocalDataSource) : PostsRepositoryImplementation of PostsRepository that coordinates data synchronization between network and local sources."},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/","title":"Index","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepository</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/#postsrepository","title":"PostsRepository","text":"<p>interface PostsRepository</p> <p>Interface defining operations for interacting with the home repository.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/#inheritors","title":"Inheritors","text":"PostsRepositoryImpl"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/#functions","title":"Functions","text":"Name Summary getCachedPosts [androidJvm]abstract fun getCachedPosts(): Flow&lt;List&lt;UiPost&gt;&gt; getPost [androidJvm]abstract suspend fun getPost(id: Int): Result&lt;UiPost&gt;Retrieves a UI post with the specified ID wrapped in a Result from a data source. synchronizePosts [androidJvm]abstract suspend fun synchronizePosts(): Result&lt;Unit&gt;"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/get-cached-posts/","title":"Get cached posts","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepository/getCachedPosts</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/get-cached-posts/#getcachedposts","title":"getCachedPosts","text":"<p>[androidJvm]\\ abstract fun getCachedPosts(): Flow&lt;List&lt;UiPost&gt;&gt;</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/get-post/","title":"Get post","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepository/getPost</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\ abstract suspend fun getPost(id: Int): Result&lt;UiPost&gt;</p> <p>Retrieves a UI post with the specified ID wrapped in a Result from a data source.</p> <p>This function asynchronously fetches a UI post with the given ID and encapsulates the result in a Result wrapper.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/get-post/#return","title":"Return","text":"<p>A Result instance containing either the fetched UiPost object on success or an error on failure.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the UI post to retrieve."},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/synchronize-posts/","title":"Synchronize posts","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepository/synchronizePosts</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository/synchronize-posts/#synchronizeposts","title":"synchronizePosts","text":"<p>[androidJvm]\\ abstract suspend fun synchronizePosts(): Result&lt;Unit&gt;</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/","title":"Index","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepositoryImpl</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/#postsrepositoryimpl","title":"PostsRepositoryImpl","text":"<p>class PostsRepositoryImpl@Injectconstructor(networkDataSource: NetworkDataSource, localDataSource: LocalDataSource) : PostsRepository</p> <p>Implementation of PostsRepository that coordinates data synchronization between network and local sources.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> networkDataSource The data source for network operations. localDataSource The data source for local storage operations."},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/#constructors","title":"Constructors","text":"PostsRepositoryImpl [androidJvm]@Injectconstructor(networkDataSource: NetworkDataSource, localDataSource: LocalDataSource)"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/#functions","title":"Functions","text":"Name Summary getCachedPosts [androidJvm]open override fun getCachedPosts(): Flow&lt;List&lt;UiPost&gt;&gt;Retrieves cached posts from the local data source and converts them to a Flow of UiPost objects. getPost [androidJvm]open suspend override fun getPost(id: Int): Result&lt;UiPost&gt;Retrieves a post by its unique identifier from the network data source and converts it to a UiPost. synchronizePosts [androidJvm]open suspend override fun synchronizePosts(): Result&lt;Unit&gt;Synchronizes posts by fetching from the network and updating the local storage."},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/-posts-repository-impl/","title":"posts repository impl","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepositoryImpl/PostsRepositoryImpl</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/-posts-repository-impl/#postsrepositoryimpl","title":"PostsRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(networkDataSource: NetworkDataSource, localDataSource: LocalDataSource)</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/-posts-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> networkDataSource The data source for network operations. localDataSource The data source for local storage operations."},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-cached-posts/","title":"Get cached posts","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepositoryImpl/getCachedPosts</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-cached-posts/#getcachedposts","title":"getCachedPosts","text":"<p>[androidJvm]\\ open override fun getCachedPosts(): Flow&lt;List&lt;UiPost&gt;&gt;</p> <p>Retrieves cached posts from the local data source and converts them to a Flow of UiPost objects.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-cached-posts/#return","title":"Return","text":"<p>A Flow emitting a list of UiPost objects representing cached posts.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-post/","title":"Get post","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepositoryImpl/getPost</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\ open suspend override fun getPost(id: Int): Result&lt;UiPost&gt;</p> <p>Retrieves a post by its unique identifier from the network data source and converts it to a UiPost.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-post/#return","title":"Return","text":"<p>A Result containing the retrieved UiPost object.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the post."},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/synchronize-posts/","title":"Synchronize posts","text":"<p>//demo/dev.atick.compose.repository.home/PostsRepositoryImpl/synchronizePosts</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/synchronize-posts/#synchronizeposts","title":"synchronizePosts","text":"<p>[androidJvm]\\ open suspend override fun synchronizePosts(): Result&lt;Unit&gt;</p> <p>Synchronizes posts by fetching from the network and updating the local storage.</p>"},{"location":"demo/demo/dev.atick.compose.repository.home/-posts-repository-impl/synchronize-posts/#return","title":"Return","text":"<p>A Result indicating the outcome of the synchronization operation.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/","title":"Index","text":"<p>//demo/dev.atick.compose.repository.profile</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.repository.profile/#types","title":"Types","text":"Name Summary ProfileDataRepository [androidJvm]interface ProfileDataRepositoryInterface representing a repository for profile screen data and sign-out functionality. ProfileDataRepositoryImpl [androidJvm]class ProfileDataRepositoryImpl@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource) : ProfileDataRepositoryImplementation of ProfileDataRepository that provides profile screen data and sign-out functionality."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/","title":"Index","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepository</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/#profiledatarepository","title":"ProfileDataRepository","text":"<p>interface ProfileDataRepository</p> <p>Interface representing a repository for profile screen data and sign-out functionality.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/#inheritors","title":"Inheritors","text":"ProfileDataRepositoryImpl"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/#properties","title":"Properties","text":"Name Summary profileScreenData [androidJvm]abstract val profileScreenData: Flow&lt;ProfileScreenData&gt;A flow that provides ProfileScreenData updates to be displayed on the profile screen."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/#functions","title":"Functions","text":"Name Summary signOut [androidJvm]abstract suspend fun signOut(): Result&lt;Unit&gt;Suspend function to sign the user out."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/profile-screen-data/","title":"Profile screen data","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepository/profileScreenData</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/profile-screen-data/#profilescreendata","title":"profileScreenData","text":"<p>[androidJvm]\\ abstract val profileScreenData: Flow&lt;ProfileScreenData&gt;</p> <p>A flow that provides ProfileScreenData updates to be displayed on the profile screen.</p> <p>The profile screen data can change over time, and clients can collect updates using a Flow.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/sign-out/","title":"Sign out","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepository/signOut</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ abstract suspend fun signOut(): Result&lt;Unit&gt;</p> <p>Suspend function to sign the user out.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository/sign-out/#return","title":"Return","text":"<p>A Result representing the sign-out operation result. It contains Unit if the sign-out was successful, or an error if there was a problem.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/","title":"Index","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepositoryImpl</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/#profiledatarepositoryimpl","title":"ProfileDataRepositoryImpl","text":"<p>class ProfileDataRepositoryImpl@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource) : ProfileDataRepository</p> <p>Implementation of ProfileDataRepository that provides profile screen data and sign-out functionality.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSource The data source for user preferences. authDataSource The data source for authentication operations."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/#constructors","title":"Constructors","text":"ProfileDataRepositoryImpl [androidJvm]@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource)"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/#properties","title":"Properties","text":"Name Summary profileScreenData [androidJvm]open override val profileScreenData: Flow&lt;ProfileScreenData&gt;A flow that provides ProfileScreenData updates to be displayed on the profile screen."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/#functions","title":"Functions","text":"Name Summary signOut [androidJvm]open suspend override fun signOut(): Result&lt;Unit&gt;Suspend function to sign the user out."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/-profile-data-repository-impl/","title":"profile data repository impl","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepositoryImpl/ProfileDataRepositoryImpl</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/-profile-data-repository-impl/#profiledatarepositoryimpl","title":"ProfileDataRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource)</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/-profile-data-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSource The data source for user preferences. authDataSource The data source for authentication operations."},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/profile-screen-data/","title":"Profile screen data","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepositoryImpl/profileScreenData</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/profile-screen-data/#profilescreendata","title":"profileScreenData","text":"<p>[androidJvm]\\ open override val profileScreenData: Flow&lt;ProfileScreenData&gt;</p> <p>A flow that provides ProfileScreenData updates to be displayed on the profile screen.</p> <p>The profile screen data is derived from the user's preferences.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/sign-out/","title":"Sign out","text":"<p>//demo/dev.atick.compose.repository.profile/ProfileDataRepositoryImpl/signOut</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ open suspend override fun signOut(): Result&lt;Unit&gt;</p> <p>Suspend function to sign the user out.</p> <p>This function signs the user out by delegating to the AuthDataSource and then updates the user's profile data in UserPreferencesDataSource.</p>"},{"location":"demo/demo/dev.atick.compose.repository.profile/-profile-data-repository-impl/sign-out/#return","title":"Return","text":"<p>A Result representing the sign-out operation result. It contains Unit if the sign-out was successful, or an error if there was a problem.</p>"},{"location":"demo/demo/dev.atick.compose.ui/","title":"Index","text":"<p>//demo/dev.atick.compose.ui</p>"},{"location":"demo/demo/dev.atick.compose.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.ui/#types","title":"Types","text":"Name Summary JetpackAppState [androidJvm]@Stableclass JetpackAppState(val isUserLoggedIn: Boolean, val userProfilePictureUri: String?, val navController: NavHostController, val windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)"},{"location":"demo/demo/dev.atick.compose.ui/#functions","title":"Functions","text":"Name Summary JetpackApp [androidJvm]@Composablefun JetpackApp(appState: JetpackAppState) JetpackBottomBar [androidJvm]@Composablefun JetpackBottomBar(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier) JetpackNavRail [androidJvm]@Composablefun JetpackNavRail(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier) rememberJetpackAppState [androidJvm]@Composablefun rememberJetpackAppState(isUserLoggedIn: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, userProfilePictureUri: String? = null, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppState"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app/","title":"jetpack app","text":"<p>//demo/dev.atick.compose.ui/JetpackApp</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app/#jetpackapp","title":"JetpackApp","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackApp(appState: JetpackAppState)</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-bottom-bar/","title":"jetpack bottom bar","text":"<p>//demo/dev.atick.compose.ui/JetpackBottomBar</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-bottom-bar/#jetpackbottombar","title":"JetpackBottomBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackBottomBar(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-nav-rail/","title":"jetpack nav rail","text":"<p>//demo/dev.atick.compose.ui/JetpackNavRail</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-nav-rail/#jetpacknavrail","title":"JetpackNavRail","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavRail(destinations: List&lt;TopLevelDestination&gt;, destinationsWithUnreadResources: Set&lt;TopLevelDestination&gt;, onNavigateToDestination: (TopLevelDestination) -&gt; Unit, currentDestination: NavDestination?, modifier: Modifier = Modifier)</p>"},{"location":"demo/demo/dev.atick.compose.ui/remember-jetpack-app-state/","title":"Remember jetpack app state","text":"<p>//demo/dev.atick.compose.ui/rememberJetpackAppState</p>"},{"location":"demo/demo/dev.atick.compose.ui/remember-jetpack-app-state/#rememberjetpackappstate","title":"rememberJetpackAppState","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun rememberJetpackAppState(isUserLoggedIn: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, userProfilePictureUri: String? = null, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppState</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/","title":"Index","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ @Stable</p> <p>class JetpackAppState(val isUserLoggedIn: Boolean, val userProfilePictureUri: String?, val navController: NavHostController, val windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/#constructors","title":"Constructors","text":"JetpackAppState [androidJvm]constructor(isUserLoggedIn: Boolean, userProfilePictureUri: String?, navController: NavHostController, windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/#properties","title":"Properties","text":"Name Summary currentDestination [androidJvm]@get:Composableval currentDestination: NavDestination? currentTopLevelDestination [androidJvm]@get:Composableval currentTopLevelDestination: TopLevelDestination? isOffline [androidJvm]val isOffline: StateFlow&lt;Boolean&gt; isUserLoggedIn [androidJvm]val isUserLoggedIn: Boolean navController [androidJvm]val navController: NavHostController shouldShowBottomBar [androidJvm]@get:Composableval shouldShowBottomBar: Boolean shouldShowNavRail [androidJvm]@get:Composableval shouldShowNavRail: Boolean topLevelDestinations [androidJvm]val topLevelDestinations: List&lt;TopLevelDestination&gt; topLevelDestinationsWithUnreadResources [androidJvm]val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt; userProfilePictureUri [androidJvm]val userProfilePictureUri: String? windowSizeClass [androidJvm]val windowSizeClass: WindowSizeClass"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/#functions","title":"Functions","text":"Name Summary navigateToTopLevelDestination [androidJvm]fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/","title":"jetpack app state","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/JetpackAppState</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ constructor(isUserLoggedIn: Boolean, userProfilePictureUri: String?, navController: NavHostController, windowSizeClass: WindowSizeClass, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/current-destination/","title":"Current destination","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/currentDestination</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/current-destination/#currentdestination","title":"currentDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentDestination: NavDestination?</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/","title":"Current top level destination","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/currentTopLevelDestination</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/#currenttopleveldestination","title":"currentTopLevelDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentTopLevelDestination: TopLevelDestination?</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/is-offline/","title":"Is offline","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/isOffline</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/is-offline/#isoffline","title":"isOffline","text":"<p>[androidJvm]\\ val isOffline: StateFlow&lt;Boolean&gt;</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/is-user-logged-in/","title":"Is user logged in","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/isUserLoggedIn</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/is-user-logged-in/#isuserloggedin","title":"isUserLoggedIn","text":"<p>[androidJvm]\\ val isUserLoggedIn: Boolean</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/nav-controller/","title":"Nav controller","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/navController</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/nav-controller/#navcontroller","title":"navController","text":"<p>[androidJvm]\\ val navController: NavHostController</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/","title":"Navigate to top level destination","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/navigateToTopLevelDestination</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/#navigatetotopleveldestination","title":"navigateToTopLevelDestination","text":"<p>[androidJvm]\\ fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/should-show-bottom-bar/","title":"Should show bottom bar","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/shouldShowBottomBar</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/should-show-bottom-bar/#shouldshowbottombar","title":"shouldShowBottomBar","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowBottomBar: Boolean</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/should-show-nav-rail/","title":"Should show nav rail","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/shouldShowNavRail</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/should-show-nav-rail/#shouldshownavrail","title":"shouldShowNavRail","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowNavRail: Boolean</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/","title":"Top level destinations with unread resources","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/topLevelDestinationsWithUnreadResources</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/#topleveldestinationswithunreadresources","title":"topLevelDestinationsWithUnreadResources","text":"<p>[androidJvm]\\ val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt;</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/","title":"Top level destinations","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/topLevelDestinations</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/#topleveldestinations","title":"topLevelDestinations","text":"<p>[androidJvm]\\ val topLevelDestinations: List&lt;TopLevelDestination&gt;</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/user-profile-picture-uri/","title":"User profile picture uri","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/userProfilePictureUri</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/user-profile-picture-uri/#userprofilepictureuri","title":"userProfilePictureUri","text":"<p>[androidJvm]\\ val userProfilePictureUri: String?</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/window-size-class/","title":"Window size class","text":"<p>//demo/dev.atick.compose.ui/JetpackAppState/windowSizeClass</p>"},{"location":"demo/demo/dev.atick.compose.ui/-jetpack-app-state/window-size-class/#windowsizeclass","title":"windowSizeClass","text":"<p>[androidJvm]\\ val windowSizeClass: WindowSizeClass</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/","title":"Index","text":"<p>//demo/dev.atick.compose.ui.details</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.ui.details/#types","title":"Types","text":"Name Summary DetailsViewModel [androidJvm]class DetailsViewModel@Injectconstructor(postsRepository: PostsRepository, savedStateHandle: SavedStateHandle) : ViewModel"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/","title":"Index","text":"<p>//demo/dev.atick.compose.ui.details/DetailsViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/#detailsviewmodel","title":"DetailsViewModel","text":"<p>[androidJvm]\\ class DetailsViewModel@Injectconstructor(postsRepository: PostsRepository, savedStateHandle: SavedStateHandle) : ViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/#constructors","title":"Constructors","text":"DetailsViewModel [androidJvm]@Injectconstructor(postsRepository: PostsRepository, savedStateHandle: SavedStateHandle)"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/#properties","title":"Properties","text":"Name Summary detailsUiState [androidJvm]val detailsUiState: StateFlow&lt;UiState&lt;UiPost&gt;&gt;"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/-details-view-model/","title":"details view model","text":"<p>//demo/dev.atick.compose.ui.details/DetailsViewModel/DetailsViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/-details-view-model/#detailsviewmodel","title":"DetailsViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(postsRepository: PostsRepository, savedStateHandle: SavedStateHandle)</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/details-ui-state/","title":"Details ui state","text":"<p>//demo/dev.atick.compose.ui.details/DetailsViewModel/detailsUiState</p>"},{"location":"demo/demo/dev.atick.compose.ui.details/-details-view-model/details-ui-state/#detailsuistate","title":"detailsUiState","text":"<p>[androidJvm]\\ val detailsUiState: StateFlow&lt;UiState&lt;UiPost&gt;&gt;</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/","title":"Index","text":"<p>//demo/dev.atick.compose.ui.home</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.ui.home/#types","title":"Types","text":"Name Summary HomeViewModel [androidJvm]class HomeViewModel@Injectconstructor(postsRepository: PostsRepository) : ViewModelView model for the home screen."},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/","title":"Index","text":"<p>//demo/dev.atick.compose.ui.home/HomeViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/#homeviewmodel","title":"HomeViewModel","text":"<p>class HomeViewModel@Injectconstructor(postsRepository: PostsRepository) : ViewModel</p> <p>View model for the home screen.</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> postsRepository The repository for accessing home screen data."},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/#constructors","title":"Constructors","text":"HomeViewModel [androidJvm]@Injectconstructor(postsRepository: PostsRepository)"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/#properties","title":"Properties","text":"Name Summary homeUiState [androidJvm]val homeUiState: StateFlow&lt;UiState&lt;HomeScreenData&gt;&gt;"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/-home-view-model/","title":"home view model","text":"<p>//demo/dev.atick.compose.ui.home/HomeViewModel/HomeViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/-home-view-model/#homeviewmodel","title":"HomeViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(postsRepository: PostsRepository)</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/-home-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> postsRepository The repository for accessing home screen data."},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/home-ui-state/","title":"Home ui state","text":"<p>//demo/dev.atick.compose.ui.home/HomeViewModel/homeUiState</p>"},{"location":"demo/demo/dev.atick.compose.ui.home/-home-view-model/home-ui-state/#homeuistate","title":"homeUiState","text":"<p>[androidJvm]\\ val homeUiState: StateFlow&lt;UiState&lt;HomeScreenData&gt;&gt;</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/","title":"Index","text":"<p>//demo/dev.atick.compose.ui.profile</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"demo/demo/dev.atick.compose.ui.profile/#types","title":"Types","text":"Name Summary ProfileViewModel [androidJvm]class ProfileViewModel@Injectconstructor(profileDataRepository: ProfileDataRepository) : ViewModel"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/","title":"Index","text":"<p>//demo/dev.atick.compose.ui.profile/ProfileViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/#profileviewmodel","title":"ProfileViewModel","text":"<p>[androidJvm]\\ class ProfileViewModel@Injectconstructor(profileDataRepository: ProfileDataRepository) : ViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/#constructors","title":"Constructors","text":"ProfileViewModel [androidJvm]@Injectconstructor(profileDataRepository: ProfileDataRepository)"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/#properties","title":"Properties","text":"Name Summary profileUiState [androidJvm]val profileUiState: StateFlow&lt;UiState&lt;ProfileScreenData&gt;&gt;"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? signOut [androidJvm]fun signOut() updateProfileData [androidJvm]fun updateProfileData()"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/-profile-view-model/","title":"profile view model","text":"<p>//demo/dev.atick.compose.ui.profile/ProfileViewModel/ProfileViewModel</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/-profile-view-model/#profileviewmodel","title":"ProfileViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(profileDataRepository: ProfileDataRepository)</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/profile-ui-state/","title":"Profile ui state","text":"<p>//demo/dev.atick.compose.ui.profile/ProfileViewModel/profileUiState</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/profile-ui-state/#profileuistate","title":"profileUiState","text":"<p>[androidJvm]\\ val profileUiState: StateFlow&lt;UiState&lt;ProfileScreenData&gt;&gt;</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/sign-out/","title":"Sign out","text":"<p>//demo/dev.atick.compose.ui.profile/ProfileViewModel/signOut</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ fun signOut()</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/update-profile-data/","title":"Update profile data","text":"<p>//demo/dev.atick.compose.ui.profile/ProfileViewModel/updateProfileData</p>"},{"location":"demo/demo/dev.atick.compose.ui.profile/-profile-view-model/update-profile-data/#updateprofiledata","title":"updateProfileData","text":"<p>[androidJvm]\\ fun updateProfileData()</p>"},{"location":"network/","title":"Index","text":"<p>//network</p>"},{"location":"network/#network","title":"network","text":""},{"location":"network/#packages","title":"Packages","text":"Name dev.atick.network.api dev.atick.network.data dev.atick.network.di dev.atick.network.di.coil dev.atick.network.di.okhttp dev.atick.network.di.retrofit dev.atick.network.models dev.atick.network.utils"},{"location":"network/network/dev.atick.network.api/","title":"Index","text":"<p>//network/dev.atick.network.api</p>"},{"location":"network/network/dev.atick.network.api/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.api/#types","title":"Types","text":"Name Summary JetpackRestApi [androidJvm]interface JetpackRestApiRetrofit API interface for Jetpack."},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/","title":"Index","text":"<p>//network/dev.atick.network.api/JetpackRestApi</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/#jetpackrestapi","title":"JetpackRestApi","text":"<p>[androidJvm]\\ interface JetpackRestApi</p> <p>Retrofit API interface for Jetpack.</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/#functions","title":"Functions","text":"Name Summary getPost [androidJvm]@GET(value = \"/photos/{id}\")abstract suspend fun getPost(@Path(value = \"id\")id: Int): NetworkPostRetrieves a network post with the specified ID from the designated endpoint. getPosts [androidJvm]@GET(value = \"/photos\")abstract suspend fun getPosts(): List&lt;NetworkPost&gt;Retrieves a list of network posts from the specified endpoint."},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-post/","title":"Get post","text":"<p>//network/dev.atick.network.api/JetpackRestApi/getPost</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\</p> <p>@GET(value = \"/photos/{id}\")</p> <p>abstract suspend fun getPost(@Path(value = \"id\")id: Int): NetworkPost</p> <p>Retrieves a network post with the specified ID from the designated endpoint.</p> <p>This function uses the HTTP GET method to retrieve a single network post with the given ID from the \"/posts/{id}\" endpoint.</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-post/#return","title":"Return","text":"<p>A NetworkPost object representing the retrieved network post.</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the network post to retrieve."},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-posts/","title":"Get posts","text":"<p>//network/dev.atick.network.api/JetpackRestApi/getPosts</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-posts/#getposts","title":"getPosts","text":"<p>[androidJvm]\\</p> <p>@GET(value = \"/photos\")</p> <p>abstract suspend fun getPosts(): List&lt;NetworkPost&gt;</p> <p>Retrieves a list of network posts from the specified endpoint.</p> <p>This function uses the HTTP GET method to retrieve a list of network posts from the \"/posts\" endpoint.</p>"},{"location":"network/network/dev.atick.network.api/-jetpack-rest-api/get-posts/#return","title":"Return","text":"<p>A List of NetworkPost objects representing the retrieved network posts.</p>"},{"location":"network/network/dev.atick.network.data/","title":"Index","text":"<p>//network/dev.atick.network.data</p>"},{"location":"network/network/dev.atick.network.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.data/#types","title":"Types","text":"Name Summary NetworkDataSource [androidJvm]interface NetworkDataSourceData source interface for Jetpack. NetworkDataSourceImpl [androidJvm]class NetworkDataSourceImpl@Injectconstructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher) : NetworkDataSourceData source implementation for Jetpack."},{"location":"network/network/dev.atick.network.data/-network-data-source/","title":"Index","text":"<p>//network/dev.atick.network.data/NetworkDataSource</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/#networkdatasource","title":"NetworkDataSource","text":"<p>interface NetworkDataSource</p> <p>Data source interface for Jetpack.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/#inheritors","title":"Inheritors","text":"NetworkDataSourceImpl"},{"location":"network/network/dev.atick.network.data/-network-data-source/#functions","title":"Functions","text":"Name Summary getPost [androidJvm]abstract suspend fun getPost(id: Int): NetworkPostRetrieves a network post with the specified ID from the designated endpoint. getPosts [androidJvm]abstract suspend fun getPosts(): List&lt;NetworkPost&gt;Retrieves a list of network posts from the specified endpoint."},{"location":"network/network/dev.atick.network.data/-network-data-source/get-post/","title":"Get post","text":"<p>//network/dev.atick.network.data/NetworkDataSource/getPost</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\ abstract suspend fun getPost(id: Int): NetworkPost</p> <p>Retrieves a network post with the specified ID from the designated endpoint.</p> <p>This function uses the HTTP GET method to retrieve a single network post with the given ID from the \"/posts/{id}\" endpoint.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/get-post/#return","title":"Return","text":"<p>A NetworkPost object representing the retrieved network post.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the network post to retrieve."},{"location":"network/network/dev.atick.network.data/-network-data-source/get-posts/","title":"Get posts","text":"<p>//network/dev.atick.network.data/NetworkDataSource/getPosts</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/get-posts/#getposts","title":"getPosts","text":"<p>[androidJvm]\\ abstract suspend fun getPosts(): List&lt;NetworkPost&gt;</p> <p>Retrieves a list of network posts from the specified endpoint.</p> <p>This function uses the HTTP GET method to retrieve a list of network posts from the \"/posts\" endpoint.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source/get-posts/#return","title":"Return","text":"<p>A List of NetworkPost objects representing the retrieved network posts.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/","title":"Index","text":"<p>//network/dev.atick.network.data/NetworkDataSourceImpl</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/#networkdatasourceimpl","title":"NetworkDataSourceImpl","text":"<p>class NetworkDataSourceImpl@Injectconstructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher) : NetworkDataSource</p> <p>Data source implementation for Jetpack.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackRestApi The JetpackRestApi instance."},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/#constructors","title":"Constructors","text":"NetworkDataSourceImpl [androidJvm]@Injectconstructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher)"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/#functions","title":"Functions","text":"Name Summary getPost [androidJvm]open suspend override fun getPost(id: Int): NetworkPostRetrieves a network post with the specified ID from the designated endpoint. getPosts [androidJvm]open suspend override fun getPosts(): List&lt;NetworkPost&gt;Retrieves a list of network posts from a remote source using the specified IO dispatcher."},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/-network-data-source-impl/","title":"network data source impl","text":"<p>//network/dev.atick.network.data/NetworkDataSourceImpl/NetworkDataSourceImpl</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/-network-data-source-impl/#networkdatasourceimpl","title":"NetworkDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/-network-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackRestApi The JetpackRestApi instance."},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-post/","title":"Get post","text":"<p>//network/dev.atick.network.data/NetworkDataSourceImpl/getPost</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\ open suspend override fun getPost(id: Int): NetworkPost</p> <p>Retrieves a network post with the specified ID from the designated endpoint.</p> <p>This function uses the HTTP GET method to retrieve a single network post with the given ID from the \"/posts/{id}\" endpoint.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-post/#return","title":"Return","text":"<p>A NetworkPost object representing the retrieved network post.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the network post to retrieve."},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-posts/","title":"Get posts","text":"<p>//network/dev.atick.network.data/NetworkDataSourceImpl/getPosts</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-posts/#getposts","title":"getPosts","text":"<p>[androidJvm]\\ open suspend override fun getPosts(): List&lt;NetworkPost&gt;</p> <p>Retrieves a list of network posts from a remote source using the specified IO dispatcher.</p> <p>This function overrides the suspend function getPosts and fetches a list of network posts by invoking jetpackRestApi.getPosts() within the provided IO dispatcher context.</p>"},{"location":"network/network/dev.atick.network.data/-network-data-source-impl/get-posts/#return","title":"Return","text":"<p>A List of NetworkPost objects representing the retrieved network posts.</p>"},{"location":"network/network/dev.atick.network.di/","title":"Index","text":"<p>//network/dev.atick.network.di</p>"},{"location":"network/network/dev.atick.network.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.di/#types","title":"Types","text":"Name Summary ConnectivityManagerModule [androidJvm]@Moduleobject ConnectivityManagerModuleModule for providing ConnectivityManager. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleModule for providing NetworkDataSource. NetworkUtilsModule [androidJvm]@Moduleabstract class NetworkUtilsModuleModule for providing NetworkUtils. RestApiModule [androidJvm]@Module(includes = [RetrofitModule::class])object RestApiModuleModule for providing JetpackRestApi."},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/","title":"Index","text":"<p>//network/dev.atick.network.di/ConnectivityManagerModule</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/#connectivitymanagermodule","title":"ConnectivityManagerModule","text":"<p>[androidJvm]\\ @Module</p> <p>object ConnectivityManagerModule</p> <p>Module for providing ConnectivityManager.</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/#functions","title":"Functions","text":"Name Summary provideConnectivityManager [androidJvm]@Provides@Singletonfun provideConnectivityManager(context: Context): ConnectivityManagerProvides ConnectivityManager."},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/","title":"Provide connectivity manager","text":"<p>//network/dev.atick.network.di/ConnectivityManagerModule/provideConnectivityManager</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/#provideconnectivitymanager","title":"provideConnectivityManager","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideConnectivityManager(context: Context): ConnectivityManager</p> <p>Provides ConnectivityManager.</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/#return","title":"Return","text":"<p>ConnectivityManager.</p>"},{"location":"network/network/dev.atick.network.di/-connectivity-manager-module/provide-connectivity-manager/#parameters","title":"Parameters","text":"<p>androidJvm</p> context Context."},{"location":"network/network/dev.atick.network.di/-data-source-module/","title":"Index","text":"<p>//network/dev.atick.network.di/DataSourceModule</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Module for providing NetworkDataSource.</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"network/network/dev.atick.network.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindJetpackDataSource [androidJvm]@Binds@Singletonabstract fun bindJetpackDataSource(jetpackDataSourceImpl: NetworkDataSourceImpl): NetworkDataSourceBinds NetworkDataSourceImpl to NetworkDataSource."},{"location":"network/network/dev.atick.network.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//network/dev.atick.network.di/DataSourceModule/DataSourceModule</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/bind-jetpack-data-source/","title":"Bind jetpack data source","text":"<p>//network/dev.atick.network.di/DataSourceModule/bindJetpackDataSource</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/bind-jetpack-data-source/#bindjetpackdatasource","title":"bindJetpackDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindJetpackDataSource(jetpackDataSourceImpl: NetworkDataSourceImpl): NetworkDataSource</p> <p>Binds NetworkDataSourceImpl to NetworkDataSource.</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/bind-jetpack-data-source/#return","title":"Return","text":"<p>NetworkDataSource.</p>"},{"location":"network/network/dev.atick.network.di/-data-source-module/bind-jetpack-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDataSourceImpl NetworkDataSourceImpl."},{"location":"network/network/dev.atick.network.di/-network-utils-module/","title":"Index","text":"<p>//network/dev.atick.network.di/NetworkUtilsModule</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/#networkutilsmodule","title":"NetworkUtilsModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class NetworkUtilsModule</p> <p>Module for providing NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/#constructors","title":"Constructors","text":"NetworkUtilsModule [androidJvm]constructor()"},{"location":"network/network/dev.atick.network.di/-network-utils-module/#functions","title":"Functions","text":"Name Summary bindNetworkUtils [androidJvm]@Binds@Singletonabstract fun bindNetworkUtils(networkUtilsImpl: NetworkUtilsImpl): NetworkUtilsBinds NetworkUtilsImpl to NetworkUtils."},{"location":"network/network/dev.atick.network.di/-network-utils-module/-network-utils-module/","title":"network utils module","text":"<p>//network/dev.atick.network.di/NetworkUtilsModule/NetworkUtilsModule</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/-network-utils-module/#networkutilsmodule","title":"NetworkUtilsModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/","title":"Bind network utils","text":"<p>//network/dev.atick.network.di/NetworkUtilsModule/bindNetworkUtils</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/#bindnetworkutils","title":"bindNetworkUtils","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindNetworkUtils(networkUtilsImpl: NetworkUtilsImpl): NetworkUtils</p> <p>Binds NetworkUtilsImpl to NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/#return","title":"Return","text":"<p>NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.di/-network-utils-module/bind-network-utils/#parameters","title":"Parameters","text":"<p>androidJvm</p> networkUtilsImpl NetworkUtilsImpl."},{"location":"network/network/dev.atick.network.di/-rest-api-module/","title":"Index","text":"<p>//network/dev.atick.network.di/RestApiModule</p>"},{"location":"network/network/dev.atick.network.di/-rest-api-module/#restapimodule","title":"RestApiModule","text":"<p>[androidJvm]\\ @Module(includes = [RetrofitModule::class])</p> <p>object RestApiModule</p> <p>Module for providing JetpackRestApi.</p>"},{"location":"network/network/dev.atick.network.di/-rest-api-module/#functions","title":"Functions","text":"Name Summary provideApiService [androidJvm]@Singleton@Providesfun provideApiService(retrofit: Retrofit): JetpackRestApiProvides JetpackRestApi."},{"location":"network/network/dev.atick.network.di/-rest-api-module/provide-api-service/","title":"Provide api service","text":"<p>//network/dev.atick.network.di/RestApiModule/provideApiService</p>"},{"location":"network/network/dev.atick.network.di/-rest-api-module/provide-api-service/#provideapiservice","title":"provideApiService","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideApiService(retrofit: Retrofit): JetpackRestApi</p> <p>Provides JetpackRestApi.</p>"},{"location":"network/network/dev.atick.network.di/-rest-api-module/provide-api-service/#return","title":"Return","text":"<p>JetpackRestApi.</p>"},{"location":"network/network/dev.atick.network.di/-rest-api-module/provide-api-service/#parameters","title":"Parameters","text":"<p>androidJvm</p> retrofit Retrofit."},{"location":"network/network/dev.atick.network.di.coil/","title":"Index","text":"<p>//network/dev.atick.network.di.coil</p>"},{"location":"network/network/dev.atick.network.di.coil/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.di.coil/#types","title":"Types","text":"Name Summary CoilModule [androidJvm]@Moduleobject CoilModule"},{"location":"network/network/dev.atick.network.di.coil/-coil-module/","title":"Index","text":"<p>//network/dev.atick.network.di.coil/CoilModule</p>"},{"location":"network/network/dev.atick.network.di.coil/-coil-module/#coilmodule","title":"CoilModule","text":"<p>[androidJvm]\\ @Module</p> <p>object CoilModule</p>"},{"location":"network/network/dev.atick.network.di.coil/-coil-module/#functions","title":"Functions","text":"Name Summary provideImageLoader [androidJvm]@Provides@Singletonfun provideImageLoader(okHttpCallFactory: Call.Factory, application: Context): ImageLoaderSince we're displaying SVGs in the app, Coil needs an ImageLoader which supports this format. During Coil's initialization it will call <code>applicationContext.newImageLoader()</code> to obtain an ImageLoader."},{"location":"network/network/dev.atick.network.di.coil/-coil-module/provide-image-loader/","title":"Provide image loader","text":"<p>//network/dev.atick.network.di.coil/CoilModule/provideImageLoader</p>"},{"location":"network/network/dev.atick.network.di.coil/-coil-module/provide-image-loader/#provideimageloader","title":"provideImageLoader","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideImageLoader(okHttpCallFactory: Call.Factory, application: Context): ImageLoader</p> <p>Since we're displaying SVGs in the app, Coil needs an ImageLoader which supports this format. During Coil's initialization it will call <code>applicationContext.newImageLoader()</code> to obtain an ImageLoader.</p>"},{"location":"network/network/dev.atick.network.di.coil/-coil-module/provide-image-loader/#see-also","title":"See also","text":"Coil"},{"location":"network/network/dev.atick.network.di.okhttp/","title":"Index","text":"<p>//network/dev.atick.network.di.okhttp</p>"},{"location":"network/network/dev.atick.network.di.okhttp/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.di.okhttp/#types","title":"Types","text":"Name Summary InterceptorModule [androidJvm]@Moduleobject InterceptorModuleModule for providing interceptors. OkHttpClientModule [androidJvm]@Module(includes = [InterceptorModule::class])object OkHttpClientModuleModule for providing OkHttpClient."},{"location":"network/network/dev.atick.network.di.okhttp/-interceptor-module/","title":"Index","text":"<p>//network/dev.atick.network.di.okhttp/InterceptorModule</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-interceptor-module/#interceptormodule","title":"InterceptorModule","text":"<p>[androidJvm]\\ @Module</p> <p>object InterceptorModule</p> <p>Module for providing interceptors.</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-interceptor-module/#functions","title":"Functions","text":"Name Summary provideLoggingInterceptor [androidJvm]@Provides@Singletonfun provideLoggingInterceptor(): HttpLoggingInterceptorProvides HttpLoggingInterceptor."},{"location":"network/network/dev.atick.network.di.okhttp/-interceptor-module/provide-logging-interceptor/","title":"Provide logging interceptor","text":"<p>//network/dev.atick.network.di.okhttp/InterceptorModule/provideLoggingInterceptor</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-interceptor-module/provide-logging-interceptor/#providelogginginterceptor","title":"provideLoggingInterceptor","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideLoggingInterceptor(): HttpLoggingInterceptor</p> <p>Provides HttpLoggingInterceptor.</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-interceptor-module/provide-logging-interceptor/#return","title":"Return","text":"<p>HttpLoggingInterceptor.</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/","title":"Index","text":"<p>//network/dev.atick.network.di.okhttp/OkHttpClientModule</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/#okhttpclientmodule","title":"OkHttpClientModule","text":"<p>[androidJvm]\\ @Module(includes = [InterceptorModule::class])</p> <p>object OkHttpClientModule</p> <p>Module for providing OkHttpClient.</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/#functions","title":"Functions","text":"Name Summary provideOkHttpClient [androidJvm]@Singleton@Providesfun provideOkHttpClient(loggingInterceptor: HttpLoggingInterceptor): OkHttpClientProvides OkHttpClient."},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/","title":"Provide ok http client","text":"<p>//network/dev.atick.network.di.okhttp/OkHttpClientModule/provideOkHttpClient</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/#provideokhttpclient","title":"provideOkHttpClient","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideOkHttpClient(loggingInterceptor: HttpLoggingInterceptor): OkHttpClient</p> <p>Provides OkHttpClient.</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/#return","title":"Return","text":"<p>OkHttpClient.</p>"},{"location":"network/network/dev.atick.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/#parameters","title":"Parameters","text":"<p>androidJvm</p> loggingInterceptor HttpLoggingInterceptor."},{"location":"network/network/dev.atick.network.di.retrofit/","title":"Index","text":"<p>//network/dev.atick.network.di.retrofit</p>"},{"location":"network/network/dev.atick.network.di.retrofit/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.di.retrofit/#types","title":"Types","text":"Name Summary ConverterModule [androidJvm]@Moduleobject ConverterModuleModule for providing Converter.Factory. RetrofitModule [androidJvm]@Module(includes = [OkHttpClientModule::class])object RetrofitModuleModule for providing Retrofit."},{"location":"network/network/dev.atick.network.di.retrofit/-converter-module/","title":"Index","text":"<p>//network/dev.atick.network.di.retrofit/ConverterModule</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-converter-module/#convertermodule","title":"ConverterModule","text":"<p>[androidJvm]\\ @Module</p> <p>object ConverterModule</p> <p>Module for providing Converter.Factory.</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-converter-module/#functions","title":"Functions","text":"Name Summary provideConverter [androidJvm]@Provides@Singletonfun provideConverter(): Converter.FactoryProvides kotlinx.serialization Converter.Factory."},{"location":"network/network/dev.atick.network.di.retrofit/-converter-module/provide-converter/","title":"Provide converter","text":"<p>//network/dev.atick.network.di.retrofit/ConverterModule/provideConverter</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-converter-module/provide-converter/#provideconverter","title":"provideConverter","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideConverter(): Converter.Factory</p> <p>Provides kotlinx.serialization Converter.Factory.</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-converter-module/provide-converter/#return","title":"Return","text":"<p>Converter.Factory.</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/","title":"Index","text":"<p>//network/dev.atick.network.di.retrofit/RetrofitModule</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/#retrofitmodule","title":"RetrofitModule","text":"<p>[androidJvm]\\ @Module(includes = [OkHttpClientModule::class])</p> <p>object RetrofitModule</p> <p>Module for providing Retrofit.</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/#functions","title":"Functions","text":"Name Summary provideRetrofitClient [androidJvm]@Singleton@Providesfun provideRetrofitClient(converterFactory: Converter.Factory, okHttpClient: OkHttpClient): RetrofitProvides Retrofit."},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/provide-retrofit-client/","title":"Provide retrofit client","text":"<p>//network/dev.atick.network.di.retrofit/RetrofitModule/provideRetrofitClient</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/provide-retrofit-client/#provideretrofitclient","title":"provideRetrofitClient","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideRetrofitClient(converterFactory: Converter.Factory, okHttpClient: OkHttpClient): Retrofit</p> <p>Provides Retrofit.</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/provide-retrofit-client/#return","title":"Return","text":"<p>Retrofit.</p>"},{"location":"network/network/dev.atick.network.di.retrofit/-retrofit-module/provide-retrofit-client/#parameters","title":"Parameters","text":"<p>androidJvm</p> converterFactory Converter.Factory. okHttpClient OkHttpClient."},{"location":"network/network/dev.atick.network.models/","title":"Index","text":"<p>//network/dev.atick.network.models</p>"},{"location":"network/network/dev.atick.network.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.models/#types","title":"Types","text":"Name Summary NetworkPost [androidJvm]@Serializabledata class NetworkPost(val id: Int, val title: String, val url: String, val thumbnailUrl: String)Data class representing a network post retrieved from a remote source."},{"location":"network/network/dev.atick.network.models/-network-post/","title":"Index","text":"<p>//network/dev.atick.network.models/NetworkPost</p>"},{"location":"network/network/dev.atick.network.models/-network-post/#networkpost","title":"NetworkPost","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class NetworkPost(val id: Int, val title: String, val url: String, val thumbnailUrl: String)</p> <p>Data class representing a network post retrieved from a remote source.</p>"},{"location":"network/network/dev.atick.network.models/-network-post/#constructors","title":"Constructors","text":"NetworkPost [androidJvm]constructor(id: Int, title: String, url: String, thumbnailUrl: String)"},{"location":"network/network/dev.atick.network.models/-network-post/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: IntThe unique identifier of the network post. thumbnailUrl [androidJvm]val thumbnailUrl: StringThe URL of the thumbnail image associated with the network post. title [androidJvm]val title: StringThe title of the network post. url [androidJvm]val url: StringThe URL associated with the network post."},{"location":"network/network/dev.atick.network.models/-network-post/-network-post/","title":"network post","text":"<p>//network/dev.atick.network.models/NetworkPost/NetworkPost</p>"},{"location":"network/network/dev.atick.network.models/-network-post/-network-post/#networkpost","title":"NetworkPost","text":"<p>[androidJvm]\\ constructor(id: Int, title: String, url: String, thumbnailUrl: String)</p>"},{"location":"network/network/dev.atick.network.models/-network-post/id/","title":"Id","text":"<p>//network/dev.atick.network.models/NetworkPost/id</p>"},{"location":"network/network/dev.atick.network.models/-network-post/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Int</p>"},{"location":"network/network/dev.atick.network.models/-network-post/thumbnail-url/","title":"Thumbnail url","text":"<p>//network/dev.atick.network.models/NetworkPost/thumbnailUrl</p>"},{"location":"network/network/dev.atick.network.models/-network-post/thumbnail-url/#thumbnailurl","title":"thumbnailUrl","text":"<p>[androidJvm]\\ val thumbnailUrl: String</p>"},{"location":"network/network/dev.atick.network.models/-network-post/title/","title":"Title","text":"<p>//network/dev.atick.network.models/NetworkPost/title</p>"},{"location":"network/network/dev.atick.network.models/-network-post/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: String</p>"},{"location":"network/network/dev.atick.network.models/-network-post/url/","title":"Url","text":"<p>//network/dev.atick.network.models/NetworkPost/url</p>"},{"location":"network/network/dev.atick.network.models/-network-post/url/#url","title":"url","text":"<p>[androidJvm]\\ val url: String</p>"},{"location":"network/network/dev.atick.network.utils/","title":"Index","text":"<p>//network/dev.atick.network.utils</p>"},{"location":"network/network/dev.atick.network.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"network/network/dev.atick.network.utils/#types","title":"Types","text":"Name Summary NetworkState [androidJvm]enum NetworkState : Enum&lt;NetworkState&gt; Network state. NetworkUtils [androidJvm]interface NetworkUtilsNetwork utils. NetworkUtilsImpl [androidJvm]class NetworkUtilsImpl@Injectconstructor(connectivityManager: ConnectivityManager) : NetworkUtilsImplementation of NetworkUtils."},{"location":"network/network/dev.atick.network.utils/-network-state/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/#networkstate","title":"NetworkState","text":"<p>enum NetworkState : Enum&lt;NetworkState&gt; </p> <p>Network state.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> description StringRes description."},{"location":"network/network/dev.atick.network.utils/-network-state/#entries","title":"Entries","text":"CONNECTED [androidJvm]CONNECTEDNetwork is connected. LOSING [androidJvm]LOSINGNetwork is connecting. LOST [androidJvm]LOSTNetwork is disconnected. UNAVAILABLE [androidJvm]UNAVAILABLENetwork is unavailable."},{"location":"network/network/dev.atick.network.utils/-network-state/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int entries [androidJvm]val entries: EnumEntries&lt;NetworkState&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): NetworkStateReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;NetworkState&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"network/network/dev.atick.network.utils/-network-state/description/","title":"Description","text":"<p>//network/dev.atick.network.utils/NetworkState/description</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/description/#description","title":"description","text":"<p>[androidJvm]\\ val description: Int</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/description/#parameters","title":"Parameters","text":"<p>androidJvm</p> description StringRes description."},{"location":"network/network/dev.atick.network.utils/-network-state/entries/","title":"Entries","text":"<p>//network/dev.atick.network.utils/NetworkState/entries</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;NetworkState&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/value-of/","title":"Value of","text":"<p>//network/dev.atick.network.utils/NetworkState/valueOf</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): NetworkState</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"network/network/dev.atick.network.utils/-network-state/values/","title":"Values","text":"<p>//network/dev.atick.network.utils/NetworkState/values</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;NetworkState&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/CONNECTED</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/#connected","title":"CONNECTED","text":"<p>[androidJvm]\\ CONNECTED</p> <p>Network is connected.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-i-n-g/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/LOSING</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-i-n-g/#losing","title":"LOSING","text":"<p>[androidJvm]\\ LOSING</p> <p>Network is connecting.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-i-n-g/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-t/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/LOST</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-t/#lost","title":"LOST","text":"<p>[androidJvm]\\ LOST</p> <p>Network is disconnected.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-l-o-s-t/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkState/UNAVAILABLE</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/#unavailable","title":"UNAVAILABLE","text":"<p>[androidJvm]\\ UNAVAILABLE</p> <p>Network is unavailable.</p>"},{"location":"network/network/dev.atick.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"network/network/dev.atick.network.utils/-network-utils/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkUtils</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils/#networkutils","title":"NetworkUtils","text":"<p>interface NetworkUtils</p> <p>Network utils.</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils/#inheritors","title":"Inheritors","text":"NetworkUtilsImpl"},{"location":"network/network/dev.atick.network.utils/-network-utils/#properties","title":"Properties","text":"Name Summary currentState [androidJvm]abstract val currentState: Flow&lt;NetworkState&gt;Current network state as Flow."},{"location":"network/network/dev.atick.network.utils/-network-utils/current-state/","title":"Current state","text":"<p>//network/dev.atick.network.utils/NetworkUtils/currentState</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils/current-state/#currentstate","title":"currentState","text":"<p>[androidJvm]\\ abstract val currentState: Flow&lt;NetworkState&gt;</p> <p>Current network state as Flow.</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/","title":"Index","text":"<p>//network/dev.atick.network.utils/NetworkUtilsImpl</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#networkutilsimpl","title":"NetworkUtilsImpl","text":"<p>class NetworkUtilsImpl@Injectconstructor(connectivityManager: ConnectivityManager) : NetworkUtils</p> <p>Implementation of NetworkUtils.</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> connectivityManager ConnectivityManager."},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#constructors","title":"Constructors","text":"NetworkUtilsImpl [androidJvm]@Injectconstructor(connectivityManager: ConnectivityManager)"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/#properties","title":"Properties","text":"Name Summary currentState [androidJvm]open override val currentState: Flow&lt;NetworkState&gt;Current network state as Flow."},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/-network-utils-impl/","title":"network utils impl","text":"<p>//network/dev.atick.network.utils/NetworkUtilsImpl/NetworkUtilsImpl</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/-network-utils-impl/#networkutilsimpl","title":"NetworkUtilsImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(connectivityManager: ConnectivityManager)</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/-network-utils-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> connectivityManager ConnectivityManager."},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/current-state/","title":"Current state","text":"<p>//network/dev.atick.network.utils/NetworkUtilsImpl/currentState</p>"},{"location":"network/network/dev.atick.network.utils/-network-utils-impl/current-state/#currentstate","title":"currentState","text":"<p>[androidJvm]\\ open override val currentState: Flow&lt;NetworkState&gt;</p> <p>Current network state as Flow.</p>"},{"location":"settings/","title":"Index","text":"<p>//settings</p>"},{"location":"settings/#settings","title":"settings","text":""},{"location":"settings/#packages","title":"Packages","text":"Name dev.atick.settings.data dev.atick.settings.di dev.atick.settings.repository dev.atick.settings.ui"},{"location":"settings/settings/dev.atick.settings.data/","title":"Index","text":"<p>//settings/dev.atick.settings.data</p>"},{"location":"settings/settings/dev.atick.settings.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"settings/settings/dev.atick.settings.data/#types","title":"Types","text":"Name Summary UserSettings [androidJvm]data class UserSettings(val userName: String? = null, val useDynamicColor: Boolean = true, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)Data class representing editable user settings related to themes and appearance."},{"location":"settings/settings/dev.atick.settings.data/-user-settings/","title":"Index","text":"<p>//settings/dev.atick.settings.data/UserSettings</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/#usersettings","title":"UserSettings","text":"<p>[androidJvm]\\ data class UserSettings(val userName: String? = null, val useDynamicColor: Boolean = true, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)</p> <p>Data class representing editable user settings related to themes and appearance.</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/#constructors","title":"Constructors","text":"UserSettings [androidJvm]constructor(userName: String? = null, useDynamicColor: Boolean = true, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)Creates a UserSettings instance with optional parameters."},{"location":"settings/settings/dev.atick.settings.data/-user-settings/#properties","title":"Properties","text":"Name Summary darkThemeConfig [androidJvm]val darkThemeConfig: DarkThemeConfigConfiguration for the dark theme. useDynamicColor [androidJvm]val useDynamicColor: Boolean = trueIndicates whether dynamic colors are enabled. userName [androidJvm]val userName: String? = null"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/-user-settings/","title":"user settings","text":"<p>//settings/dev.atick.settings.data/UserSettings/UserSettings</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/-user-settings/#usersettings","title":"UserSettings","text":"<p>[androidJvm]\\ constructor(userName: String? = null, useDynamicColor: Boolean = true, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)</p> <p>Creates a UserSettings instance with optional parameters.</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/dark-theme-config/","title":"Dark theme config","text":"<p>//settings/dev.atick.settings.data/UserSettings/darkThemeConfig</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/dark-theme-config/#darkthemeconfig","title":"darkThemeConfig","text":"<p>[androidJvm]\\ val darkThemeConfig: DarkThemeConfig</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/use-dynamic-color/","title":"Use dynamic color","text":"<p>//settings/dev.atick.settings.data/UserSettings/useDynamicColor</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/use-dynamic-color/#usedynamiccolor","title":"useDynamicColor","text":"<p>[androidJvm]\\ val useDynamicColor: Boolean = true</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/user-name/","title":"User name","text":"<p>//settings/dev.atick.settings.data/UserSettings/userName</p>"},{"location":"settings/settings/dev.atick.settings.data/-user-settings/user-name/#username","title":"userName","text":"<p>[androidJvm]\\ val userName: String? = null</p>"},{"location":"settings/settings/dev.atick.settings.di/","title":"Index","text":"<p>//settings/dev.atick.settings.di</p>"},{"location":"settings/settings/dev.atick.settings.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"settings/settings/dev.atick.settings.di/#types","title":"Types","text":"Name Summary RepositoryModule [androidJvm]@Moduleabstract class RepositoryModuleDagger module for providing repository dependencies."},{"location":"settings/settings/dev.atick.settings.di/-repository-module/","title":"Index","text":"<p>//settings/dev.atick.settings.di/RepositoryModule</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class RepositoryModule</p> <p>Dagger module for providing repository dependencies.</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/#constructors","title":"Constructors","text":"RepositoryModule [androidJvm]constructor()"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/#functions","title":"Functions","text":"Name Summary bindSettingsRepository [androidJvm]@Binds@Singletonabstract fun bindSettingsRepository(settingsRepositoryImpl: SettingsRepositoryImpl): SettingsRepositoryBinds the SettingsRepositoryImpl implementation to the SettingsRepository interface."},{"location":"settings/settings/dev.atick.settings.di/-repository-module/-repository-module/","title":"repository module","text":"<p>//settings/dev.atick.settings.di/RepositoryModule/RepositoryModule</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/bind-settings-repository/","title":"Bind settings repository","text":"<p>//settings/dev.atick.settings.di/RepositoryModule/bindSettingsRepository</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/bind-settings-repository/#bindsettingsrepository","title":"bindSettingsRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindSettingsRepository(settingsRepositoryImpl: SettingsRepositoryImpl): SettingsRepository</p> <p>Binds the SettingsRepositoryImpl implementation to the SettingsRepository interface.</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/bind-settings-repository/#return","title":"Return","text":"<p>The SettingsRepository interface.</p>"},{"location":"settings/settings/dev.atick.settings.di/-repository-module/bind-settings-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepositoryImpl The implementation of SettingsRepository to be bound."},{"location":"settings/settings/dev.atick.settings.repository/","title":"Index","text":"<p>//settings/dev.atick.settings.repository</p>"},{"location":"settings/settings/dev.atick.settings.repository/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"settings/settings/dev.atick.settings.repository/#types","title":"Types","text":"Name Summary SettingsRepository [androidJvm]interface SettingsRepositoryInterface defining methods to interact with user data and preferences. SettingsRepositoryImpl [androidJvm]class SettingsRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : SettingsRepositoryImplementation of dev.atick.settings.repository.SettingsRepository that utilizes UserPreferencesDataSource to manage user data and preferences."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/","title":"Index","text":"<p>//settings/dev.atick.settings.repository/SettingsRepository</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/#settingsrepository","title":"SettingsRepository","text":"<p>interface SettingsRepository</p> <p>Interface defining methods to interact with user data and preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/#inheritors","title":"Inheritors","text":"SettingsRepositoryImpl"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/#properties","title":"Properties","text":"Name Summary userData [androidJvm]abstract val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;Sets the dynamic color preferences in the user preferences. setUserProfile [androidJvm]abstract suspend fun setUserProfile(profile: Profile): Result&lt;Unit&gt;Sets the user ID in the user preferences. signOut [androidJvm]abstract suspend fun signOut(): Result&lt;Unit&gt;Suspend function to sign the user out."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//settings/dev.atick.settings.repository/SettingsRepository/setDarkThemeConfig</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dark-theme-config/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//settings/dev.atick.settings.repository/SettingsRepository/setDynamicColorPreference</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dynamic-color-preference/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-user-profile/","title":"Set user profile","text":"<p>//settings/dev.atick.settings.repository/SettingsRepository/setUserProfile</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-user-profile/#setuserprofile","title":"setUserProfile","text":"<p>[androidJvm]\\ abstract suspend fun setUserProfile(profile: Profile): Result&lt;Unit&gt;</p> <p>Sets the user ID in the user preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-user-profile/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/set-user-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user ID to be set."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/sign-out/","title":"Sign out","text":"<p>//settings/dev.atick.settings.repository/SettingsRepository/signOut</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ abstract suspend fun signOut(): Result&lt;Unit&gt;</p> <p>Suspend function to sign the user out.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/sign-out/#return","title":"Return","text":"<p>A Result representing the sign-out operation result. It contains Unit if the sign-out was successful, or an error if there was a problem.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/user-data/","title":"User data","text":"<p>//settings/dev.atick.settings.repository/SettingsRepository/userData</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ abstract val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/","title":"Index","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/#settingsrepositoryimpl","title":"SettingsRepositoryImpl","text":"<p>[androidJvm]\\ class SettingsRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : SettingsRepository</p> <p>Implementation of dev.atick.settings.repository.SettingsRepository that utilizes UserPreferencesDataSource to manage user data and preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/#constructors","title":"Constructors","text":"SettingsRepositoryImpl [androidJvm]@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/#properties","title":"Properties","text":"Name Summary userData [androidJvm]open override val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;Sets the dynamic color preferences in the user preferences. setUserProfile [androidJvm]open suspend override fun setUserProfile(profile: Profile): Result&lt;Unit&gt;Sets the user Profile in the user preferences. signOut [androidJvm]open suspend override fun signOut(): Result&lt;Unit&gt;Suspend function to sign the user out."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/-settings-repository-impl/","title":"settings repository impl","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl/SettingsRepositoryImpl</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/-settings-repository-impl/#settingsrepositoryimpl","title":"SettingsRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl/setDarkThemeConfig</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dark-theme-config/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl/setDynamicColorPreference</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dynamic-color-preference/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-user-profile/","title":"Set user profile","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl/setUserProfile</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-user-profile/#setuserprofile","title":"setUserProfile","text":"<p>[androidJvm]\\ open suspend override fun setUserProfile(profile: Profile): Result&lt;Unit&gt;</p> <p>Sets the user Profile in the user preferences.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-user-profile/#return","title":"Return","text":"<p>Result indicating the success or failure of the operation.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/set-user-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user Profile to be set."},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/sign-out/","title":"Sign out","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl/signOut</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ open suspend override fun signOut(): Result&lt;Unit&gt;</p> <p>Suspend function to sign the user out.</p> <p>This function signs the user out by delegating to the AuthDataSource and then updates the user's profile data in UserPreferencesDataSource.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/sign-out/#return","title":"Return","text":"<p>A Result representing the sign-out operation result. It contains Unit if the sign-out was successful, or an error if there was a problem.</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/user-data/","title":"User data","text":"<p>//settings/dev.atick.settings.repository/SettingsRepositoryImpl/userData</p>"},{"location":"settings/settings/dev.atick.settings.repository/-settings-repository-impl/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ open override val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"settings/settings/dev.atick.settings.ui/","title":"Index","text":"<p>//settings/dev.atick.settings.ui</p>"},{"location":"settings/settings/dev.atick.settings.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"settings/settings/dev.atick.settings.ui/#types","title":"Types","text":"Name Summary SettingsViewModel [androidJvm]class SettingsViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModel"},{"location":"settings/settings/dev.atick.settings.ui/#functions","title":"Functions","text":"Name Summary SettingsDialog [androidJvm]@Composablefun SettingsDialog(onDismiss: () -&gt; Unit, viewModel: SettingsViewModel = hiltViewModel())@Composablefun SettingsDialog(settingsUiState: UiState&lt;UserSettings&gt;, supportDynamicColor: Boolean = supportsDynamicTheming(), onDismiss: () -&gt; Unit, onChangeDynamicColorPreference: (useDynamicColor: Boolean) -&gt; Unit, onChangeDarkThemeConfig: (darkThemeConfig: DarkThemeConfig) -&gt; Unit, onSignOut: () -&gt; Unit) SettingsDialogThemeChooserRow [androidJvm]@Composablefun SettingsDialogThemeChooserRow(text: String, selected: Boolean, onClick: () -&gt; Unit)"},{"location":"settings/settings/dev.atick.settings.ui/-settings-dialog-theme-chooser-row/","title":"settings dialog theme chooser row","text":"<p>//settings/dev.atick.settings.ui/SettingsDialogThemeChooserRow</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-dialog-theme-chooser-row/#settingsdialogthemechooserrow","title":"SettingsDialogThemeChooserRow","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SettingsDialogThemeChooserRow(text: String, selected: Boolean, onClick: () -&gt; Unit)</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-dialog/","title":"settings dialog","text":"<p>//settings/dev.atick.settings.ui/SettingsDialog</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-dialog/#settingsdialog","title":"SettingsDialog","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SettingsDialog(onDismiss: () -&gt; Unit, viewModel: SettingsViewModel = hiltViewModel())</p> <p>@Composable</p> <p>fun SettingsDialog(settingsUiState: UiState&lt;UserSettings&gt;, supportDynamicColor: Boolean = supportsDynamicTheming(), onDismiss: () -&gt; Unit, onChangeDynamicColorPreference: (useDynamicColor: Boolean) -&gt; Unit, onChangeDarkThemeConfig: (darkThemeConfig: DarkThemeConfig) -&gt; Unit, onSignOut: () -&gt; Unit)</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/","title":"Index","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/#settingsviewmodel","title":"SettingsViewModel","text":"<p>[androidJvm]\\ class SettingsViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModel</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/#constructors","title":"Constructors","text":"SettingsViewModel [androidJvm]@Injectconstructor(settingsRepository: SettingsRepository)"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/#properties","title":"Properties","text":"Name Summary settingsUiState [androidJvm]val settingsUiState: StateFlow&lt;UiState&lt;UserSettings&gt;&gt;"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? signOut [androidJvm]fun signOut() updateDarkThemeConfig [androidJvm]fun updateDarkThemeConfig(darkThemeConfig: DarkThemeConfig) updateDynamicColorPreference [androidJvm]fun updateDynamicColorPreference(useDynamicColor: Boolean) updateUserData [androidJvm]fun updateUserData()"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/-settings-view-model/","title":"settings view model","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel/SettingsViewModel</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/-settings-view-model/#settingsviewmodel","title":"SettingsViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(settingsRepository: SettingsRepository)</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/settings-ui-state/","title":"Settings ui state","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel/settingsUiState</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/settings-ui-state/#settingsuistate","title":"settingsUiState","text":"<p>[androidJvm]\\ val settingsUiState: StateFlow&lt;UiState&lt;UserSettings&gt;&gt;</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/sign-out/","title":"Sign out","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel/signOut</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ fun signOut()</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/update-dark-theme-config/","title":"Update dark theme config","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel/updateDarkThemeConfig</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/update-dark-theme-config/#updatedarkthemeconfig","title":"updateDarkThemeConfig","text":"<p>[androidJvm]\\ fun updateDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/update-dynamic-color-preference/","title":"Update dynamic color preference","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel/updateDynamicColorPreference</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/update-dynamic-color-preference/#updatedynamiccolorpreference","title":"updateDynamicColorPreference","text":"<p>[androidJvm]\\ fun updateDynamicColorPreference(useDynamicColor: Boolean)</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/update-user-data/","title":"Update user data","text":"<p>//settings/dev.atick.settings.ui/SettingsViewModel/updateUserData</p>"},{"location":"settings/settings/dev.atick.settings.ui/-settings-view-model/update-user-data/#updateuserdata","title":"updateUserData","text":"<p>[androidJvm]\\ fun updateUserData()</p>"},{"location":"storage/preferences/","title":"Index","text":"<p>//preferences</p>"},{"location":"storage/preferences/#preferences","title":"preferences","text":""},{"location":"storage/preferences/#packages","title":"Packages","text":"Name dev.atick.storage.preferences.data dev.atick.storage.preferences.di dev.atick.storage.preferences.models dev.atick.storage.preferences.utils"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.data</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/#types","title":"Types","text":"Name Summary UserPreferencesDataSource [androidJvm]interface UserPreferencesDataSourceInterface defining methods to interact with user preferences data source. UserPreferencesDataSourceImpl [androidJvm]class UserPreferencesDataSourceImpl@Injectconstructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher) : UserPreferencesDataSourceImplementation of the UserPreferencesDataSource interface using DataStore to manage user preferences."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#userpreferencesdatasource","title":"UserPreferencesDataSource","text":"<p>interface UserPreferencesDataSource</p> <p>Interface defining methods to interact with user preferences data source.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#inheritors","title":"Inheritors","text":"UserPreferencesDataSourceImpl"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#properties","title":"Properties","text":"Name Summary userData [androidJvm]abstract val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean)Sets the dynamic color preferences in the user preferences. setProfile [androidJvm]abstract suspend fun setProfile(profile: Profile)Sets the user profile in the user preferences."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setDarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setDynamicColorPreference</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean)</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-profile/","title":"Set profile","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/setProfile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-profile/#setprofile","title":"setProfile","text":"<p>[androidJvm]\\ abstract suspend fun setProfile(profile: Profile)</p> <p>Sets the user profile in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/set-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user ID to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/user-data/","title":"User data","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSource/userData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ abstract val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#userpreferencesdatasourceimpl","title":"UserPreferencesDataSourceImpl","text":"<p>[androidJvm]\\ class UserPreferencesDataSourceImpl@Injectconstructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher) : UserPreferencesDataSource</p> <p>Implementation of the UserPreferencesDataSource interface using DataStore to manage user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#constructors","title":"Constructors","text":"UserPreferencesDataSourceImpl [androidJvm]@Injectconstructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher)"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#properties","title":"Properties","text":"Name Summary userData [androidJvm]open override val userData: Flow&lt;UserData&gt;A Flow that emits UserData representing user-specific data."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean)Sets the dynamic color preferences in the user preferences. setProfile [androidJvm]open suspend override fun setProfile(profile: Profile)Sets the user profile in the user preferences."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/-user-preferences-data-source-impl/","title":"user preferences data source impl","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/UserPreferencesDataSourceImpl</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/-user-preferences-data-source-impl/#userpreferencesdatasourceimpl","title":"UserPreferencesDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(datastore: DataStore&lt;UserData&gt;, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setDarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setDynamicColorPreference</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean)</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-profile/","title":"Set profile","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/setProfile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-profile/#setprofile","title":"setProfile","text":"<p>[androidJvm]\\ open suspend override fun setProfile(profile: Profile)</p> <p>Sets the user profile in the user preferences.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/set-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> profile The user Profile to be set."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/user-data/","title":"User data","text":"<p>//preferences/dev.atick.storage.preferences.data/UserPreferencesDataSourceImpl/userData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.data/-user-preferences-data-source-impl/user-data/#userdata","title":"userData","text":"<p>[androidJvm]\\ open override val userData: Flow&lt;UserData&gt;</p> <p>A Flow that emits UserData representing user-specific data.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.di</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/#types","title":"Types","text":"Name Summary DatastoreModule [androidJvm]@Moduleobject DatastoreModuleDatastore module PreferencesDataSourceModule [androidJvm]@Moduleabstract class PreferencesDataSourceModulePreferences DataSource module"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.di/DatastoreModule</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/#datastoremodule","title":"DatastoreModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DatastoreModule</p> <p>Datastore module</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/#functions","title":"Functions","text":"Name Summary providePreferencesDataStore [androidJvm]@Singleton@Providesfun providePreferencesDataStore(appContext: Context, ioDispatcher: CoroutineDispatcher): DataStore&lt;UserData&gt;Provide preferences datastore"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/","title":"Provide preferences data store","text":"<p>//preferences/dev.atick.storage.preferences.di/DatastoreModule/providePreferencesDataStore</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/#providepreferencesdatastore","title":"providePreferencesDataStore","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun providePreferencesDataStore(appContext: Context, ioDispatcher: CoroutineDispatcher): DataStore&lt;UserData&gt;</p> <p>Provide preferences datastore</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/#return","title":"Return","text":"<p>DataStore</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-datastore-module/provide-preferences-data-store/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext application context"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.di/PreferencesDataSourceModule</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/#preferencesdatasourcemodule","title":"PreferencesDataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class PreferencesDataSourceModule</p> <p>Preferences DataSource module</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/#constructors","title":"Constructors","text":"PreferencesDataSourceModule [androidJvm]constructor()"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/#functions","title":"Functions","text":"Name Summary bindUserPreferencesDataSource [androidJvm]@Binds@Singletonabstract fun bindUserPreferencesDataSource(userPreferencesDataSourceImpl: UserPreferencesDataSourceImpl): UserPreferencesDataSourceBind preferences datasource"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/-preferences-data-source-module/","title":"preferences data source module","text":"<p>//preferences/dev.atick.storage.preferences.di/PreferencesDataSourceModule/PreferencesDataSourceModule</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/-preferences-data-source-module/#preferencesdatasourcemodule","title":"PreferencesDataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/","title":"Bind user preferences data source","text":"<p>//preferences/dev.atick.storage.preferences.di/PreferencesDataSourceModule/bindUserPreferencesDataSource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#binduserpreferencesdatasource","title":"bindUserPreferencesDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindUserPreferencesDataSource(userPreferencesDataSourceImpl: UserPreferencesDataSourceImpl): UserPreferencesDataSource</p> <p>Bind preferences datasource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#return","title":"Return","text":"<p>UserPreferencesDataSource</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSourceImpl PreferencesDatastoreImpl"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/#types","title":"Types","text":"Name Summary DarkThemeConfig [androidJvm]@Serializableenum DarkThemeConfig : Enum&lt;DarkThemeConfig&gt; Enum class representing configuration options for the dark theme. Profile [androidJvm]@Serializabledata class Profile(val id: String = String(), val name: String = String(), val profilePictureUriString: String? = null)Represents a user profile. UserData [androidJvm]@Serializabledata class UserData(val id: String = String(), val name: String? = null, val profilePictureUriString: String? = null, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, val useDynamicColor: Boolean = true)Represents user data."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#darkthemeconfig","title":"DarkThemeConfig","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum DarkThemeConfig : Enum&lt;DarkThemeConfig&gt; </p> <p>Enum class representing configuration options for the dark theme.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#entries","title":"Entries","text":"FOLLOW_SYSTEM [androidJvm]FOLLOW_SYSTEM LIGHT [androidJvm]LIGHT DARK [androidJvm]DARK"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;DarkThemeConfig&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): DarkThemeConfigReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;DarkThemeConfig&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/entries/","title":"Entries","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/entries</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;DarkThemeConfig&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/value-of/","title":"Value of","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/valueOf</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): DarkThemeConfig</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/values/","title":"Values","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/values</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;DarkThemeConfig&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-d-a-r-k/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/DARK</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-d-a-r-k/#dark","title":"DARK","text":"<p>[androidJvm]\\ DARK</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-d-a-r-k/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/FOLLOW_SYSTEM</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/#follow_system","title":"FOLLOW_SYSTEM","text":"<p>[androidJvm]\\ FOLLOW_SYSTEM</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-l-i-g-h-t/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/DarkThemeConfig/LIGHT</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-l-i-g-h-t/#light","title":"LIGHT","text":"<p>[androidJvm]\\ LIGHT</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-dark-theme-config/-l-i-g-h-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class Profile(val id: String = String(), val name: String = String(), val profilePictureUriString: String? = null)</p> <p>Represents a user profile.</p> <p>This data class is used for storing information about a user's profile.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/#constructors","title":"Constructors","text":"Profile [androidJvm]constructor(id: String = String(), name: String = String(), profilePictureUriString: String? = null)"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: StringThe unique identifier for the profile. Defaults to empty if not provided. name [androidJvm]val name: StringThe name of the user. Defaults to empty if not provided. profilePictureUriString [androidJvm]val profilePictureUriString: String? = nullThe URI string for the user's profile picture, if available. Defaults to <code>null</code> if not provided."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/-profile/","title":"profile","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/Profile</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ constructor(id: String = String(), name: String = String(), profilePictureUriString: String? = null)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/id/","title":"Id","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/id</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/name/","title":"Name","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/name</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/profile-picture-uri-string/","title":"Profile picture uri string","text":"<p>//preferences/dev.atick.storage.preferences.models/Profile/profilePictureUriString</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-profile/profile-picture-uri-string/#profilepictureuristring","title":"profilePictureUriString","text":"<p>[androidJvm]\\ val profilePictureUriString: String? = null</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/#userdata","title":"UserData","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class UserData(val id: String = String(), val name: String? = null, val profilePictureUriString: String? = null, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, val useDynamicColor: Boolean = true)</p> <p>Represents user data.</p> <p>This data class is used to store information about a user, including their ID, name, profile picture URI string, preferred theme brand, dark theme configuration, and dynamic color preference.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/#constructors","title":"Constructors","text":"UserData [androidJvm]constructor(id: String = String(), name: String? = null, profilePictureUriString: String? = null, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, useDynamicColor: Boolean = true)"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/#properties","title":"Properties","text":"Name Summary darkThemeConfig [androidJvm]val darkThemeConfig: DarkThemeConfigThe user's preferred dark theme configuration. Defaults to DarkThemeConfig.FOLLOW_SYSTEM. id [androidJvm]val id: StringThe unique identifier for the user. Defaults to empty if not provided. name [androidJvm]val name: String? = nullThe name of the user. Defaults to \"No Name\" if not provided. profilePictureUriString [androidJvm]val profilePictureUriString: String? = nullThe URI string for the user's profile picture, if available. Defaults to <code>null</code> if not provided. useDynamicColor [androidJvm]val useDynamicColor: Boolean = trueA boolean indicating whether the user prefers dynamic colors. Defaults to <code>true</code>."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/-user-data/","title":"user data","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/UserData</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/-user-data/#userdata","title":"UserData","text":"<p>[androidJvm]\\ constructor(id: String = String(), name: String? = null, profilePictureUriString: String? = null, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM, useDynamicColor: Boolean = true)</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/dark-theme-config/","title":"Dark theme config","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/darkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/dark-theme-config/#darkthemeconfig","title":"darkThemeConfig","text":"<p>[androidJvm]\\ val darkThemeConfig: DarkThemeConfig</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/id/","title":"Id","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/id</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/name/","title":"Name","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/name</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String? = null</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/profile-picture-uri-string/","title":"Profile picture uri string","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/profilePictureUriString</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/profile-picture-uri-string/#profilepictureuristring","title":"profilePictureUriString","text":"<p>[androidJvm]\\ val profilePictureUriString: String? = null</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/use-dynamic-color/","title":"Use dynamic color","text":"<p>//preferences/dev.atick.storage.preferences.models/UserData/useDynamicColor</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.models/-user-data/use-dynamic-color/#usedynamiccolor","title":"useDynamicColor","text":"<p>[androidJvm]\\ val useDynamicColor: Boolean = true</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/#types","title":"Types","text":"Name Summary DarkThemeConfigSerializer [androidJvm]object DarkThemeConfigSerializer : KSerializer&lt;DarkThemeConfig&gt; Custom serializer for serializing and deserializing DarkThemeConfig enums. UserDataSerializer [androidJvm]object UserDataSerializer : Serializer&lt;UserData&gt; Serializer implementation for serializing and deserializing UserData objects."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/#darkthemeconfigserializer","title":"DarkThemeConfigSerializer","text":"<p>[androidJvm]\\ object DarkThemeConfigSerializer : KSerializer&lt;DarkThemeConfig&gt; </p> <p>Custom serializer for serializing and deserializing DarkThemeConfig enums.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/#properties","title":"Properties","text":"Name Summary descriptor [androidJvm]open override val descriptor: SerialDescriptorThe descriptor for the serialized form of DarkThemeConfig."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/#functions","title":"Functions","text":"Name Summary deserialize [androidJvm]open override fun deserialize(decoder: Decoder): DarkThemeConfigDeserializes the string representation from the provided decoder and converts it to a DarkThemeConfig enum. serialize [androidJvm]open override fun serialize(encoder: Encoder, value: DarkThemeConfig)Serializes the provided value of DarkThemeConfig enum to a string representation."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/descriptor/","title":"Descriptor","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer/descriptor</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>[androidJvm]\\ open override val descriptor: SerialDescriptor</p> <p>The descriptor for the serialized form of DarkThemeConfig.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/","title":"Deserialize","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer/deserialize</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>[androidJvm]\\ open override fun deserialize(decoder: Decoder): DarkThemeConfig</p> <p>Deserializes the string representation from the provided decoder and converts it to a DarkThemeConfig enum.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/#return","title":"Return","text":"<p>The deserialized DarkThemeConfig enum value.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/deserialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> decoder The decoder to read the serialized data from."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/serialize/","title":"Serialize","text":"<p>//preferences/dev.atick.storage.preferences.utils/DarkThemeConfigSerializer/serialize</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/serialize/#serialize","title":"serialize","text":"<p>[androidJvm]\\ open override fun serialize(encoder: Encoder, value: DarkThemeConfig)</p> <p>Serializes the provided value of DarkThemeConfig enum to a string representation.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-dark-theme-config-serializer/serialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> encoder The encoder to write the serialized data to. value The DarkThemeConfig value to be serialized."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/","title":"Index","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/#userdataserializer","title":"UserDataSerializer","text":"<p>[androidJvm]\\ object UserDataSerializer : Serializer&lt;UserData&gt; </p> <p>Serializer implementation for serializing and deserializing UserData objects.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/#properties","title":"Properties","text":"Name Summary defaultValue [androidJvm]open override val defaultValue: UserDataThe default value of UserData to be used when deserialization fails."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/#functions","title":"Functions","text":"Name Summary readFrom [androidJvm]open suspend override fun readFrom(input: InputStream): UserDataReads a UserData object from the provided InputStream. writeTo [androidJvm]open suspend override fun writeTo(t: UserData, output: OutputStream)Writes a UserData object to the provided OutputStream."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/default-value/","title":"Default value","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer/defaultValue</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/default-value/#defaultvalue","title":"defaultValue","text":"<p>[androidJvm]\\ open override val defaultValue: UserData</p> <p>The default value of UserData to be used when deserialization fails.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/","title":"Read from","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer/readFrom</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#readfrom","title":"readFrom","text":"<p>[androidJvm]\\ open suspend override fun readFrom(input: InputStream): UserData</p> <p>Reads a UserData object from the provided InputStream.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#return","title":"Return","text":"<p>The deserialized UserData object.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#parameters","title":"Parameters","text":"<p>androidJvm</p> input The input stream to read data from."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/read-from/#throws","title":"Throws","text":"CorruptionException if there's an issue with deserialization."},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/write-to/","title":"Write to","text":"<p>//preferences/dev.atick.storage.preferences.utils/UserDataSerializer/writeTo</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/write-to/#writeto","title":"writeTo","text":"<p>[androidJvm]\\ open suspend override fun writeTo(t: UserData, output: OutputStream)</p> <p>Writes a UserData object to the provided OutputStream.</p>"},{"location":"storage/preferences/preferences/dev.atick.storage.preferences.utils/-user-data-serializer/write-to/#parameters","title":"Parameters","text":"<p>androidJvm</p> t The UserData object to be serialized. output The output stream to write data to."},{"location":"storage/room/","title":"Index","text":"<p>//room</p>"},{"location":"storage/room/#room","title":"room","text":""},{"location":"storage/room/#packages","title":"Packages","text":"Name dev.atick.storage.room.data dev.atick.storage.room.di dev.atick.storage.room.models"},{"location":"storage/room/room/dev.atick.storage.room.data/","title":"Index","text":"<p>//room/dev.atick.storage.room.data</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.data/#types","title":"Types","text":"Name Summary JetpackDao [androidJvm]interface JetpackDaoDAO for handling PostEntity operations. JetpackDatabase [androidJvm]abstract class JetpackDatabase : RoomDatabaseRoom database for Jetpack. LocalDataSource [androidJvm]interface LocalDataSourceData source interface for managing local storage operations related to PostEntity objects. LocalDataSourceImpl [androidJvm]class LocalDataSourceImpl@Injectconstructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher) : LocalDataSourceImplementation of LocalDataSource that interacts with the local storage using JetpackDao."},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/JetpackDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/#jetpackdao","title":"JetpackDao","text":"<p>[androidJvm]\\ interface JetpackDao</p> <p>DAO for handling PostEntity operations.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/#functions","title":"Functions","text":"Name Summary deleteAllPostEntities [androidJvm]abstract suspend fun deleteAllPostEntities()Delete all PostEntity items from the database. deletePostEntity [androidJvm]abstract suspend fun deletePostEntity(postEntity: PostEntity)Delete a PostEntity from the database. getPostEntities [androidJvm]abstract fun getPostEntities(): Flow&lt;List&lt;PostEntity&gt;&gt;Retrieve all PostEntity from the database. getPostEntity [androidJvm]abstract suspend fun getPostEntity(id: Int): PostEntity?Retrieve a PostEntity by ID. insertOrUpdatePostEntity [androidJvm]abstract suspend fun insertOrUpdatePostEntity(postEntity: PostEntity)Upsert operation (Insert an entity into the database. If the entity already exists, replace it.) upsertPostEntities [androidJvm]abstract suspend fun upsertPostEntities(postEntities: List&lt;PostEntity&gt;)Upsert operation (Insert a list of entities into the database. If an entity already exists, replace it.)"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/delete-all-post-entities/","title":"Delete all post entities","text":"<p>//room/dev.atick.storage.room.data/JetpackDao/deleteAllPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/delete-all-post-entities/#deleteallpostentities","title":"deleteAllPostEntities","text":"<p>[androidJvm]\\ abstract suspend fun deleteAllPostEntities()</p> <p>Delete all PostEntity items from the database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/delete-post-entity/","title":"Delete post entity","text":"<p>//room/dev.atick.storage.room.data/JetpackDao/deletePostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/delete-post-entity/#deletepostentity","title":"deletePostEntity","text":"<p>[androidJvm]\\ abstract suspend fun deletePostEntity(postEntity: PostEntity)</p> <p>Delete a PostEntity from the database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/delete-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntity The entity to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entities/","title":"Get post entities","text":"<p>//room/dev.atick.storage.room.data/JetpackDao/getPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entities/#getpostentities","title":"getPostEntities","text":"<p>[androidJvm]\\ abstract fun getPostEntities(): Flow&lt;List&lt;PostEntity&gt;&gt;</p> <p>Retrieve all PostEntity from the database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entities/#return","title":"Return","text":"<p>A Flow that emits the list of entities.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entity/","title":"Get post entity","text":"<p>//room/dev.atick.storage.room.data/JetpackDao/getPostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entity/#getpostentity","title":"getPostEntity","text":"<p>[androidJvm]\\ abstract suspend fun getPostEntity(id: Int): PostEntity?</p> <p>Retrieve a PostEntity by ID.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entity/#return","title":"Return","text":"<p>The entity with the given id, or null if no such entity exists.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/get-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The id of the entity."},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/insert-or-update-post-entity/","title":"Insert or update post entity","text":"<p>//room/dev.atick.storage.room.data/JetpackDao/insertOrUpdatePostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/insert-or-update-post-entity/#insertorupdatepostentity","title":"insertOrUpdatePostEntity","text":"<p>[androidJvm]\\ abstract suspend fun insertOrUpdatePostEntity(postEntity: PostEntity)</p> <p>Upsert operation (Insert an entity into the database. If the entity already exists, replace it.)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/insert-or-update-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntity The entity to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/upsert-post-entities/","title":"Upsert post entities","text":"<p>//room/dev.atick.storage.room.data/JetpackDao/upsertPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/upsert-post-entities/#upsertpostentities","title":"upsertPostEntities","text":"<p>[androidJvm]\\ abstract suspend fun upsertPostEntities(postEntities: List&lt;PostEntity&gt;)</p> <p>Upsert operation (Insert a list of entities into the database. If an entity already exists, replace it.)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-dao/upsert-post-entities/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntities The list of entities to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/JetpackDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/#jetpackdatabase","title":"JetpackDatabase","text":"<p>[androidJvm]\\ abstract class JetpackDatabase : RoomDatabase</p> <p>Room database for Jetpack.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/#constructors","title":"Constructors","text":"JetpackDatabase [androidJvm]constructor()"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/#properties","title":"Properties","text":"Name Summary backingFieldMap [androidJvm]val backingFieldMap: MutableMap&lt;String, Any&gt; invalidationTracker [androidJvm]open val invalidationTracker: InvalidationTracker isOpen [androidJvm]open val isOpen: Boolean isOpenInternal [androidJvm]val isOpenInternal: Boolean openHelper [androidJvm]open val openHelper: SupportSQLiteOpenHelper queryExecutor [androidJvm]open val queryExecutor: Executor suspendingTransactionId [androidJvm]val suspendingTransactionId: ThreadLocal&lt;Int&gt; transactionExecutor [androidJvm]open val transactionExecutor: Executor"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/#functions","title":"Functions","text":"Name Summary assertNotMainThread [androidJvm]open fun assertNotMainThread() assertNotSuspendingTransaction [androidJvm]open fun assertNotSuspendingTransaction() beginTransaction [androidJvm]open fun ~~beginTransaction~~() clearAllTables [androidJvm]abstract fun clearAllTables() close [androidJvm]open fun close() compileStatement [androidJvm]open fun compileStatement(sql: String): SupportSQLiteStatement endTransaction [androidJvm]open fun ~~endTransaction~~() getAutoMigrations [androidJvm]open fun getAutoMigrations(autoMigrationSpecs: Map&lt;Class&lt;out AutoMigrationSpec&gt;, AutoMigrationSpec&gt;): List&lt;Migration&gt; getJetpackDao [androidJvm]abstract fun getJetpackDao(): JetpackDaoGet the data access object for PostEntity entity. getRequiredAutoMigrationSpecs [androidJvm]open fun getRequiredAutoMigrationSpecs(): Set&lt;Class&lt;out AutoMigrationSpec&gt;&gt; getTypeConverter [androidJvm]open fun &lt;T&gt; getTypeConverter(klass: Class&lt;T&gt;): T? init [androidJvm]open fun init(configuration: DatabaseConfiguration) inTransaction [androidJvm]open fun inTransaction(): Boolean query [androidJvm]open fun query(query: SupportSQLiteQuery, signal: CancellationSignal?): Cursoropen fun query(query: String, args: Array&lt;out Any?&gt;?): Cursor runInTransaction [androidJvm]open fun runInTransaction(body: Runnable)open fun &lt;V&gt; runInTransaction(body: Callable&lt;V&gt;): V setTransactionSuccessful [androidJvm]open fun ~~setTransactionSuccessful~~()"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/-jetpack-database/","title":"jetpack database","text":"<p>//room/dev.atick.storage.room.data/JetpackDatabase/JetpackDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/-jetpack-database/#jetpackdatabase","title":"JetpackDatabase","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/get-jetpack-dao/","title":"Get jetpack dao","text":"<p>//room/dev.atick.storage.room.data/JetpackDatabase/getJetpackDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/get-jetpack-dao/#getjetpackdao","title":"getJetpackDao","text":"<p>[androidJvm]\\ abstract fun getJetpackDao(): JetpackDao</p> <p>Get the data access object for PostEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-jetpack-database/get-jetpack-dao/#return","title":"Return","text":"<p>The data access object for PostEntity entity.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/#localdatasource","title":"LocalDataSource","text":"<p>interface LocalDataSource</p> <p>Data source interface for managing local storage operations related to PostEntity objects.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/#inheritors","title":"Inheritors","text":"LocalDataSourceImpl"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/#functions","title":"Functions","text":"Name Summary deleteAllPostEntities [androidJvm]abstract suspend fun deleteAllPostEntities()Deletes all PostEntity objects from the local storage. deletePostEntity [androidJvm]abstract suspend fun deletePostEntity(postEntity: PostEntity)Deletes a PostEntity object from the local storage. getPostEntities [androidJvm]abstract fun getPostEntities(): Flow&lt;List&lt;PostEntity&gt;&gt;Retrieves a Flow of List of PostEntity objects from the local storage. getPostEntity [androidJvm]abstract suspend fun getPostEntity(id: Int): PostEntity?Retrieves a PostEntity object from the local storage based on its unique identifier. insertOrUpdatePostEntity [androidJvm]abstract suspend fun insertOrUpdatePostEntity(postEntity: PostEntity)Inserts or updates a PostEntity object in the local storage. upsertPostEntities [androidJvm]abstract suspend fun upsertPostEntities(postEntities: List&lt;PostEntity&gt;)Inserts or updates a list of PostEntity objects in the local storage."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/delete-all-post-entities/","title":"Delete all post entities","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource/deleteAllPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/delete-all-post-entities/#deleteallpostentities","title":"deleteAllPostEntities","text":"<p>[androidJvm]\\ abstract suspend fun deleteAllPostEntities()</p> <p>Deletes all PostEntity objects from the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/delete-post-entity/","title":"Delete post entity","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource/deletePostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/delete-post-entity/#deletepostentity","title":"deletePostEntity","text":"<p>[androidJvm]\\ abstract suspend fun deletePostEntity(postEntity: PostEntity)</p> <p>Deletes a PostEntity object from the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/delete-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntity The PostEntity object to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entities/","title":"Get post entities","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource/getPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entities/#getpostentities","title":"getPostEntities","text":"<p>[androidJvm]\\ abstract fun getPostEntities(): Flow&lt;List&lt;PostEntity&gt;&gt;</p> <p>Retrieves a Flow of List of PostEntity objects from the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entities/#return","title":"Return","text":"<p>A Flow emitting a list of PostEntity objects.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entity/","title":"Get post entity","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource/getPostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entity/#getpostentity","title":"getPostEntity","text":"<p>[androidJvm]\\ abstract suspend fun getPostEntity(id: Int): PostEntity?</p> <p>Retrieves a PostEntity object from the local storage based on its unique identifier.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entity/#return","title":"Return","text":"<p>The retrieved PostEntity object, or null if not found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/get-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the PostEntity to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/insert-or-update-post-entity/","title":"Insert or update post entity","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource/insertOrUpdatePostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/insert-or-update-post-entity/#insertorupdatepostentity","title":"insertOrUpdatePostEntity","text":"<p>[androidJvm]\\ abstract suspend fun insertOrUpdatePostEntity(postEntity: PostEntity)</p> <p>Inserts or updates a PostEntity object in the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/insert-or-update-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntity The PostEntity object to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/upsert-post-entities/","title":"Upsert post entities","text":"<p>//room/dev.atick.storage.room.data/LocalDataSource/upsertPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/upsert-post-entities/#upsertpostentities","title":"upsertPostEntities","text":"<p>[androidJvm]\\ abstract suspend fun upsertPostEntities(postEntities: List&lt;PostEntity&gt;)</p> <p>Inserts or updates a list of PostEntity objects in the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source/upsert-post-entities/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntities The list of PostEntity objects to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/","title":"Index","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/#localdatasourceimpl","title":"LocalDataSourceImpl","text":"<p>class LocalDataSourceImpl@Injectconstructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher) : LocalDataSource</p> <p>Implementation of LocalDataSource that interacts with the local storage using JetpackDao.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDao The data access object for performing database operations. ioDispatcher The coroutine dispatcher for performing IO-bound tasks."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/#constructors","title":"Constructors","text":"LocalDataSourceImpl [androidJvm]@Injectconstructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher)"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/#functions","title":"Functions","text":"Name Summary deleteAllPostEntities [androidJvm]open suspend override fun deleteAllPostEntities()Deletes all PostEntity objects from the local storage. deletePostEntity [androidJvm]open suspend override fun deletePostEntity(postEntity: PostEntity)Deletes a PostEntity object from the local storage. getPostEntities [androidJvm]open override fun getPostEntities(): Flow&lt;List&lt;PostEntity&gt;&gt;Retrieves a Flow of List of PostEntity objects from the local storage. getPostEntity [androidJvm]open suspend override fun getPostEntity(id: Int): PostEntity?Retrieves a PostEntity object from the local storage based on its unique identifier. insertOrUpdatePostEntity [androidJvm]open suspend override fun insertOrUpdatePostEntity(postEntity: PostEntity)Inserts or updates a PostEntity object in the local storage. upsertPostEntities [androidJvm]open suspend override fun upsertPostEntities(postEntities: List&lt;PostEntity&gt;)Inserts or updates a list of PostEntity objects in the local storage."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/-local-data-source-impl/","title":"local data source impl","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/LocalDataSourceImpl</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/-local-data-source-impl/#localdatasourceimpl","title":"LocalDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/-local-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDao The data access object for performing database operations. ioDispatcher The coroutine dispatcher for performing IO-bound tasks."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/delete-all-post-entities/","title":"Delete all post entities","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/deleteAllPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/delete-all-post-entities/#deleteallpostentities","title":"deleteAllPostEntities","text":"<p>[androidJvm]\\ open suspend override fun deleteAllPostEntities()</p> <p>Deletes all PostEntity objects from the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/delete-post-entity/","title":"Delete post entity","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/deletePostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/delete-post-entity/#deletepostentity","title":"deletePostEntity","text":"<p>[androidJvm]\\ open suspend override fun deletePostEntity(postEntity: PostEntity)</p> <p>Deletes a PostEntity object from the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/delete-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntity The PostEntity object to be deleted."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entities/","title":"Get post entities","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/getPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entities/#getpostentities","title":"getPostEntities","text":"<p>[androidJvm]\\ open override fun getPostEntities(): Flow&lt;List&lt;PostEntity&gt;&gt;</p> <p>Retrieves a Flow of List of PostEntity objects from the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entities/#return","title":"Return","text":"<p>A Flow emitting a list of PostEntity objects.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entity/","title":"Get post entity","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/getPostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entity/#getpostentity","title":"getPostEntity","text":"<p>[androidJvm]\\ open suspend override fun getPostEntity(id: Int): PostEntity?</p> <p>Retrieves a PostEntity object from the local storage based on its unique identifier.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entity/#return","title":"Return","text":"<p>The retrieved PostEntity object, or null if not found.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/get-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the PostEntity to retrieve."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/insert-or-update-post-entity/","title":"Insert or update post entity","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/insertOrUpdatePostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/insert-or-update-post-entity/#insertorupdatepostentity","title":"insertOrUpdatePostEntity","text":"<p>[androidJvm]\\ open suspend override fun insertOrUpdatePostEntity(postEntity: PostEntity)</p> <p>Inserts or updates a PostEntity object in the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/insert-or-update-post-entity/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntity The PostEntity object to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/upsert-post-entities/","title":"Upsert post entities","text":"<p>//room/dev.atick.storage.room.data/LocalDataSourceImpl/upsertPostEntities</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/upsert-post-entities/#upsertpostentities","title":"upsertPostEntities","text":"<p>[androidJvm]\\ open suspend override fun upsertPostEntities(postEntities: List&lt;PostEntity&gt;)</p> <p>Inserts or updates a list of PostEntity objects in the local storage.</p>"},{"location":"storage/room/room/dev.atick.storage.room.data/-local-data-source-impl/upsert-post-entities/#parameters","title":"Parameters","text":"<p>androidJvm</p> postEntities The list of PostEntity objects to be inserted or updated."},{"location":"storage/room/room/dev.atick.storage.room.di/","title":"Index","text":"<p>//room/dev.atick.storage.room.di</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.di/#types","title":"Types","text":"Name Summary DaoModule [androidJvm]@Module(includes = [DatabaseModule::class])object DaoModuleDagger module for data access object. DatabaseModule [androidJvm]@Moduleobject DatabaseModuleDagger module for database. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger Hilt module responsible for providing implementations of data source interfaces."},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/","title":"Index","text":"<p>//room/dev.atick.storage.room.di/DaoModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/#daomodule","title":"DaoModule","text":"<p>[androidJvm]\\ @Module(includes = [DatabaseModule::class])</p> <p>object DaoModule</p> <p>Dagger module for data access object.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/#functions","title":"Functions","text":"Name Summary provideJetpackDao [androidJvm]@Singleton@Providesfun provideJetpackDao(jetpackDatabase: JetpackDatabase): JetpackDaoGet the data access."},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-jetpack-dao/","title":"Provide jetpack dao","text":"<p>//room/dev.atick.storage.room.di/DaoModule/provideJetpackDao</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-jetpack-dao/#providejetpackdao","title":"provideJetpackDao","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideJetpackDao(jetpackDatabase: JetpackDatabase): JetpackDao</p> <p>Get the data access.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-jetpack-dao/#return","title":"Return","text":"<p>The data access object.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-dao-module/provide-jetpack-dao/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDatabase The database for Jetpack."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/","title":"Index","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger Hilt module responsible for providing implementations of data source interfaces.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindLocalDataSource [androidJvm]@Binds@Singletonabstract fun bindLocalDataSource(localDataSourceImpl: LocalDataSourceImpl): LocalDataSourceBinds the LocalDataSourceImpl implementation to the LocalDataSource interface."},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/DataSourceModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-local-data-source/","title":"Bind local data source","text":"<p>//room/dev.atick.storage.room.di/DataSourceModule/bindLocalDataSource</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-local-data-source/#bindlocaldatasource","title":"bindLocalDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindLocalDataSource(localDataSourceImpl: LocalDataSourceImpl): LocalDataSource</p> <p>Binds the LocalDataSourceImpl implementation to the LocalDataSource interface.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-local-data-source/#return","title":"Return","text":"<p>An instance of LocalDataSource representing the local data source.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-data-source-module/bind-local-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> localDataSourceImpl The concrete implementation of LocalDataSourceImpl."},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/","title":"Index","text":"<p>//room/dev.atick.storage.room.di/DatabaseModule</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/#databasemodule","title":"DatabaseModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DatabaseModule</p> <p>Dagger module for database.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/#functions","title":"Functions","text":"Name Summary provideRoomDatabase [androidJvm]@Singleton@Providesfun provideRoomDatabase(appContext: Context): JetpackDatabaseGet the database for Jetpack."},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-room-database/","title":"Provide room database","text":"<p>//room/dev.atick.storage.room.di/DatabaseModule/provideRoomDatabase</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-room-database/#provideroomdatabase","title":"provideRoomDatabase","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideRoomDatabase(appContext: Context): JetpackDatabase</p> <p>Get the database for Jetpack.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-room-database/#return","title":"Return","text":"<p>The database for Jetpack.</p>"},{"location":"storage/room/room/dev.atick.storage.room.di/-database-module/provide-room-database/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext The application context."},{"location":"storage/room/room/dev.atick.storage.room.models/","title":"Index","text":"<p>//room/dev.atick.storage.room.models</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"storage/room/room/dev.atick.storage.room.models/#types","title":"Types","text":"Name Summary PostEntity [androidJvm]data class PostEntity(val id: Int, val title: String, val url: String, val thumbnailUrl: String)Represents a PostEntity, which is a data structure for storing information about a post."},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/","title":"Index","text":"<p>//room/dev.atick.storage.room.models/PostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/#postentity","title":"PostEntity","text":"<p>[androidJvm]\\ data class PostEntity(val id: Int, val title: String, val url: String, val thumbnailUrl: String)</p> <p>Represents a PostEntity, which is a data structure for storing information about a post.</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/#constructors","title":"Constructors","text":"PostEntity [androidJvm]constructor(id: Int, title: String, url: String, thumbnailUrl: String)"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: IntThe unique identifier for the post entity. thumbnailUrl [androidJvm]val thumbnailUrl: StringThe URL of the thumbnail image associated with the post. title [androidJvm]val title: StringThe title of the post. url [androidJvm]val url: StringThe URL associated with the post."},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/-post-entity/","title":"post entity","text":"<p>//room/dev.atick.storage.room.models/PostEntity/PostEntity</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/-post-entity/#postentity","title":"PostEntity","text":"<p>[androidJvm]\\ constructor(id: Int, title: String, url: String, thumbnailUrl: String)</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/id/","title":"Id","text":"<p>//room/dev.atick.storage.room.models/PostEntity/id</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Int</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/thumbnail-url/","title":"Thumbnail url","text":"<p>//room/dev.atick.storage.room.models/PostEntity/thumbnailUrl</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/thumbnail-url/#thumbnailurl","title":"thumbnailUrl","text":"<p>[androidJvm]\\ val thumbnailUrl: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/title/","title":"Title","text":"<p>//room/dev.atick.storage.room.models/PostEntity/title</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: String</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/url/","title":"Url","text":"<p>//room/dev.atick.storage.room.models/PostEntity/url</p>"},{"location":"storage/room/room/dev.atick.storage.room.models/-post-entity/url/#url","title":"url","text":"<p>[androidJvm]\\ val url: String</p>"}]}