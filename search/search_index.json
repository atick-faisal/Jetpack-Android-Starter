{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#jetpack-compose-starter","title":"Jetpack Compose Starter \ud83d\ude80","text":"<p>A robust, production-ready template for modern Android development that takes the pain out of setting up a new project. Built on the foundation of Now In Android's architecture, this template provides a comprehensive starting point for both new and experienced Android developers.</p>"},{"location":"#why-this-template","title":"Why This Template?","text":"<ul> <li>Production-Ready Authentication: Firebase authentication with Google Sign-In and email/password, including secure credential management</li> <li>Clean Architecture: Clear separation of concerns with a modular, scalable architecture</li> <li>Modern Tech Stack: Leverages the latest Android development tools and libraries including Jetpack Compose, Kotlin Coroutines, and Dagger Hilt</li> <li>Type-Safe Navigation: Fully typed navigation using Kotlin serialization</li> <li>Robust Data Management: Complete data layer with Repository pattern, Room database, and Preferences DataStore</li> <li>Network Communication: Retrofit + OkHttp setup with proper error handling and interceptors</li> <li>Firebase Integration: Full Firebase suite including Authentication, Firestore, and Analytics</li> <li>Background Sync: Robust data synchronization system using WorkManager</li> <li>CI/CD: Automate build, release and Play Store deployment using GitHub actions and Fastlane</li> </ul> <p>Note</p> <p>The codebase follows a set of conventions that prioritize simplicity and maintainability. Understanding these patterns will help you develop effectively.</p>"},{"location":"#some-apps-built-using-this-template","title":"Some Apps Built Using This Template","text":"<p>Check out the whole list here.</p>"},{"location":"#technical-stack","title":"Technical Stack","text":""},{"location":"#core-libraries","title":"Core Libraries","text":"<ul> <li>UI: Jetpack Compose, Material3, Navigation Compose</li> <li>DI: Dagger Hilt</li> <li>Async: Kotlin Coroutines &amp; Flow</li> <li>Network: Retrofit, OkHttp, Kotlinx Serialization</li> <li>Storage: Room DB, DataStore Preferences</li> <li>Firebase: Auth, Firestore, Analytics, Crashlytics</li> <li>Background Processing: WorkManager</li> <li>Images: Coil</li> </ul>"},{"location":"#build-tools","title":"Build &amp; Tools","text":"<ul> <li>Kotlin 2.0</li> <li>Gradle 8.11.1 with Version Catalogs</li> <li>Java 21</li> <li>Custom Gradle Convention Plugins</li> <li>Dokka and MKDocs for documentation</li> <li>Spotless for code formatting</li> </ul>"},{"location":"#architecture-components","title":"Architecture Components","text":"<ul> <li>MVVM with Clean Architecture</li> <li>Repository Pattern</li> <li>Modular design with feature isolation</li> <li>Firebase Authentication &amp; Firestore</li> <li>Single Activity</li> <li>DataStore for preferences</li> <li>Kotlinx Serialization for JSON</li> <li>Type-safe navigation</li> <li>Background sync with WorkManager</li> </ul>"},{"location":"#development-features","title":"Development Features","text":"<ul> <li>Debug/Release variants </li> <li>Firebase Crashlytics integration</li> <li>GitHub Actions CI/CD</li> <li>Automatic dependency updates with Renovate</li> <li>Code documentation with Dokka</li> </ul>"},{"location":"#project-architecture","title":"Project Architecture","text":"<pre><code>graph TD\n    A[App] --&gt; B[Firebase: Analytics]\n    A --&gt; C[Features: Auth, Home, Profile, Settings]\n    A --&gt; D[Sync]\n    A --&gt; I[Core: UI]\n    C --&gt; I\n    C --&gt; E[Data]\n    D --&gt; E\n    E --&gt; F[Firebase: Auth, Firestore]\n    E --&gt; G[Core: Network, Preferences, Room]\n    F --&gt; H[Core: Android]\n    G --&gt; H\n    B --&gt; H</code></pre>"},{"location":"#architecture-layers","title":"Architecture Layers","text":"<p>The codebase follows a clean architecture pattern with clear separation of concerns across different layers. Each layer has specific responsibilities and dependencies flow inward, with the domain layer at the center.</p>"},{"location":"#data-layer","title":"Data Layer","text":"<p>The data layer is responsible for handling data operations and is organized into the following components:</p> <ul> <li>Data Sources: Located in <code>*DataSource</code> classes (e.g., <code>NetworkDataSource</code>, <code>AuthDataSource</code>)</li> <li>Handle raw data operations with external systems (API, database, etc.)</li> <li>Perform data transformations and mapping</li> <li>Example: <code>AuthDataSourceImpl</code> in the auth module handles raw Firebase authentication operations</li> </ul> <p>Note</p> <p>Data sources should expose Flow for observable data and suspend functions for one-shot operations:  <pre><code>interface DataSource {\n    fun observeData(): Flow&lt;Data&gt;\n    suspend fun updateData(data: Data)\n}\n</code></pre></p> <ul> <li>Models: Found in <code>models</code> packages across modules</li> <li>Define data structures for external data sources</li> <li>Contain serialization/deserialization logic</li> <li>Example: <code>NetworkPost</code> in the network module represents raw API responses</li> </ul> <p>Important</p> <p>Always keep data models immutable and use data classes:  <pre><code>data class NetworkResponse(\n    val id: Int,\n    val data: String\n)\n</code></pre></p> <p>The data layer is implemented across several modules: - <code>network/</code>: Handles remote API communication - <code>storage/preferences/</code>: Manages local data persistence using DataStore - <code>storage/room/</code>: Handles SQLite database operations using Room</p> <p>Warning</p> <p>Don't expose data source interfaces directly to ViewModels. Always go through repositories:  <pre><code>// DO THIS\nclass MyViewModel(\n    private val repository: MyRepository\n)\n\n// DON'T DO THIS\nclass MyViewModel(\n    private val dataSource: MyDataSource\n)\n</code></pre></p>"},{"location":"#repository-layer","title":"Repository Layer","text":"<p>The repository layer acts as a single source of truth and mediates between data sources:</p> <ul> <li>Repositories: Found in <code>repository</code> packages (e.g., <code>AuthRepository</code>)</li> <li>Coordinate between multiple data sources</li> <li>Implement business logic for data operations</li> <li>Abstract data sources from the UI layer</li> <li>Handle caching strategies</li> <li>Example: <code>AuthRepositoryImpl</code> coordinates between Firebase Auth and local preferences</li> </ul> <p>Key characteristics: - Uses Kotlin Result type for error handling - Implements caching where appropriate - Exposes Kotlin Flow for reactive data updates</p> <p>Important</p> <p>Always return <code>Result&lt;T&gt;</code> from repository methods. This ensures consistent error handling across the app:  <pre><code>suspend fun getData(): Result&lt;Data&gt; = suspendRunCatching {\n    dataSource.getData()\n}\n</code></pre></p>"},{"location":"#ui-layer","title":"UI Layer","text":"<p>The UI layer follows an MVVM pattern and consists of:</p> <ul> <li>ViewModels: Located in <code>ui</code> packages</li> <li>Manage UI state and business logic</li> <li>Handle user interactions</li> <li>Communicate with repositories</li> <li> <p>Example: <code>AuthViewModel</code> manages authentication state and user actions</p> </li> <li> <p>Screens: Found in <code>ui</code> packages alongside their ViewModels</p> </li> <li>Compose UI components</li> <li>Handle UI layouts and styling</li> <li>Observe ViewModel state</li> <li> <p>Example: <code>SignInScreen</code> displays login form and handles user input</p> </li> <li> <p>State Management:</p> </li> <li>Uses <code>UiState&lt;T&gt;</code> data class for managing loading, error, and success states</li> <li>Employs <code>StateFlow</code> for reactive UI updates</li> <li>Handles one-time events using <code>OneTimeEvent&lt;T&gt;</code></li> </ul> <p>Tip</p> <p>Always use <code>UiState</code> wrapper for ViewModel states. This ensures consistent error and loading handling across the app.  <pre><code>data class UiState&lt;T : Any&gt;(\n    val data: T,\n    val loading: Boolean = false,\n    val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null)\n)\n</code></pre></p> <p>Warning</p> <p>Don't create custom loading or error handling in individual screens. Use StatefulComposable instead:  <pre><code>// DON'T DO THIS\nif (isLoading) {\n    CircularProgressIndicator()\n}\n\n// DO THIS\nStatefulComposable(state = uiState) { data -&gt;\n    // Your UI content\n}\n</code></pre></p>"},{"location":"#data-flow","title":"Data Flow","text":"<p>The typical data flow follows this pattern:</p> <ol> <li> <p>UI Layer:    <pre><code>User Action \u2192 ViewModel \u2192 Repository\n</code></pre></p> </li> <li> <p>Repository Layer:    <pre><code>Repository \u2192 Data Sources \u2192 External Systems\n</code></pre></p> </li> <li> <p>Data Flow Back:    <pre><code>External Systems \u2192 Data Sources \u2192 Repository \u2192 ViewModel \u2192 UI\n</code></pre></p> </li> </ol>"},{"location":"#state-management-and-data-structures","title":"State Management and Data Structures","text":"<p>The codebase uses several key data structures for state management:</p> <ol> <li>UiState:    <pre><code>data class UiState&lt;T : Any&gt;(\n    val data: T,\n    val loading: Boolean = false,\n    val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null)\n)\n</code></pre> <li>Wraps UI data with loading and error states</li> <li> <p>Used by ViewModels to communicate state to UI</p> </li> <li> <p>Result: <li>Used by repositories to handle success/failure</li> <li>Propagates errors up the stack</li> <li> <p>Example: <code>Result&lt;AuthUser&gt;</code> for authentication operations</p> </li> <li> <p>StateFlow:</p> </li> <li>Used for reactive state management</li> <li>Provides hot, stateful event streams</li> <li> <p>Example: <code>_authUiState: MutableStateFlow&lt;UiState&lt;AuthScreenData&gt;&gt;</code></p> </li> <li> <p>OneTimeEvent: <li>Errors propagate up through Result <li>They get converted to OneTimeEvent when reaching the UI layer</li> <li>This ensures error Snackbars only show once and don't reappear on recomposition</li> <p>Important</p> <p>Use <code>StatefulComposable</code> for screens that need loading or error handling. This component handles these states automatically, reducing boilerplate and ensuring consistent behavior.  <pre><code>StatefulComposable(\n    state = viewModel.state,\n    onShowSnackbar = { msg, action -&gt; /* ... */ }\n) { data -&gt;\n    // Your UI content here\n}\n</code></pre></p> <p>Tip</p> <p>Use the provided extension functions for updating state:  <pre><code>// For regular state updates\n_uiState.updateState { copy(value = newValue) }\n\n// For async operations\n_uiState.updateStateWith(viewModelScope) {\n    repository.someAsyncOperation()\n}\n</code></pre></p>"},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>This codebase prioritizes pragmatic simplicity over theoretical purity, making conscious tradeoffs that favor maintainability and readability over absolute correctness or flexibility. Here are some key examples of this philosophy:</p>"},{"location":"#centralized-state-management","title":"Centralized State Management","text":""},{"location":"#simplified-error-and-loading-handling","title":"Simplified Error and Loading Handling","text":"<p>Instead of implementing error and loading states individually for each screen, we handle these centrally through the <code>StatefulComposable</code>:</p> <pre><code>@Composable\nfun &lt;T : Any&gt; StatefulComposable(\n    state: UiState&lt;T&gt;,\n    onShowSnackbar: suspend (String, String?) -&gt; Boolean,\n    content: @Composable (T) -&gt; Unit\n) {\n    content(state.data)\n\n    if (state.loading) {\n        // Centralized loading indicator\n    }\n\n    state.error.getContentIfNotHandled()?.let { error -&gt;\n        // Centralized error handling\n    }\n}\n</code></pre> <p>Tradeoff: - \u2705 Simplicity: UI components only need to focus on their happy path - \u2705 Consistency: Error and loading states behave uniformly across the app - \u274c Flexibility: Less control over specific error/loading UI for individual screens</p>"},{"location":"#direct-state-management-in-viewmodels","title":"Direct State Management in ViewModels","text":"<p>While the NowInAndroid codebase promotes a functional approach using Flow operators and transformations, we opt for a more direct approach using MutableStateFlow:</p> <pre><code>// Our simplified approach\nclass AuthViewModel @Inject constructor(\n    private val authRepository: AuthRepository,\n) : ViewModel() {\n    private val _authUiState = MutableStateFlow(UiState(AuthScreenData()))\n    val authUiState = _authUiState.asStateFlow()\n\n    fun updateEmail(email: String) {\n        _authUiState.updateState {\n            copy(\n                email = TextFiledData(\n                    value = email,\n                    errorMessage = if (email.isEmailValid()) null else \"Email Not Valid\"\n                )\n            )\n        }\n    }\n}\n</code></pre> <p>Tradeoff: - \u2705 Readability: State changes are explicit and easy to trace - \u2705 Simplicity: Easier to manage multiple UI events and loading states - \u2705 Debuggability: Direct state mutations are easier to debug - \u274c Purity: Less adherence to functional programming principles - \u274c Resource Management: No automatic cleanup of subscribers when the app is in background (compared to <code>SharingStarted.WhileSubscribed(5_000)</code>)</p> <p>Note</p> <p>These patterns are guidelines, not rules. The goal is to make the codebase more maintainable and easier to understand, not to restrict flexibility where it's truly needed.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Android Studio Hedgehog or newer</li> <li>JDK 21</li> <li>Firebase account for authentication, firestore and analytics</li> </ul>"},{"location":"#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Clone and open project. The depth flag is added to reduce the clone size: <pre><code>git clone --depth 1 -b main https://github.com/atick-faisal/Jetpack-Compose-Starter.git\n</code></pre></p> </li> <li> <p>Firebase setup:</p> </li> <li>Create project in Firebase Console</li> <li>Add Authentication and Firestore and add the following rules: <pre><code>    rules_version = '2';\n    service cloud.firestore {\n      match /databases/{database}/documents {\n        // Helper function to check if user is authenticated\n        function isAuthenticated() {\n          return request.auth != null;\n        }\n\n        // Helper function to check if the user is accessing their own data\n        function isUserOwner(userId) {\n          return isAuthenticated() &amp;&amp; request.auth.uid == userId;\n        }\n\n        // Helper function to validate Jetpack data structure\n        function isValidJetpack(jetpack) {\n          return jetpack.size() == 7\n            &amp;&amp; 'id' in jetpack &amp;&amp; jetpack.id is string\n            // ... other validations\n        }\n\n        // Match the specific path structure: dev.atick.jetpack/{userId}/jetpacks/{jetpackId}\n        match /dev.atick.jetpack/{userId}/jetpacks/{jetpackId} {\n          allow read: if isUserOwner(userId);\n\n          allow create: if isUserOwner(userId) \n            &amp;&amp; isValidJetpack(request.resource.data);\n\n          allow update: if isUserOwner(userId) \n            &amp;&amp; isValidJetpack(request.resource.data)\n            &amp;&amp; request.resource.data.id == resource.data.id;\n\n          allow delete: if isUserOwner(userId);\n        }\n\n        // Deny access to all other documents by default\n        match /{document=**} {\n          allow read, write: if false;\n        }\n      }\n    }\n</code></pre></li> <li>Download <code>google-services.json</code> to <code>app/</code></li> <li>Add SHA fingerprint to Firebase Console for Google Sign-In: <pre><code>./gradlew signingReport\n</code></pre> Or, you can run the <code>signingReport</code> task from the run configurations. Then get the SHA-1 fingerprint for the debug and release builds of the <code>app</code> module and add them to Firebase Console.</li> </ol> <p>Note</p> <p>Firebase authentication, firestore and crashlytics requires Firebase console setup and the <code>google-services.json</code> file. I have provided a template to ensure a successful build. However, you need to provide your own in order to use all the functionalities.</p> <ol> <li>Running the App: To run the app, select <code>app</code> from the run configurations and hit run.</li> </ol>"},{"location":"#release-setup","title":"Release Setup","text":"<ol> <li> <p>Create <code>keystore.properties</code> in project root: <pre><code>storePassword=****\nkeyPassword=****\nkeyAlias=****\nstoreFile=keystore-file-name.jks\n</code></pre></p> </li> <li> <p>Place keystore file in <code>app/</code></p> </li> <li> <p>To get the release apk file: <pre><code>./gradlew assembleRelease\n</code></pre> Or, to get the bundle file: <pre><code>./gradlew bundleRelease\n</code></pre></p> </li> </ol>"},{"location":"#cicd-setup","title":"CI/CD Setup","text":"<p>The template contains 3 GitHub actions workflows: - Build: Runs the build and tests on every push - Docs: Generates the documentation and deploys to GitHub Pages - Release: Builds and deploys the app to the Play Store</p> <p>The release workflow requires the following secrets: - <code>KEYSTORE</code>: Base64 encoded keystore file - <code>KEYSTORE_PROPERTIES</code>: Base64 encoded keystore.properties file - <code>GOOGLE_SERVICES_JSON</code>: Base64 encoded google-services.json file</p> <p>Important</p> <p>The release workflow is set up to deploy to the Play Store. Make sure to update the <code>fastlane/Appfile</code> and <code>fastlane/Fastfile</code> with your own app details.  Also, get the play store service account json file and add it to the <code>fastlane</code> directory. The instructions can be found here.</p>"},{"location":"#adding-a-new-feature-step-by-step-guide","title":"Adding a New Feature: Step-by-Step Guide","text":"<p>This guide walks through the process of adding a new feature to the app, following the established patterns and conventions.</p>"},{"location":"#step-1-define-data-models","title":"Step 1: Define Data Models","text":"<p>Start by defining your data models in the appropriate layer:</p> <ol> <li> <p>Data Source Models: These are the raw data models from your network, database or other sources. You should put them in <code>core:&lt;data-source&gt;/models/src/main/kotlin/dev/atick/core/&lt;data-source&gt;/models/</code>. For example: <pre><code>// core/network/src/main/kotlin/dev/atick/network/models/\n@Serializable\ndata class NetworkFeatureData(\n    val id: Int,\n    val title: String\n)\n</code></pre></p> </li> <li> <p>Repository Models: These are the domain models (this template doesn't use domain layer, but you are free to add one) that your repository will work with. Put them in <code>core:&lt;feature&gt;/models/src/main/kotlin/dev/atick/core/&lt;feature&gt;/models/</code>. For example: <pre><code>2. **UI Models** (what your screen will display):\n```kotlin\n// feature/feature-name/src/main/kotlin/dev/atick/feature/models/\ndata class FeatureScreenData(\n    val title: String,\n    val description: String = \"\",\n    // ... other UI state\n)\n</code></pre></p> </li> </ol>"},{"location":"#step-2-create-data-source","title":"Step 2: Create Data Source","text":"<ol> <li> <p>Define the interface: <pre><code>// feature/src/main/kotlin/dev/atick/feature/data/\ninterface FeatureDataSource {\n    suspend fun getFeatureData(): List&lt;NetworkFeatureData&gt;\n    fun observeFeatureData(): Flow&lt;List&lt;NetworkFeatureData&gt;&gt;\n}\n</code></pre></p> </li> <li> <p>Implement the data source: <pre><code>class FeatureDataSourceImpl @Inject constructor(\n    private val api: FeatureApi,\n    @IoDispatcher private val ioDispatcher: CoroutineDispatcher\n) : FeatureDataSource {\n    override suspend fun getFeatureData(): List&lt;NetworkFeatureData&gt; {\n        return withContext(ioDispatcher) {\n            api.getFeatureData()\n        }\n    }\n\n    override fun observeFeatureData(): Flow&lt;List&lt;NetworkFeatureData&gt;&gt; {\n        return flow {\n            // Implementation\n        }.flowOn(ioDispatcher)\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-3-create-repository","title":"Step 3: Create Repository","text":"<ol> <li> <p>Define repository interface: <pre><code>// feature/src/main/kotlin/dev/atick/feature/repository/\ninterface FeatureRepository {\n    suspend fun getFeatureData(): Result&lt;List&lt;FeatureData&gt;&gt;\n}\n</code></pre></p> </li> <li> <p>Implement repository: <pre><code>class FeatureRepositoryImpl @Inject constructor(\n    private val dataSource: FeatureDataSource\n) : FeatureRepository {\n    override suspend fun getFeatureData(): Result&lt;List&lt;FeatureData&gt;&gt; = \n        suspendRunCatching {\n            dataSource.getFeatureData().map { it.toFeatureData() }\n        }\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-4-create-viewmodel","title":"Step 4: Create ViewModel","text":"<pre><code>// feature/src/main/kotlin/dev/atick/feature/ui/\n@HiltViewModel\nclass FeatureViewModel @Inject constructor(\n    private val repository: FeatureRepository\n) : ViewModel() {\n    private val _uiState = MutableStateFlow(UiState(FeatureScreenData()))\n    val uiState = _uiState.asStateFlow()\n\n    init {\n        loadData()\n    }\n\n    private fun loadData() {\n        _uiState.updateStateWith(viewModelScope) {\n            repository.getFeatureData()\n                .map { data -&gt; /* transform to screen data */ }\n        }\n    }\n\n    fun onUserAction(/* params */) {\n        _uiState.updateState {\n            copy(/* update state */)\n        }\n    }\n}\n</code></pre>"},{"location":"#step-5-create-ui-components","title":"Step 5: Create UI Components","text":"<ol> <li> <p>Create screen composable: <pre><code>// feature/src/main/kotlin/dev/atick/feature/ui/\n@Composable\nfun FeatureRoute(\n    onShowSnackbar: suspend (String, String?) -&gt; Boolean,\n    viewModel: FeatureViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsStateWithLifecycle()\n\n    StatefulComposable(\n        state = uiState,\n        onShowSnackbar = onShowSnackbar\n    ) { screenData -&gt;\n        FeatureScreen(\n            screenData = screenData,\n            onAction = viewModel::onUserAction\n        )\n    }\n}\n\n@Composable\nprivate fun FeatureScreen(\n    screenData: FeatureScreenData,\n    onAction: () -&gt; Unit\n) {\n    // UI implementation\n}\n</code></pre></p> </li> <li> <p>Add preview: <pre><code>@DevicePreviews\n@Composable\nprivate fun FeatureScreenPreview() {\n    FeatureScreen(\n        screenData = FeatureScreenData(/* sample data */),\n        onAction = {}\n    )\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-6-setup-navigation","title":"Step 6: Setup Navigation","text":"<ol> <li> <p>Define navigation endpoints: <pre><code>// feature/src/main/kotlin/dev/atick/feature/navigation/\n@Serializable\ndata object FeatureNavGraph\n@Serializable\ndata object Feature\n</code></pre></p> </li> <li> <p>Add navigation extensions: <pre><code>fun NavController.navigateToFeature(navOptions: NavOptions? = null) {\n    navigate(Feature, navOptions)\n}\n\nfun NavGraphBuilder.featureScreen(\n    onShowSnackbar: suspend (String, String?) -&gt; Boolean\n) {\n    composable&lt;Feature&gt; {\n        FeatureRoute(\n            onShowSnackbar = onShowSnackbar\n        )\n    }\n}\n\nfun NavGraphBuilder.featureNavGraph(\n    nestedGraphs: NavGraphBuilder.() -&gt; Unit\n) {\n    navigation&lt;FeatureNavGraph&gt;(\n        startDestination = Feature\n    ) {\n        nestedGraphs()\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"#step-7-setup-dependency-injection","title":"Step 7: Setup Dependency Injection","text":"<ol> <li> <p>Add module for data source: <pre><code>@Module\n@InstallIn(SingletonComponent::class)\nabstract class DataSourceModule {\n    @Binds\n    @Singleton\n    abstract fun bindFeatureDataSource(\n        impl: FeatureDataSourceImpl\n    ): FeatureDataSource\n}\n</code></pre></p> </li> <li> <p>Add module for repository: <pre><code>@Module\n@InstallIn(SingletonComponent::class)\nabstract class RepositoryModule {\n    @Binds\n    @Singleton\n    abstract fun bindFeatureRepository(\n        impl: FeatureRepositoryImpl\n    ): FeatureRepository\n}\n</code></pre></p> </li> </ol>"},{"location":"#final-checklist","title":"Final Checklist","text":"<p>\u2705 Data models defined \u2705 Data source interface and implementation created \u2705 Repository interface and implementation created \u2705 ViewModel handling state and user actions \u2705 UI components with previews \u2705 Navigation setup \u2705 Dependency injection modules  </p>"},{"location":"#documentation","title":"Documentation","text":"<p> Read The Documentation Here </p> <p></p> <p>Qatar University Machine Learning Group <p></p>"},{"location":"app/","title":"Index","text":"<p>//app</p>"},{"location":"app/#app","title":"app","text":""},{"location":"app/#packages","title":"Packages","text":"Name dev.atick.compose dev.atick.compose.navigation dev.atick.compose.ui"},{"location":"app/app/dev.atick.compose/","title":"Index","text":"<p>//app/dev.atick.compose</p>"},{"location":"app/app/dev.atick.compose/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose/#types","title":"Types","text":"Name Summary App [androidJvm]class App : Application, ImageLoaderFactoryThe main application class that extends Application and is annotated with HiltAndroidApp. MainActivity [androidJvm]class MainActivity : ComponentActivityMain activity for the application. MainActivityViewModel [androidJvm]class MainActivityViewModel@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource) : ViewModelAnnotates a ViewModel class that is managed by Hilt's dependency injection system. ThemeSettings [androidJvm]data class ThemeSettings(val darkTheme: Boolean, val disableDynamicTheming: Boolean = true)Class for the system theme settings. This wrapping class allows us to combine all the changes and prevent unnecessary recompositions."},{"location":"app/app/dev.atick.compose/-app/","title":"Index","text":"<p>//app/dev.atick.compose/App</p>"},{"location":"app/app/dev.atick.compose/-app/#app","title":"App","text":"<p>[androidJvm]\\ class App : Application, ImageLoaderFactory</p> <p>The main application class that extends Application and is annotated with HiltAndroidApp.</p>"},{"location":"app/app/dev.atick.compose/-app/#constructors","title":"Constructors","text":"App [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose/-app/#properties","title":"Properties","text":"Name Summary imageLoader [androidJvm]@Injectlateinit var imageLoader: Lazy&lt;ImageLoader&gt;"},{"location":"app/app/dev.atick.compose/-app/#functions","title":"Functions","text":"Name Summary bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getResources [androidJvm]open override fun getResources(): Resources getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]fun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): Topen override fun getSystemService(p0: String): Any getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean newImageLoader [androidJvm]open override fun newImageLoader(): ImageLoaderCreates a new instance of ImageLoader using the injected imageLoader. obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(p0: Configuration) onCreate [androidJvm]open override fun onCreate()Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode. onLowMemory [androidJvm]open override fun onLowMemory() onTerminate [androidJvm]open fun onTerminate() onTrimMemory [androidJvm]open override fun onTrimMemory(p0: Int) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerOnProvideAssistDataListener [androidJvm]open fun registerOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setTheme [androidJvm]open override fun setTheme(p0: Int) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopService [androidJvm]open override fun stopService(p0: Intent): Boolean unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterOnProvideAssistDataListener [androidJvm]open fun unregisterOnProvideAssistDataListener(p0: Application.OnProvideAssistDataListener) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"app/app/dev.atick.compose/-app/-app/","title":"app","text":"<p>//app/dev.atick.compose/App/App</p>"},{"location":"app/app/dev.atick.compose/-app/-app/#app","title":"App","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose/-app/image-loader/","title":"Image loader","text":"<p>//app/dev.atick.compose/App/imageLoader</p>"},{"location":"app/app/dev.atick.compose/-app/image-loader/#imageloader","title":"imageLoader","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var imageLoader: Lazy&lt;ImageLoader&gt;</p>"},{"location":"app/app/dev.atick.compose/-app/new-image-loader/","title":"New image loader","text":"<p>//app/dev.atick.compose/App/newImageLoader</p>"},{"location":"app/app/dev.atick.compose/-app/new-image-loader/#newimageloader","title":"newImageLoader","text":"<p>[androidJvm]\\ open override fun newImageLoader(): ImageLoader</p> <p>Creates a new instance of ImageLoader using the injected imageLoader.</p>"},{"location":"app/app/dev.atick.compose/-app/new-image-loader/#return","title":"Return","text":"<p>A new instance of ImageLoader.</p>"},{"location":"app/app/dev.atick.compose/-app/on-create/","title":"On create","text":"<p>//app/dev.atick.compose/App/onCreate</p>"},{"location":"app/app/dev.atick.compose/-app/on-create/#oncreate","title":"onCreate","text":"<p>[androidJvm]\\ open override fun onCreate()</p> <p>Called when the application is first created. Performs initialization tasks, such as setting up Timber logging in debug mode.</p>"},{"location":"app/app/dev.atick.compose/-main-activity/","title":"Index","text":"<p>//app/dev.atick.compose/MainActivity</p>"},{"location":"app/app/dev.atick.compose/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ class MainActivity : ComponentActivity</p> <p>Main activity for the application.</p>"},{"location":"app/app/dev.atick.compose/-main-activity/#constructors","title":"Constructors","text":"MainActivity [androidJvm]constructor()"},{"location":"app/app/dev.atick.compose/-main-activity/#properties","title":"Properties","text":"Name Summary activityResultRegistry [androidJvm]override val activityResultRegistry: ActivityResultRegistry crashReporter [androidJvm]@Injectlateinit var crashReporter: CrashReporter defaultViewModelCreationExtras [androidJvm]open override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]open override val defaultViewModelProviderFactory: ViewModelProvider.Factory fullyDrawnReporter [androidJvm]open override val fullyDrawnReporter: FullyDrawnReporter lastCustomNonConfigurationInstance [androidJvm]open val lastCustomNonConfigurationInstance: Any? lifecycle [androidJvm]open override val lifecycle: Lifecycle networkUtils [androidJvm]@Injectlateinit var networkUtils: NetworkUtils onBackPressedDispatcher [androidJvm]override val onBackPressedDispatcher: OnBackPressedDispatcher savedStateRegistry [androidJvm]override val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]open override val viewModelStore: ViewModelStore"},{"location":"app/app/dev.atick.compose/-main-activity/#functions","title":"Functions","text":"Name Summary addContentView [androidJvm]open override fun addContentView(view: View?, params: ViewGroup.LayoutParams?) addMenuProvider [androidJvm]open override fun addMenuProvider(provider: MenuProvider)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner)open override fun addMenuProvider(provider: MenuProvider, owner: LifecycleOwner, state: Lifecycle.State) addOnConfigurationChangedListener [androidJvm]override fun addOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) addOnContextAvailableListener [androidJvm]override fun addOnContextAvailableListener(listener: OnContextAvailableListener) addOnMultiWindowModeChangedListener [androidJvm]override fun addOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) addOnNewIntentListener [androidJvm]override fun addOnNewIntentListener(listener: Consumer&lt;Intent&gt;) addOnPictureInPictureModeChangedListener [androidJvm]override fun addOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) addOnTrimMemoryListener [androidJvm]override fun addOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) addOnUserLeaveHintListener [androidJvm]override fun addOnUserLeaveHintListener(listener: Runnable) applyOverrideConfiguration [androidJvm]open fun applyOverrideConfiguration(p0: Configuration) bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkContentUriPermissionFull [androidJvm]open override fun checkContentUriPermissionFull(p0: Uri, p1: Int, p2: Int, p3: Int): Int checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearOverrideActivityTransition [androidJvm]open fun clearOverrideActivityTransition(p0: Int) clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() closeContextMenu [androidJvm]open fun closeContextMenu() closeOptionsMenu [androidJvm]open fun closeOptionsMenu() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createPendingResult [androidJvm]open fun createPendingResult(p0: Int, p1: Intent, p2: Int): PendingIntent createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean dismissDialog [androidJvm]fun ~~dismissDialog~~(p0: Int) dismissKeyboardShortcutsHelper [androidJvm]fun dismissKeyboardShortcutsHelper() dispatchGenericMotionEvent [androidJvm]open override fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchKeyEvent [androidJvm]open override fun dispatchKeyEvent(event: KeyEvent): Boolean dispatchKeyShortcutEvent [androidJvm]open override fun dispatchKeyShortcutEvent(event: KeyEvent): Boolean dispatchPopulateAccessibilityEvent [androidJvm]open override fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchTouchEvent [androidJvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [androidJvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dump [androidJvm]open fun dump(p0: String, p1: FileDescriptor?, p2: PrintWriter, p3: Array&lt;String&gt;?) enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) enterPictureInPictureMode [androidJvm]open fun ~~enterPictureInPictureMode~~()open fun enterPictureInPictureMode(p0: PictureInPictureParams): Boolean fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; findViewById [androidJvm]open fun &lt;T : View&gt; findViewById(p0: Int): T finish [androidJvm]open fun finish() finishActivity [androidJvm]open fun finishActivity(p0: Int) finishActivityFromChild [androidJvm]open fun ~~finishActivityFromChild~~(p0: Activity, p1: Int) finishAffinity [androidJvm]open fun finishAffinity() finishAfterTransition [androidJvm]open fun finishAfterTransition() finishAndRemoveTask [androidJvm]open fun finishAndRemoveTask() finishFromChild [androidJvm]open fun ~~finishFromChild~~(p0: Activity) getActionBar [androidJvm]open fun getActionBar(): ActionBar? getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getCaller [androidJvm]open fun getCaller(): ComponentCaller? getCallingActivity [androidJvm]open fun getCallingActivity(): ComponentName? getCallingPackage [androidJvm]open fun getCallingPackage(): String? getChangingConfigurations [androidJvm]open fun getChangingConfigurations(): Int getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getComponentName [androidJvm]open fun getComponentName(): ComponentName getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getContentScene [androidJvm]open fun getContentScene(): Scene getContentTransitionManager [androidJvm]open fun getContentTransitionManager(): TransitionManager getCurrentCaller [androidJvm]open fun getCurrentCaller(): ComponentCaller getCurrentFocus [androidJvm]open fun getCurrentFocus(): View? getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getExtraData [androidJvm]open fun &lt;T : ComponentActivity.ExtraData&gt; ~~getExtraData~~(extraDataClass: Class&lt;T&gt;): T? getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getFragmentManager [androidJvm]open fun ~~getFragmentManager~~(): FragmentManager getInitialCaller [androidJvm]open fun getInitialCaller(): ComponentCaller getIntent [androidJvm]open fun getIntent(): Intent getLastNonConfigurationInstance [androidJvm]open fun getLastNonConfigurationInstance(): Any? getLaunchedFromPackage [androidJvm]open fun getLaunchedFromPackage(): String? getLaunchedFromUid [androidJvm]open fun getLaunchedFromUid(): Int getLayoutInflater [androidJvm]open fun getLayoutInflater(): LayoutInflater getLoaderManager [androidJvm]open fun ~~getLoaderManager~~(): LoaderManager getLocalClassName [androidJvm]open fun getLocalClassName(): String getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getMaxNumPictureInPictureActions [androidJvm]open fun getMaxNumPictureInPictureActions(): Int getMediaController [androidJvm]fun getMediaController(): MediaController getMenuInflater [androidJvm]open fun getMenuInflater(): MenuInflater getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOnBackInvokedDispatcher [androidJvm]open fun getOnBackInvokedDispatcher(): OnBackInvokedDispatcher getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getParent [androidJvm]fun ~~getParent~~(): Activity getParentActivityIntent [androidJvm]open fun getParentActivityIntent(): Intent? getPreferences [androidJvm]open fun getPreferences(p0: Int): SharedPreferences getReferrer [androidJvm]open fun getReferrer(): Uri? getRequestedOrientation [androidJvm]open fun getRequestedOrientation(): Int getResources [androidJvm]open override fun getResources(): Resources getSearchEvent [androidJvm]fun getSearchEvent(): SearchEvent getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getSplashScreen [androidJvm]fun getSplashScreen(): SplashScreen getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]open override fun getSystemService(p0: String): Anyfun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): T getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getTaskId [androidJvm]open fun getTaskId(): Int getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getTitle [androidJvm]fun getTitle(): CharSequence getTitleColor [androidJvm]fun getTitleColor(): Int getVoiceInteractor [androidJvm]open fun getVoiceInteractor(): VoiceInteractor getVolumeControlStream [androidJvm]fun getVolumeControlStream(): Int getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int getWindow [androidJvm]open fun getWindow(): Window getWindowManager [androidJvm]open fun getWindowManager(): WindowManager grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) hasWindowFocus [androidJvm]open fun hasWindowFocus(): Boolean initializeViewTreeOwners [androidJvm]open fun initializeViewTreeOwners() invalidateMenu [androidJvm]open override fun invalidateMenu() invalidateOptionsMenu [androidJvm]open fun invalidateOptionsMenu() isActivityTransitionRunning [androidJvm]open fun isActivityTransitionRunning(): Boolean isChangingConfigurations [androidJvm]open fun isChangingConfigurations(): Boolean isChild [androidJvm]fun ~~isChild~~(): Boolean isDestroyed [androidJvm]open fun isDestroyed(): Boolean isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isFinishing [androidJvm]open fun isFinishing(): Boolean isImmersive [androidJvm]open fun isImmersive(): Boolean isInMultiWindowMode [androidJvm]open fun isInMultiWindowMode(): Boolean isInPictureInPictureMode [androidJvm]open fun isInPictureInPictureMode(): Boolean isLaunchedFromBubble [androidJvm]open fun isLaunchedFromBubble(): Boolean isLocalVoiceInteractionSupported [androidJvm]open fun isLocalVoiceInteractionSupported(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isTaskRoot [androidJvm]open fun isTaskRoot(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean isVoiceInteraction [androidJvm]open fun isVoiceInteraction(): Boolean isVoiceInteractionRoot [androidJvm]open fun isVoiceInteractionRoot(): Boolean managedQuery [androidJvm]fun ~~managedQuery~~(p0: Uri, p1: Array&lt;String&gt;, p2: String, p3: Array&lt;String&gt;, p4: String): Cursor moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean moveTaskToBack [androidJvm]open fun moveTaskToBack(p0: Boolean): Boolean navigateUpTo [androidJvm]open fun navigateUpTo(p0: Intent): Boolean navigateUpToFromChild [androidJvm]open fun ~~navigateUpToFromChild~~(p0: Activity, p1: Intent): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onActionModeFinished [androidJvm]open override fun onActionModeFinished(p0: ActionMode) onActionModeStarted [androidJvm]open override fun onActionModeStarted(p0: ActionMode) onActivityReenter [androidJvm]open fun onActivityReenter(p0: Int, p1: Intent) onActivityResult [androidJvm]open fun onActivityResult(p0: Int, p1: Int, p2: Intent?, p3: ComponentCaller) onAttachedToWindow [androidJvm]open override fun onAttachedToWindow() onAttachFragment [androidJvm]open fun ~~onAttachFragment~~(p0: Fragment) onBackPressed [androidJvm]open override fun ~~onBackPressed~~() onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(newConfig: Configuration) onContentChanged [androidJvm]open override fun onContentChanged() onContextItemSelected [androidJvm]open fun onContextItemSelected(p0: MenuItem): Boolean onContextMenuClosed [androidJvm]open fun onContextMenuClosed(p0: Menu) onCreate [androidJvm]open fun onCreate(p0: Bundle?, p1: PersistableBundle?) onCreateContextMenu [androidJvm]open override fun onCreateContextMenu(p0: ContextMenu, p1: View, p2: ContextMenu.ContextMenuInfo) onCreateDescription [androidJvm]open fun onCreateDescription(): CharSequence? onCreateNavigateUpTaskStack [androidJvm]open fun onCreateNavigateUpTaskStack(p0: TaskStackBuilder) onCreateOptionsMenu [androidJvm]open fun onCreateOptionsMenu(p0: Menu): Boolean onCreatePanelMenu [androidJvm]open override fun onCreatePanelMenu(featureId: Int, menu: Menu): Boolean onCreatePanelView [androidJvm]open override fun onCreatePanelView(p0: Int): View? onCreateThumbnail [androidJvm]open fun ~~onCreateThumbnail~~(p0: Bitmap, p1: Canvas): Boolean onCreateView [androidJvm]open override fun onCreateView(p0: String, p1: Context, p2: AttributeSet): View?open override fun onCreateView(p0: View?, p1: String, p2: Context, p3: AttributeSet): View? onDetachedFromWindow [androidJvm]open override fun onDetachedFromWindow() onEnterAnimationComplete [androidJvm]open fun onEnterAnimationComplete() onGenericMotionEvent [androidJvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onGetDirectActions [androidJvm]open fun onGetDirectActions(p0: CancellationSignal, p1: Consumer&lt;MutableList&lt;DirectAction&gt;&gt;) onKeyDown [androidJvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [androidJvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [androidJvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyShortcut [androidJvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [androidJvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onLocalVoiceInteractionStarted [androidJvm]open fun onLocalVoiceInteractionStarted() onLocalVoiceInteractionStopped [androidJvm]open fun onLocalVoiceInteractionStopped() onLowMemory [androidJvm]open override fun onLowMemory() onMenuItemSelected [androidJvm]open override fun onMenuItemSelected(featureId: Int, item: MenuItem): Boolean onMenuOpened [androidJvm]open override fun onMenuOpened(p0: Int, p1: Menu): Boolean onMultiWindowModeChanged [androidJvm]open override fun ~~onMultiWindowModeChanged~~(isInMultiWindowMode: Boolean)open override fun onMultiWindowModeChanged(isInMultiWindowMode: Boolean, newConfig: Configuration) onNavigateUp [androidJvm]open fun onNavigateUp(): Boolean onNavigateUpFromChild [androidJvm]open fun ~~onNavigateUpFromChild~~(p0: Activity): Boolean onNewIntent [androidJvm]open fun onNewIntent(p0: Intent, p1: ComponentCaller) onOptionsItemSelected [androidJvm]open fun onOptionsItemSelected(p0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]open fun onOptionsMenuClosed(p0: Menu) onPanelClosed [androidJvm]open override fun onPanelClosed(featureId: Int, menu: Menu) onPerformDirectAction [androidJvm]open fun onPerformDirectAction(p0: String, p1: Bundle, p2: CancellationSignal, p3: Consumer&lt;Bundle&gt;) onPictureInPictureModeChanged [androidJvm]open override fun ~~onPictureInPictureModeChanged~~(isInPictureInPictureMode: Boolean)open override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean, newConfig: Configuration) onPictureInPictureRequested [androidJvm]open fun onPictureInPictureRequested(): Boolean onPictureInPictureUiStateChanged [androidJvm]open fun onPictureInPictureUiStateChanged(p0: PictureInPictureUiState) onPointerCaptureChanged [androidJvm]open fun onPointerCaptureChanged(p0: Boolean) onPostCreate [androidJvm]open fun onPostCreate(p0: Bundle?, p1: PersistableBundle?) onPrepareNavigateUpTaskStack [androidJvm]open fun onPrepareNavigateUpTaskStack(p0: TaskStackBuilder) onPrepareOptionsMenu [androidJvm]open fun onPrepareOptionsMenu(p0: Menu): Boolean onPreparePanel [androidJvm]open override fun onPreparePanel(featureId: Int, view: View?, menu: Menu): Boolean onProvideAssistContent [androidJvm]open fun onProvideAssistContent(p0: AssistContent) onProvideAssistData [androidJvm]open fun onProvideAssistData(p0: Bundle) onProvideKeyboardShortcuts [androidJvm]open override fun onProvideKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Menu?, p2: Int) onProvideReferrer [androidJvm]open fun onProvideReferrer(): Uri onRequestPermissionsResult [androidJvm]open fun onRequestPermissionsResult(p0: Int, p1: Array&lt;String&gt;, p2: IntArray, p3: Int)open override fun ~~onRequestPermissionsResult~~(requestCode: Int, permissions: Array&lt;String&gt;, grantResults: IntArray) onRestoreInstanceState [androidJvm]open fun onRestoreInstanceState(p0: Bundle?, p1: PersistableBundle?) onRetainCustomNonConfigurationInstance [androidJvm]open fun ~~onRetainCustomNonConfigurationInstance~~(): Any? onRetainNonConfigurationInstance [androidJvm]override fun onRetainNonConfigurationInstance(): Any? onSaveInstanceState [androidJvm]open fun onSaveInstanceState(p0: Bundle, p1: PersistableBundle) onSearchRequested [androidJvm]open override fun onSearchRequested(): Booleanopen override fun onSearchRequested(p0: SearchEvent?): Boolean onStateNotSaved [androidJvm]open fun ~~onStateNotSaved~~() onTopResumedActivityChanged [androidJvm]open fun onTopResumedActivityChanged(p0: Boolean) onTouchEvent [androidJvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [androidJvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onTrimMemory [androidJvm]open override fun onTrimMemory(level: Int) onUserInteraction [androidJvm]open fun onUserInteraction() onVisibleBehindCanceled [androidJvm]open fun ~~onVisibleBehindCanceled~~() onWindowAttributesChanged [androidJvm]open override fun onWindowAttributesChanged(p0: WindowManager.LayoutParams) onWindowFocusChanged [androidJvm]open override fun onWindowFocusChanged(p0: Boolean) onWindowStartingActionMode [androidJvm]open override fun onWindowStartingActionMode(p0: ActionMode.Callback): ActionMode?open override fun onWindowStartingActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? openContextMenu [androidJvm]open fun openContextMenu(p0: View) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOptionsMenu [androidJvm]open fun openOptionsMenu() openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase overrideActivityTransition [androidJvm]open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int)open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int, p3: Int) overridePendingTransition [androidJvm]open fun ~~overridePendingTransition~~(p0: Int, p1: Int)open fun ~~overridePendingTransition~~(p0: Int, p1: Int, p2: Int) peekAvailableContext [androidJvm]open override fun peekAvailableContext(): Context? peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable postponeEnterTransition [androidJvm]open fun postponeEnterTransition() putExtraData [androidJvm]open fun ~~putExtraData~~(extraData: ComponentActivity.ExtraData) recreate [androidJvm]open fun recreate() registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerForActivityResult [androidJvm]override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;override fun &lt;I, O&gt; registerForActivityResult(contract: ActivityResultContract&lt;I, O&gt;, registry: ActivityResultRegistry, callback: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(p0: View) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? registerScreenCaptureCallback [androidJvm]open fun registerScreenCaptureCallback(p0: Executor, p1: Activity.ScreenCaptureCallback) releaseInstance [androidJvm]open fun releaseInstance(): Boolean removeDialog [androidJvm]fun ~~removeDialog~~(p0: Int) removeMenuProvider [androidJvm]open override fun removeMenuProvider(provider: MenuProvider) removeOnConfigurationChangedListener [androidJvm]override fun removeOnConfigurationChangedListener(listener: Consumer&lt;Configuration&gt;) removeOnContextAvailableListener [androidJvm]override fun removeOnContextAvailableListener(listener: OnContextAvailableListener) removeOnMultiWindowModeChangedListener [androidJvm]override fun removeOnMultiWindowModeChangedListener(listener: Consumer&lt;MultiWindowModeChangedInfo&gt;) removeOnNewIntentListener [androidJvm]override fun removeOnNewIntentListener(listener: Consumer&lt;Intent&gt;) removeOnPictureInPictureModeChangedListener [androidJvm]override fun removeOnPictureInPictureModeChangedListener(listener: Consumer&lt;PictureInPictureModeChangedInfo&gt;) removeOnTrimMemoryListener [androidJvm]override fun removeOnTrimMemoryListener(listener: Consumer&lt;Int&gt;) removeOnUserLeaveHintListener [androidJvm]override fun removeOnUserLeaveHintListener(listener: Runnable) removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) reportFullyDrawn [androidJvm]open override fun reportFullyDrawn() requestDragAndDropPermissions [androidJvm]open fun requestDragAndDropPermissions(p0: DragEvent): DragAndDropPermissions requestFullscreenMode [androidJvm]open fun requestFullscreenMode(p0: Int, p1: OutcomeReceiver&lt;Void, Throwable&gt;?) requestPermissions [androidJvm]fun requestPermissions(p0: Array&lt;String&gt;, p1: Int)fun requestPermissions(p0: Array&lt;String&gt;, p1: Int, p2: Int) requestShowKeyboardShortcuts [androidJvm]fun requestShowKeyboardShortcuts() requestVisibleBehind [androidJvm]open fun ~~requestVisibleBehind~~(p0: Boolean): Boolean requestWindowFeature [androidJvm]fun requestWindowFeature(p0: Int): Boolean requireViewById [androidJvm]fun &lt;T : View&gt; requireViewById(p0: Int): T &amp; Any revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) runOnUiThread [androidJvm]fun runOnUiThread(p0: Runnable) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setActionBar [androidJvm]open fun setActionBar(p0: Toolbar?) setAllowCrossUidActivitySwitchFromBelow [androidJvm]open fun setAllowCrossUidActivitySwitchFromBelow(p0: Boolean) setContentTransitionManager [androidJvm]open fun setContentTransitionManager(p0: TransitionManager) setContentView [androidJvm]open override fun setContentView(view: View?)open override fun setContentView(layoutResID: Int)open override fun setContentView(view: View?, params: ViewGroup.LayoutParams?) setDefaultKeyMode [androidJvm]fun setDefaultKeyMode(p0: Int) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(p0: SharedElementCallback) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(p0: SharedElementCallback) setFeatureDrawable [androidJvm]fun setFeatureDrawable(p0: Int, p1: Drawable) setFeatureDrawableAlpha [androidJvm]fun setFeatureDrawableAlpha(p0: Int, p1: Int) setFeatureDrawableResource [androidJvm]fun setFeatureDrawableResource(p0: Int, p1: Int) setFeatureDrawableUri [androidJvm]fun setFeatureDrawableUri(p0: Int, p1: Uri) setFinishOnTouchOutside [androidJvm]open fun setFinishOnTouchOutside(p0: Boolean) setImmersive [androidJvm]open fun setImmersive(p0: Boolean) setInheritShowWhenLocked [androidJvm]open fun setInheritShowWhenLocked(p0: Boolean) setIntent [androidJvm]open fun setIntent(p0: Intent)open fun setIntent(p0: Intent?, p1: ComponentCaller?) setLocusContext [androidJvm]open fun setLocusContext(p0: LocusId?, p1: Bundle?) setMediaController [androidJvm]fun setMediaController(p0: MediaController) setPictureInPictureParams [androidJvm]open fun setPictureInPictureParams(p0: PictureInPictureParams) setProgress [androidJvm]fun ~~setProgress~~(p0: Int) setProgressBarIndeterminate [androidJvm]fun ~~setProgressBarIndeterminate~~(p0: Boolean) setProgressBarIndeterminateVisibility [androidJvm]fun ~~setProgressBarIndeterminateVisibility~~(p0: Boolean) setProgressBarVisibility [androidJvm]fun ~~setProgressBarVisibility~~(p0: Boolean) setRecentsScreenshotEnabled [androidJvm]open fun setRecentsScreenshotEnabled(p0: Boolean) setRequestedOrientation [androidJvm]open fun setRequestedOrientation(p0: Int) setResult [androidJvm]fun setResult(p0: Int)fun setResult(p0: Int, p1: Intent) setSecondaryProgress [androidJvm]fun ~~setSecondaryProgress~~(p0: Int) setShouldDockBigOverlays [androidJvm]open fun setShouldDockBigOverlays(p0: Boolean) setShowWhenLocked [androidJvm]open fun setShowWhenLocked(p0: Boolean) setTaskDescription [androidJvm]open fun setTaskDescription(p0: ActivityManager.TaskDescription) setTheme [androidJvm]open override fun setTheme(p0: Int)open fun setTheme(p0: Resources.Theme?) setTitle [androidJvm]open fun setTitle(p0: CharSequence)open fun setTitle(p0: Int) setTitleColor [androidJvm]open fun ~~setTitleColor~~(p0: Int) setTranslucent [androidJvm]open fun setTranslucent(p0: Boolean): Boolean setTurnScreenOn [androidJvm]open fun setTurnScreenOn(p0: Boolean) setVisible [androidJvm]open fun setVisible(p0: Boolean) setVolumeControlStream [androidJvm]fun setVolumeControlStream(p0: Int) setVrModeEnabled [androidJvm]open fun setVrModeEnabled(p0: Boolean, p1: ComponentName) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) shouldDockBigOverlays [androidJvm]open fun shouldDockBigOverlays(): Boolean shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(p0: String): Booleanopen fun shouldShowRequestPermissionRationale(p0: String, p1: Int): Boolean shouldUpRecreateTask [androidJvm]open fun shouldUpRecreateTask(p0: Intent): Boolean showAssist [androidJvm]open fun showAssist(p0: Bundle): Boolean showDialog [androidJvm]fun ~~showDialog~~(p0: Int)fun ~~showDialog~~(p0: Int, p1: Bundle): Boolean showLockTaskEscapeMessage [androidJvm]open fun showLockTaskEscapeMessage() startActionMode [androidJvm]open fun startActionMode(p0: ActionMode.Callback): ActionMode?open fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startActivityForResult [androidJvm]open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int)open override fun ~~startActivityForResult~~(intent: Intent, requestCode: Int, options: Bundle?) startActivityFromChild [androidJvm]open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int)open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int, p3: Bundle?) startActivityFromFragment [androidJvm]open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int)open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int, p3: Bundle?) startActivityIfNeeded [androidJvm]open fun startActivityIfNeeded(p0: Intent, p1: Int): Booleanopen fun startActivityIfNeeded(p0: Intent, p1: Int, p2: Bundle?): Boolean startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startIntentSenderForResult [androidJvm]open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int)open override fun ~~startIntentSenderForResult~~(intent: IntentSender, requestCode: Int, fillInIntent: Intent?, flagsMask: Int, flagsValues: Int, extraFlags: Int, options: Bundle?) startIntentSenderFromChild [androidJvm]open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int)open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int, p7: Bundle?) startLocalVoiceInteraction [androidJvm]open fun startLocalVoiceInteraction(p0: Bundle) startLockTask [androidJvm]open fun startLockTask() startManagingCursor [androidJvm]open fun ~~startManagingCursor~~(p0: Cursor) startNextMatchingActivity [androidJvm]open fun startNextMatchingActivity(p0: Intent): Booleanopen fun startNextMatchingActivity(p0: Intent, p1: Bundle?): Boolean startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() startSearch [androidJvm]open fun startSearch(p0: String?, p1: Boolean, p2: Bundle?, p3: Boolean) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopLocalVoiceInteraction [androidJvm]open fun stopLocalVoiceInteraction() stopLockTask [androidJvm]open fun stopLockTask() stopManagingCursor [androidJvm]open fun ~~stopManagingCursor~~(p0: Cursor) stopService [androidJvm]open override fun stopService(p0: Intent): Boolean superDispatchKeyEvent [androidJvm]open override fun superDispatchKeyEvent(event: KeyEvent): Boolean takeKeyEvents [androidJvm]open fun takeKeyEvents(p0: Boolean) triggerSearch [androidJvm]open fun triggerSearch(p0: String, p1: Bundle?) unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(p0: View) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) unregisterScreenCaptureCallback [androidJvm]open fun unregisterScreenCaptureCallback(p0: Activity.ScreenCaptureCallback) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"app/app/dev.atick.compose/-main-activity/-main-activity/","title":"main activity","text":"<p>//app/dev.atick.compose/MainActivity/MainActivity</p>"},{"location":"app/app/dev.atick.compose/-main-activity/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"app/app/dev.atick.compose/-main-activity/crash-reporter/","title":"Crash reporter","text":"<p>//app/dev.atick.compose/MainActivity/crashReporter</p>"},{"location":"app/app/dev.atick.compose/-main-activity/crash-reporter/#crashreporter","title":"crashReporter","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var crashReporter: CrashReporter</p>"},{"location":"app/app/dev.atick.compose/-main-activity/network-utils/","title":"Network utils","text":"<p>//app/dev.atick.compose/MainActivity/networkUtils</p>"},{"location":"app/app/dev.atick.compose/-main-activity/network-utils/#networkutils","title":"networkUtils","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>lateinit var networkUtils: NetworkUtils</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/","title":"Index","text":"<p>//app/dev.atick.compose/MainActivityViewModel</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>class MainActivityViewModel@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource) : ViewModel</p> <p>Annotates a ViewModel class that is managed by Hilt's dependency injection system.</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSource The repository providing access to user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#constructors","title":"Constructors","text":"MainActivityViewModel [androidJvm]@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource)Creates a MainActivityViewModel instance."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#properties","title":"Properties","text":"Name Summary uiState [androidJvm]val uiState: StateFlow&lt;UiState&lt;UserDataPreferences&gt;&gt;Represents the state of the UI for user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T?"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/","title":"main activity view model","text":"<p>//app/dev.atick.compose/MainActivityViewModel/MainActivityViewModel</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#mainactivityviewmodel","title":"MainActivityViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userPreferencesDataSource: UserPreferencesDataSource)</p> <p>Creates a MainActivityViewModel instance.</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/-main-activity-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSource The repository providing access to user data."},{"location":"app/app/dev.atick.compose/-main-activity-view-model/ui-state/","title":"Ui state","text":"<p>//app/dev.atick.compose/MainActivityViewModel/uiState</p>"},{"location":"app/app/dev.atick.compose/-main-activity-view-model/ui-state/#uistate","title":"uiState","text":"<p>[androidJvm]\\ val uiState: StateFlow&lt;UiState&lt;UserDataPreferences&gt;&gt;</p> <p>Represents the state of the UI for user data.</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/","title":"Index","text":"<p>//app/dev.atick.compose/ThemeSettings</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/#themesettings","title":"ThemeSettings","text":"<p>[androidJvm]\\ data class ThemeSettings(val darkTheme: Boolean, val disableDynamicTheming: Boolean = true)</p> <p>Class for the system theme settings. This wrapping class allows us to combine all the changes and prevent unnecessary recompositions.</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/#constructors","title":"Constructors","text":"ThemeSettings [androidJvm]constructor(darkTheme: Boolean, disableDynamicTheming: Boolean = true)"},{"location":"app/app/dev.atick.compose/-theme-settings/#properties","title":"Properties","text":"Name Summary darkTheme [androidJvm]val darkTheme: Boolean disableDynamicTheming [androidJvm]val disableDynamicTheming: Boolean = true"},{"location":"app/app/dev.atick.compose/-theme-settings/-theme-settings/","title":"theme settings","text":"<p>//app/dev.atick.compose/ThemeSettings/ThemeSettings</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/-theme-settings/#themesettings","title":"ThemeSettings","text":"<p>[androidJvm]\\ constructor(darkTheme: Boolean, disableDynamicTheming: Boolean = true)</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/dark-theme/","title":"Dark theme","text":"<p>//app/dev.atick.compose/ThemeSettings/darkTheme</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/dark-theme/#darktheme","title":"darkTheme","text":"<p>[androidJvm]\\ val darkTheme: Boolean</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/disable-dynamic-theming/","title":"Disable dynamic theming","text":"<p>//app/dev.atick.compose/ThemeSettings/disableDynamicTheming</p>"},{"location":"app/app/dev.atick.compose/-theme-settings/disable-dynamic-theming/#disabledynamictheming","title":"disableDynamicTheming","text":"<p>[androidJvm]\\ val disableDynamicTheming: Boolean = true</p>"},{"location":"app/app/dev.atick.compose.navigation/","title":"Index","text":"<p>//app/dev.atick.compose.navigation</p>"},{"location":"app/app/dev.atick.compose.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.navigation/#types","title":"Types","text":"Name Summary TopLevelDestination [androidJvm]enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; Enum class representing top-level destinations in a navigation system."},{"location":"app/app/dev.atick.compose.navigation/#functions","title":"Functions","text":"Name Summary JetpackNavHost [androidJvm]@Composablefun JetpackNavHost(appState: JetpackAppState, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, modifier: Modifier = Modifier)Composable function that sets up the navigation host for the Jetpack Compose application."},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/","title":"jetpack nav host","text":"<p>//app/dev.atick.compose.navigation/JetpackNavHost</p>"},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/#jetpacknavhost","title":"JetpackNavHost","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavHost(appState: JetpackAppState, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, modifier: Modifier = Modifier)</p> <p>Composable function that sets up the navigation host for the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.navigation/-jetpack-nav-host/#parameters","title":"Parameters","text":"<p>androidJvm</p> appState The state of the Jetpack application, containing the navigation controller and user login status. onShowSnackbar A lambda function to show a snackbar with a message and an action. modifier The modifier to be applied to the NavHost."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#topleveldestination","title":"TopLevelDestination","text":"<p>[androidJvm]\\ enum TopLevelDestination : Enum&lt;TopLevelDestination&gt; </p> <p>Enum class representing top-level destinations in a navigation system.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#entries","title":"Entries","text":"HOME [androidJvm]HOME PROFILE [androidJvm]PROFILE"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;TopLevelDestination&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): TopLevelDestinationReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;TopLevelDestination&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/entries/","title":"Entries","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/entries</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;TopLevelDestination&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/icon-text-id/","title":"Icon text id","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/iconTextId</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/icon-text-id/#icontextid","title":"iconTextId","text":"<p>[androidJvm]\\ val iconTextId: Int</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/route/","title":"Route","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/route</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/route/#route","title":"route","text":"<p>[androidJvm]\\ val route: KClass&lt;*&gt;</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/selected-icon/","title":"Selected icon","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/selectedIcon</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/selected-icon/#selectedicon","title":"selectedIcon","text":"<p>[androidJvm]\\ val selectedIcon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/title-text-id/","title":"Title text id","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/titleTextId</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/title-text-id/#titletextid","title":"titleTextId","text":"<p>[androidJvm]\\ val titleTextId: Int</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/unselected-icon/","title":"Unselected icon","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/unselectedIcon</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/unselected-icon/#unselectedicon","title":"unselectedIcon","text":"<p>[androidJvm]\\ val unselectedIcon: ImageVector</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/","title":"Value of","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/valueOf</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): TopLevelDestination</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/values/","title":"Values","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/values</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;TopLevelDestination&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/HOME</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/#home","title":"HOME","text":"<p>[androidJvm]\\ HOME</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-h-o-m-e/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-p-r-o-f-i-l-e/","title":"Index","text":"<p>//app/dev.atick.compose.navigation/TopLevelDestination/PROFILE</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-p-r-o-f-i-l-e/#profile","title":"PROFILE","text":"<p>[androidJvm]\\ PROFILE</p>"},{"location":"app/app/dev.atick.compose.navigation/-top-level-destination/-p-r-o-f-i-l-e/#properties","title":"Properties","text":"Name Summary iconTextId [androidJvm]val iconTextId: IntThe resource ID for the icon's content description text. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int route [androidJvm]val route: KClass&lt;*&gt;The route associated with the destination. selectedIcon [androidJvm]val selectedIcon: ImageVectorThe selected icon associated with the destination. titleTextId [androidJvm]val titleTextId: IntThe resource ID for the title text. unselectedIcon [androidJvm]val unselectedIcon: ImageVectorThe unselected icon associated with the destination."},{"location":"app/app/dev.atick.compose.ui/","title":"Index","text":"<p>//app/dev.atick.compose.ui</p>"},{"location":"app/app/dev.atick.compose.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"app/app/dev.atick.compose.ui/#types","title":"Types","text":"Name Summary JetpackAppState [androidJvm]@Stableclass JetpackAppState(val isUserLoggedIn: Boolean, val userProfilePictureUri: String?, val navController: NavHostController, val windowSizeClass: WindowSizeClass, val crashReporter: CrashReporter, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)State holder class for the Jetpack Compose application."},{"location":"app/app/dev.atick.compose.ui/#functions","title":"Functions","text":"Name Summary JetpackApp [androidJvm]@Composablefun JetpackApp(appState: JetpackAppState, modifier: Modifier = Modifier, windowAdaptiveInfo: WindowAdaptiveInfo = currentWindowAdaptiveInfo())Composable function that represents the Jetpack Compose application. rememberJetpackAppState [androidJvm]@Composablefun rememberJetpackAppState(isUserLoggedIn: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, crashReporter: CrashReporter, userProfilePictureUri: String? = null, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppStateRemembers and creates an instance of JetpackAppState."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/","title":"jetpack app","text":"<p>//app/dev.atick.compose.ui/JetpackApp</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/#jetpackapp","title":"JetpackApp","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackApp(appState: JetpackAppState, modifier: Modifier = Modifier, windowAdaptiveInfo: WindowAdaptiveInfo = currentWindowAdaptiveInfo())</p> <p>Composable function that represents the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app/#parameters","title":"Parameters","text":"<p>androidJvm</p> appState The state of the Jetpack application. modifier The modifier to be applied to the Jetpack application. windowAdaptiveInfo The window adaptive information."},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/","title":"Remember jetpack app state","text":"<p>//app/dev.atick.compose.ui/rememberJetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#rememberjetpackappstate","title":"rememberJetpackAppState","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun rememberJetpackAppState(isUserLoggedIn: Boolean, windowSizeClass: WindowSizeClass, networkUtils: NetworkUtils, crashReporter: CrashReporter, userProfilePictureUri: String? = null, coroutineScope: CoroutineScope = rememberCoroutineScope(), navController: NavHostController = rememberNavController()): JetpackAppState</p> <p>Remembers and creates an instance of JetpackAppState.</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#return","title":"Return","text":"<p>An instance of JetpackAppState.</p>"},{"location":"app/app/dev.atick.compose.ui/remember-jetpack-app-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> isUserLoggedIn Indicates if the user is logged in. windowSizeClass The current window size class. networkUtils Utility for network state management. crashReporter Utility for reporting exceptions. userProfilePictureUri The URI of the user's profile picture. coroutineScope The coroutine scope for managing coroutines. navController The navigation controller for managing navigation."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/","title":"Index","text":"<p>//app/dev.atick.compose.ui/JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>@Stable</p> <p>class JetpackAppState(val isUserLoggedIn: Boolean, val userProfilePictureUri: String?, val navController: NavHostController, val windowSizeClass: WindowSizeClass, val crashReporter: CrashReporter, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p> <p>State holder class for the Jetpack Compose application.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> coroutineScope The coroutine scope for managing coroutines. networkUtils Utility for network state management."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#constructors","title":"Constructors","text":"JetpackAppState [androidJvm]constructor(isUserLoggedIn: Boolean, userProfilePictureUri: String?, navController: NavHostController, windowSizeClass: WindowSizeClass, crashReporter: CrashReporter, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#properties","title":"Properties","text":"Name Summary crashReporter [androidJvm]val crashReporter: CrashReporterUtility for reporting exceptions. currentDestination [androidJvm]@get:Composableval currentDestination: NavDestination?The current navigation destination. currentTopLevelDestination [androidJvm]@get:Composableval currentTopLevelDestination: TopLevelDestination?The current top-level navigation destination. isOffline [androidJvm]val isOffline: StateFlow&lt;Boolean&gt;Indicates if the application is offline. isUserLoggedIn [androidJvm]val isUserLoggedIn: BooleanIndicates if the user is logged in. navController [androidJvm]val navController: NavHostControllerThe navigation controller for managing navigation. shouldShowFab [androidJvm]@get:Composableval shouldShowFab: BooleanIndicates if the FAB should be shown. topLevelDestinations [androidJvm]val topLevelDestinations: List&lt;TopLevelDestination&gt;List of top-level destinations. topLevelDestinationsWithUnreadResources [androidJvm]val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt;State flow of top-level destinations with unread resources. userProfilePictureUri [androidJvm]val userProfilePictureUri: String?The URI of the user's profile picture. windowSizeClass [androidJvm]val windowSizeClass: WindowSizeClassThe current window size class."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/#functions","title":"Functions","text":"Name Summary navigateToItemScreen [androidJvm]fun navigateToItemScreen()Navigates to the item screen with no item ID (creates new item). navigateToTopLevelDestination [androidJvm]fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)Navigates to the specified top-level destination."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/","title":"jetpack app state","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/JetpackAppState</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/#jetpackappstate","title":"JetpackAppState","text":"<p>[androidJvm]\\ constructor(isUserLoggedIn: Boolean, userProfilePictureUri: String?, navController: NavHostController, windowSizeClass: WindowSizeClass, crashReporter: CrashReporter, coroutineScope: CoroutineScope, networkUtils: NetworkUtils)</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/-jetpack-app-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> coroutineScope The coroutine scope for managing coroutines. networkUtils Utility for network state management."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/crash-reporter/","title":"Crash reporter","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/crashReporter</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/crash-reporter/#crashreporter","title":"crashReporter","text":"<p>[androidJvm]\\ val crashReporter: CrashReporter</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-destination/","title":"Current destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/currentDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-destination/#currentdestination","title":"currentDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentDestination: NavDestination?</p> <p>The current navigation destination.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/","title":"Current top level destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/currentTopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/current-top-level-destination/#currenttopleveldestination","title":"currentTopLevelDestination","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val currentTopLevelDestination: TopLevelDestination?</p> <p>The current top-level navigation destination.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-offline/","title":"Is offline","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/isOffline</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-offline/#isoffline","title":"isOffline","text":"<p>[androidJvm]\\ val isOffline: StateFlow&lt;Boolean&gt;</p> <p>Indicates if the application is offline.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-user-logged-in/","title":"Is user logged in","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/isUserLoggedIn</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/is-user-logged-in/#isuserloggedin","title":"isUserLoggedIn","text":"<p>[androidJvm]\\ val isUserLoggedIn: Boolean</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/nav-controller/","title":"Nav controller","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navController</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/nav-controller/#navcontroller","title":"navController","text":"<p>[androidJvm]\\ val navController: NavHostController</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-item-screen/","title":"Navigate to item screen","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navigateToItemScreen</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-item-screen/#navigatetoitemscreen","title":"navigateToItemScreen","text":"<p>[androidJvm]\\ fun navigateToItemScreen()</p> <p>Navigates to the item screen with no item ID (creates new item).</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/","title":"Navigate to top level destination","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/navigateToTopLevelDestination</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/#navigatetotopleveldestination","title":"navigateToTopLevelDestination","text":"<p>[androidJvm]\\ fun navigateToTopLevelDestination(topLevelDestination: TopLevelDestination)</p> <p>Navigates to the specified top-level destination.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/navigate-to-top-level-destination/#parameters","title":"Parameters","text":"<p>androidJvm</p> topLevelDestination The top-level destination to navigate to."},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-fab/","title":"Should show fab","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/shouldShowFab</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/should-show-fab/#shouldshowfab","title":"shouldShowFab","text":"<p>[androidJvm]\\</p> <p>@get:Composable</p> <p>val shouldShowFab: Boolean</p> <p>Indicates if the FAB should be shown.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/","title":"Top level destinations with unread resources","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/topLevelDestinationsWithUnreadResources</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations-with-unread-resources/#topleveldestinationswithunreadresources","title":"topLevelDestinationsWithUnreadResources","text":"<p>[androidJvm]\\ val topLevelDestinationsWithUnreadResources: StateFlow&lt;Set&lt;TopLevelDestination&gt;&gt;</p> <p>State flow of top-level destinations with unread resources.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/","title":"Top level destinations","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/topLevelDestinations</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/top-level-destinations/#topleveldestinations","title":"topLevelDestinations","text":"<p>[androidJvm]\\ val topLevelDestinations: List&lt;TopLevelDestination&gt;</p> <p>List of top-level destinations.</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/user-profile-picture-uri/","title":"User profile picture uri","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/userProfilePictureUri</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/user-profile-picture-uri/#userprofilepictureuri","title":"userProfilePictureUri","text":"<p>[androidJvm]\\ val userProfilePictureUri: String?</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/window-size-class/","title":"Window size class","text":"<p>//app/dev.atick.compose.ui/JetpackAppState/windowSizeClass</p>"},{"location":"app/app/dev.atick.compose.ui/-jetpack-app-state/window-size-class/#windowsizeclass","title":"windowSizeClass","text":"<p>[androidJvm]\\ val windowSizeClass: WindowSizeClass</p>"},{"location":"core/android/","title":"Index","text":"<p>//android</p>"},{"location":"core/android/#android","title":"android","text":""},{"location":"core/android/#packages","title":"Packages","text":"Name dev.atick.core.di dev.atick.core.extensions dev.atick.core.utils"},{"location":"core/android/android/dev.atick.core.di/","title":"Index","text":"<p>//android/dev.atick.core.di</p>"},{"location":"core/android/android/dev.atick.core.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.di/#types","title":"Types","text":"Name Summary ApplicationScope [androidJvm]@Qualifierannotation class ApplicationScopeAnnotation used to mark the application scope. CoroutineModule [androidJvm]@Moduleobject CoroutineModuleDagger module that provides a CoroutineScope tied to the application lifecycle. DefaultDispatcher [androidJvm]@Qualifierannotation class DefaultDispatcherAnnotation used to mark the default coroutine dispatcher. DispatcherModule [androidJvm]@Moduleobject DispatcherModuleDagger module that provides coroutine dispatchers for different contexts. IoDispatcher [androidJvm]@Qualifierannotation class IoDispatcherAnnotation used to mark the I/O coroutine dispatcher. MainDispatcher [androidJvm]@Qualifierannotation class MainDispatcherAnnotation used to mark the main coroutine dispatcher. StringDecoderModule [androidJvm]@Moduleabstract class StringDecoderModuleDagger module providing bindings for StringDecoder implementations."},{"location":"core/android/android/dev.atick.core.di/-application-scope/","title":"Index","text":"<p>//android/dev.atick.core.di/ApplicationScope</p>"},{"location":"core/android/android/dev.atick.core.di/-application-scope/#applicationscope","title":"ApplicationScope","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class ApplicationScope</p> <p>Annotation used to mark the application scope.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/","title":"Index","text":"<p>//android/dev.atick.core.di/CoroutineModule</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/#coroutinemodule","title":"CoroutineModule","text":"<p>[androidJvm]\\ @Module</p> <p>object CoroutineModule</p> <p>Dagger module that provides a CoroutineScope tied to the application lifecycle.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/#functions","title":"Functions","text":"Name Summary providesCoroutineScope [androidJvm]@Provides@Singletonfun providesCoroutineScope(dispatcher: CoroutineDispatcher): CoroutineScopeProvides a CoroutineScope that is tied to the application lifecycle."},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/","title":"Provides coroutine scope","text":"<p>//android/dev.atick.core.di/CoroutineModule/providesCoroutineScope</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/#providescoroutinescope","title":"providesCoroutineScope","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun providesCoroutineScope(dispatcher: CoroutineDispatcher): CoroutineScope</p> <p>Provides a CoroutineScope that is tied to the application lifecycle.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/#return","title":"Return","text":"<p>A CoroutineScope with a SupervisorJob and the provided dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-coroutine-module/provides-coroutine-scope/#parameters","title":"Parameters","text":"<p>androidJvm</p> dispatcher The CoroutineDispatcher to be used by the CoroutineScope."},{"location":"core/android/android/dev.atick.core.di/-default-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/DefaultDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-default-dispatcher/#defaultdispatcher","title":"DefaultDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class DefaultDispatcher</p> <p>Annotation used to mark the default coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/","title":"Index","text":"<p>//android/dev.atick.core.di/DispatcherModule</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/#dispatchermodule","title":"DispatcherModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DispatcherModule</p> <p>Dagger module that provides coroutine dispatchers for different contexts.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/#functions","title":"Functions","text":"Name Summary providesDefaultDispatcher [androidJvm]@Providesfun providesDefaultDispatcher(): CoroutineDispatcherProvides the default coroutine dispatcher, which is used for general-purpose background tasks. providesIoDispatcher [androidJvm]@Providesfun providesIoDispatcher(): CoroutineDispatcherProvides the I/O coroutine dispatcher, which is used for I/O-bound tasks such as disk or network operations. providesMainDispatcher [androidJvm]@Providesfun providesMainDispatcher(): CoroutineDispatcherProvides the main coroutine dispatcher, which is used for executing tasks on the main/UI thread."},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/","title":"Provides default dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesDefaultDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/#providesdefaultdispatcher","title":"providesDefaultDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesDefaultDispatcher(): CoroutineDispatcher</p> <p>Provides the default coroutine dispatcher, which is used for general-purpose background tasks.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-default-dispatcher/#return","title":"Return","text":"<p>The default coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/","title":"Provides io dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesIoDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/#providesiodispatcher","title":"providesIoDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesIoDispatcher(): CoroutineDispatcher</p> <p>Provides the I/O coroutine dispatcher, which is used for I/O-bound tasks such as disk or network operations.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-io-dispatcher/#return","title":"Return","text":"<p>The I/O coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/","title":"Provides main dispatcher","text":"<p>//android/dev.atick.core.di/DispatcherModule/providesMainDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/#providesmaindispatcher","title":"providesMainDispatcher","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>fun providesMainDispatcher(): CoroutineDispatcher</p> <p>Provides the main coroutine dispatcher, which is used for executing tasks on the main/UI thread.</p>"},{"location":"core/android/android/dev.atick.core.di/-dispatcher-module/provides-main-dispatcher/#return","title":"Return","text":"<p>The main coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-io-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/IoDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-io-dispatcher/#iodispatcher","title":"IoDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class IoDispatcher</p> <p>Annotation used to mark the I/O coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-main-dispatcher/","title":"Index","text":"<p>//android/dev.atick.core.di/MainDispatcher</p>"},{"location":"core/android/android/dev.atick.core.di/-main-dispatcher/#maindispatcher","title":"MainDispatcher","text":"<p>[androidJvm]\\ @Qualifier</p> <p>annotation class MainDispatcher</p> <p>Annotation used to mark the main coroutine dispatcher.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/","title":"Index","text":"<p>//android/dev.atick.core.di/StringDecoderModule</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#stringdecodermodule","title":"StringDecoderModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class StringDecoderModule</p> <p>Dagger module providing bindings for StringDecoder implementations.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#constructors","title":"Constructors","text":"StringDecoderModule [androidJvm]constructor()"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/#functions","title":"Functions","text":"Name Summary bindStringDecoder [androidJvm]@Bindsabstract fun bindStringDecoder(uriDecoder: UriDecoder): StringDecoderBinds the provided UriDecoder instance as the implementation for StringDecoder."},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/-string-decoder-module/","title":"string decoder module","text":"<p>//android/dev.atick.core.di/StringDecoderModule/StringDecoderModule</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/-string-decoder-module/#stringdecodermodule","title":"StringDecoderModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/","title":"Bind string decoder","text":"<p>//android/dev.atick.core.di/StringDecoderModule/bindStringDecoder</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/#bindstringdecoder","title":"bindStringDecoder","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>abstract fun bindStringDecoder(uriDecoder: UriDecoder): StringDecoder</p> <p>Binds the provided UriDecoder instance as the implementation for StringDecoder.</p>"},{"location":"core/android/android/dev.atick.core.di/-string-decoder-module/bind-string-decoder/#parameters","title":"Parameters","text":"<p>androidJvm</p> uriDecoder The instance of UriDecoder to be bound as StringDecoder."},{"location":"core/android/android/dev.atick.core.extensions/","title":"Index","text":"<p>//android/dev.atick.core.extensions</p>"},{"location":"core/android/android/dev.atick.core.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.extensions/#types","title":"Types","text":"Name Summary Options [androidJvm]annotation class OptionsAnnotation to define the valid options for notification importance levels."},{"location":"core/android/android/dev.atick.core.extensions/#functions","title":"Functions","text":"Name Summary asFormattedDateTime [androidJvm]fun Long.asFormattedDateTime(): StringFormats a Long timestamp to a human-readable date-time string. Uses the system default time zone. asOneTimeEvent [androidJvm]fun Throwable.asOneTimeEvent(): OneTimeEvent&lt;Throwable?&gt;Extension function to convert a Throwable into a OneTimeEvent. cancelNotification [androidJvm]fun Context.cancelNotification(notificationId: Int)Cancels a previously shown notification. createNotification [androidJvm]fun Context.createNotification(channelId: String, @StringRestitle: Int, @StringRescontent: Int, icon: Int, pendingIntent: PendingIntent? = null): Notificationfun Context.createNotification(channelId: String, title: String, content: String, icon: Int, pendingIntent: PendingIntent? = null): NotificationCreates a notification using the specified channel ID, title, content, and icon. createNotificationChannel [androidJvm]fun Context.createNotificationChannel(channelId: String, @StringReschannelName: Int, @StringReschannelDescription: Int, importance: Int)Creates a notification channel with the specified channel ID, name, description, and importance. createProgressNotification [androidJvm]fun Context.createProgressNotification(channelId: String, @StringRestitle: Int, total: Int, current: Int, @DrawableResicon: Int, pendingIntent: PendingIntent? = null): NotificationCreates a progress notification using the specified channel ID, title, total, current, and icon. format [androidJvm]fun &lt;T : Number, Comparable&lt;T&gt;&gt; T.format(nDecimal: Int = 2): StringFormats a number (Float or Double) to a string with specified number of decimal places. Handles special cases like NaN and Infinity. Uses locale-specific decimal separator. Removes trailing zeros after decimal point. getActivity [androidJvm]fun Context.getActivity(): ComponentActivity?Provides the activity from Context (https://stackoverflow.com/a/68423182/12737399) getFileFromContentUri [androidJvm]fun Context.getFileFromContentUri(contentUri: Uri): FileRetrieves a File object from the given content URI. getStackTraceString [androidJvm]fun Throwable.getStackTraceString(): StringExtension function to get the stack trace of a Throwable as a string. getTmpFileUri [androidJvm]fun Context.getTmpFileUri(appId: String): UriRetrieves a temporary file URI for the specified app ID. hasPermission [androidJvm]fun Context.hasPermission(permission: String): BooleanChecks if the app has a given permission. isAllPermissionsGranted [androidJvm]fun Context.isAllPermissionsGranted(permissions: List&lt;String&gt;): BooleanChecks if all the given permissions are granted. isEmailValid [androidJvm]fun String?.isEmailValid(): BooleanChecks if the string is a valid email address. isPasswordValid [androidJvm]fun String?.isPasswordValid(): BooleanChecks if the string is a valid password based on the specified criteria. isValidFullName [androidJvm]fun String?.isValidFullName(): BooleanChecks if a given full name is valid. showNotification [androidJvm]fun Context.showNotification(notificationId: Int, notification: Notification)Shows a notification using the specified notification ID and notification object. showToast [androidJvm]fun Context.showToast(message: String)Displays a short toast message. stateInDelayed [androidJvm]fun &lt;T&gt; Flow&lt;T&gt;.stateInDelayed(initialValue: T, scope: CoroutineScope): StateFlow&lt;T&gt;Returns a StateFlow that represents the last value emitted by the Flow"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/","title":"As formatted date time","text":"<p>//android/dev.atick.core.extensions/asFormattedDateTime</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/#asformatteddatetime","title":"asFormattedDateTime","text":"<p>[androidJvm]\\ fun Long.asFormattedDateTime(): String</p> <p>Formats a Long timestamp to a human-readable date-time string. Uses the system default time zone.</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-formatted-date-time/#return","title":"Return","text":"<p>Formatted date-time string</p> <p>Example: 1640995200000L.asFormattedDateTime() -&gt; \"December 31, 2021 at 11:59 PM\"</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-one-time-event/","title":"As one time event","text":"<p>//android/dev.atick.core.extensions/asOneTimeEvent</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-one-time-event/#asonetimeevent","title":"asOneTimeEvent","text":"<p>[androidJvm]\\ fun Throwable.asOneTimeEvent(): OneTimeEvent&lt;Throwable?&gt;</p> <p>Extension function to convert a Throwable into a OneTimeEvent.</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-one-time-event/#receiver","title":"Receiver","text":"<p>Throwable The throwable instance.</p>"},{"location":"core/android/android/dev.atick.core.extensions/as-one-time-event/#return","title":"Return","text":"<p>A OneTimeEvent containing the throwable.</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/","title":"Cancel notification","text":"<p>//android/dev.atick.core.extensions/cancelNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/#cancelnotification","title":"cancelNotification","text":"<p>[androidJvm]\\ fun Context.cancelNotification(notificationId: Int)</p> <p>Cancels a previously shown notification.</p>"},{"location":"core/android/android/dev.atick.core.extensions/cancel-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> notificationId The ID of the notification to be canceled."},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/","title":"Create notification channel","text":"<p>//android/dev.atick.core.extensions/createNotificationChannel</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/#createnotificationchannel","title":"createNotificationChannel","text":"<p>[androidJvm]\\ fun Context.createNotificationChannel(channelId: String, @StringReschannelName: Int, @StringReschannelDescription: Int, importance: Int)</p> <p>Creates a notification channel with the specified channel ID, name, description, and importance.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification-channel/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. channelName The name of the notification channel. channelDescription The description of the notification channel. importance The importance level of the notification channel."},{"location":"core/android/android/dev.atick.core.extensions/create-notification/","title":"Create notification","text":"<p>//android/dev.atick.core.extensions/createNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#createnotification","title":"createNotification","text":"<p>[androidJvm]\\ fun Context.createNotification(channelId: String, @StringRestitle: Int, @StringRescontent: Int, icon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>fun Context.createNotification(channelId: String, title: String, content: String, icon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>Creates a notification using the specified channel ID, title, content, and icon.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#return","title":"Return","text":"<p>The notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. title The title of the notification. content The content of the notification. icon The icon of the notification."},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/","title":"Create progress notification","text":"<p>//android/dev.atick.core.extensions/createProgressNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#createprogressnotification","title":"createProgressNotification","text":"<p>[androidJvm]\\ fun Context.createProgressNotification(channelId: String, @StringRestitle: Int, total: Int, current: Int, @DrawableResicon: Int, pendingIntent: PendingIntent? = null): Notification</p> <p>Creates a progress notification using the specified channel ID, title, total, current, and icon.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#return","title":"Return","text":"<p>The notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/create-progress-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> channelId The ID of the notification channel. title The title of the notification. total The total progress value. current The current progress value. icon The icon of the notification."},{"location":"core/android/android/dev.atick.core.extensions/format/","title":"Format","text":"<p>//android/dev.atick.core.extensions/format</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#format","title":"format","text":"<p>[androidJvm]\\ fun &lt;T : Number, Comparable&lt;T&gt;&gt; T.format(nDecimal: Int = 2): String</p> <p>Formats a number (Float or Double) to a string with specified number of decimal places. Handles special cases like NaN and Infinity. Uses locale-specific decimal separator. Removes trailing zeros after decimal point.</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#return","title":"Return","text":"<p>Formatted string representation of the number</p> <p>Examples: 123.4567.format() -&gt; \"123.46\" 123.4f.format() -&gt; \"123.40\" 123.0.format() -&gt; \"123\" (-123.45).format() -&gt; \"-123.45\" Double.NaN.format() -&gt; \"NaN\" Float.POSITIVE_INFINITY.format() -&gt; \"\u221e\"</p>"},{"location":"core/android/android/dev.atick.core.extensions/format/#parameters","title":"Parameters","text":"<p>androidJvm</p> nDecimal Number of decimal places (default is 2)"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/","title":"Get activity","text":"<p>//android/dev.atick.core.extensions/getActivity</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/#getactivity","title":"getActivity","text":"<p>[androidJvm]\\ fun Context.getActivity(): ComponentActivity?</p> <p>Provides the activity from Context (https://stackoverflow.com/a/68423182/12737399)</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-activity/#return","title":"Return","text":"<p>The activity associated with the context, or <code>null</code> if the context is not an activity.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/","title":"Get file from content uri","text":"<p>//android/dev.atick.core.extensions/getFileFromContentUri</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#getfilefromcontenturi","title":"getFileFromContentUri","text":"<p>[androidJvm]\\ fun Context.getFileFromContentUri(contentUri: Uri): File</p> <p>Retrieves a File object from the given content URI.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#return","title":"Return","text":"<p>The File object representing the content URI.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#parameters","title":"Parameters","text":"<p>androidJvm</p> contentUri The content URI of the file."},{"location":"core/android/android/dev.atick.core.extensions/get-file-from-content-uri/#throws","title":"Throws","text":"FileNotFoundException If the content URI cannot be opened or file cannot be created. IOException If there is an error during file operations. SecurityException If there are insufficient permissions to access the content."},{"location":"core/android/android/dev.atick.core.extensions/get-stack-trace-string/","title":"Get stack trace string","text":"<p>//android/dev.atick.core.extensions/getStackTraceString</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-stack-trace-string/#getstacktracestring","title":"getStackTraceString","text":"<p>[androidJvm]\\ fun Throwable.getStackTraceString(): String</p> <p>Extension function to get the stack trace of a Throwable as a string.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-stack-trace-string/#receiver","title":"Receiver","text":"<p>Throwable The throwable instance.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-stack-trace-string/#return","title":"Return","text":"<p>A string representation of the stack trace.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/","title":"Get tmp file uri","text":"<p>//android/dev.atick.core.extensions/getTmpFileUri</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#gettmpfileuri","title":"getTmpFileUri","text":"<p>[androidJvm]\\ fun Context.getTmpFileUri(appId: String): Uri</p> <p>Retrieves a temporary file URI for the specified app ID.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#return","title":"Return","text":"<p>The URI of the temporary file.</p>"},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#parameters","title":"Parameters","text":"<p>androidJvm</p> appId The ID of the app."},{"location":"core/android/android/dev.atick.core.extensions/get-tmp-file-uri/#throws","title":"Throws","text":"IllegalAccessException if unable to create or retrieve the temporary file."},{"location":"core/android/android/dev.atick.core.extensions/has-permission/","title":"Has permission","text":"<p>//android/dev.atick.core.extensions/hasPermission</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#haspermission","title":"hasPermission","text":"<p>[androidJvm]\\ fun Context.hasPermission(permission: String): Boolean</p> <p>Checks if the app has a given permission.</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#return","title":"Return","text":"<p><code>true</code> if the permission is granted, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/has-permission/#parameters","title":"Parameters","text":"<p>androidJvm</p> permission The permission to check."},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/","title":"Is all permissions granted","text":"<p>//android/dev.atick.core.extensions/isAllPermissionsGranted</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#isallpermissionsgranted","title":"isAllPermissionsGranted","text":"<p>[androidJvm]\\ fun Context.isAllPermissionsGranted(permissions: List&lt;String&gt;): Boolean</p> <p>Checks if all the given permissions are granted.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#return","title":"Return","text":"<p><code>true</code> if all permissions are granted, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-all-permissions-granted/#parameters","title":"Parameters","text":"<p>androidJvm</p> permissions List of permissions to check."},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/","title":"Is email valid","text":"<p>//android/dev.atick.core.extensions/isEmailValid</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/#isemailvalid","title":"isEmailValid","text":"<p>[androidJvm]\\ fun String?.isEmailValid(): Boolean</p> <p>Checks if the string is a valid email address.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-email-valid/#return","title":"Return","text":"<p><code>true</code> if the string is a valid email address, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/","title":"Is password valid","text":"<p>//android/dev.atick.core.extensions/isPasswordValid</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/#ispasswordvalid","title":"isPasswordValid","text":"<p>[androidJvm]\\ fun String?.isPasswordValid(): Boolean</p> <p>Checks if the string is a valid password based on the specified criteria.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-password-valid/#return","title":"Return","text":"<p><code>true</code> if the string is a valid password, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/","title":"Is valid full name","text":"<p>//android/dev.atick.core.extensions/isValidFullName</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/#isvalidfullname","title":"isValidFullName","text":"<p>[androidJvm]\\ fun String?.isValidFullName(): Boolean</p> <p>Checks if a given full name is valid.</p> <p>A valid full name consists of at least two parts: a first name and a last name. Each part should contain only letters (assuming names don't contain special characters).</p>"},{"location":"core/android/android/dev.atick.core.extensions/is-valid-full-name/#return","title":"Return","text":"<p><code>true</code> if the full name is valid, <code>false</code> otherwise.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/","title":"Show notification","text":"<p>//android/dev.atick.core.extensions/showNotification</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/#shownotification","title":"showNotification","text":"<p>[androidJvm]\\ fun Context.showNotification(notificationId: Int, notification: Notification)</p> <p>Shows a notification using the specified notification ID and notification object.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-notification/#parameters","title":"Parameters","text":"<p>androidJvm</p> notificationId The ID of the notification. notification The notification object to be shown."},{"location":"core/android/android/dev.atick.core.extensions/show-toast/","title":"Show toast","text":"<p>//android/dev.atick.core.extensions/showToast</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-toast/#showtoast","title":"showToast","text":"<p>[androidJvm]\\ fun Context.showToast(message: String)</p> <p>Displays a short toast message.</p>"},{"location":"core/android/android/dev.atick.core.extensions/show-toast/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to be displayed in the toast."},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/","title":"State in delayed","text":"<p>//android/dev.atick.core.extensions/stateInDelayed</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#stateindelayed","title":"stateInDelayed","text":"<p>[androidJvm]\\ fun &lt;T&gt; Flow&lt;T&gt;.stateInDelayed(initialValue: T, scope: CoroutineScope): StateFlow&lt;T&gt;</p> <p>Returns a StateFlow that represents the last value emitted by the Flow</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#return","title":"Return","text":"<p>A StateFlow that represents the last value emitted by the Flow</p>"},{"location":"core/android/android/dev.atick.core.extensions/state-in-delayed/#parameters","title":"Parameters","text":"<p>androidJvm</p> initialValue The initial value of the StateFlow scope The CoroutineScope to be used for the StateFlow"},{"location":"core/android/android/dev.atick.core.extensions/-options/","title":"Index","text":"<p>//android/dev.atick.core.extensions/Options</p>"},{"location":"core/android/android/dev.atick.core.extensions/-options/#options","title":"Options","text":"<p>[androidJvm]\\ annotation class Options</p> <p>Annotation to define the valid options for notification importance levels.</p>"},{"location":"core/android/android/dev.atick.core.utils/","title":"Index","text":"<p>//android/dev.atick.core.utils</p>"},{"location":"core/android/android/dev.atick.core.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/android/android/dev.atick.core.utils/#types","title":"Types","text":"Name Summary OneTimeEvent [androidJvm]class OneTimeEvent&lt;T&gt;(content: T)A wrapper for data that is exposed via a LiveData that represents an event. Resource [androidJvm]sealed class Resource&lt;T&gt;A sealed class that represents the result of a resource operation. StringDecoder [androidJvm]interface StringDecoderInterface representing a string decoder. UriDecoder [androidJvm]class UriDecoder@Injectconstructor : StringDecoderImplementation of StringDecoder that uses Android's Uri.decode method for decoding strings."},{"location":"core/android/android/dev.atick.core.utils/#functions","title":"Functions","text":"Name Summary networkBoundResource [androidJvm]inline fun &lt;ResultType, RequestType&gt; networkBoundResource(crossinline query: () -&gt; Flow&lt;ResultType&gt;, crossinline fetch: suspend () -&gt; RequestType, crossinline saveFetchedResult: suspend (RequestType) -&gt; Unit, crossinline shouldFetch: (ResultType) -&gt; Boolean = { true }): Flow&lt;Resource&lt;ResultType&gt;&gt;Creates a network-bound resource flow that performs a query and fetches new data if necessary. suspendCoroutineWithTimeout [androidJvm]inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeMillis: Long, crossinline block: (CancellableContinuation&lt;T&gt;) -&gt; Unit): Tinline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeout: Duration, crossinline block: (Continuation&lt;T&gt;) -&gt; Unit): TSuspends the current coroutine until the specified block is completed or the timeout is reached. suspendRunCatching [androidJvm]inline suspend fun &lt;T&gt; suspendRunCatching(crossinline block: suspend () -&gt; T): Result&lt;T&gt;Runs the specified block and returns the result as a Result."},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/","title":"Network bound resource","text":"<p>//android/dev.atick.core.utils/networkBoundResource</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#networkboundresource","title":"networkBoundResource","text":"<p>[androidJvm]\\ inline fun &lt;ResultType, RequestType&gt; networkBoundResource(crossinline query: () -&gt; Flow&lt;ResultType&gt;, crossinline fetch: suspend () -&gt; RequestType, crossinline saveFetchedResult: suspend (RequestType) -&gt; Unit, crossinline shouldFetch: (ResultType) -&gt; Boolean = { true }): Flow&lt;Resource&lt;ResultType&gt;&gt;</p> <p>Creates a network-bound resource flow that performs a query and fetches new data if necessary.</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#return","title":"Return","text":"<p>A flow emitting the resource state based on the query and fetch operations.</p>"},{"location":"core/android/android/dev.atick.core.utils/network-bound-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> ResultType The type of the query result. RequestType The type of the fetched data. query The query function that returns a flow of the current data. fetch The suspend function that fetches new data. saveFetchedResult The suspend function that saves the fetched result. shouldFetch The predicate function that determines if fetching new data is necessary."},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/","title":"Suspend coroutine with timeout","text":"<p>//android/dev.atick.core.utils/suspendCoroutineWithTimeout</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#suspendcoroutinewithtimeout","title":"suspendCoroutineWithTimeout","text":"<p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeout: Duration, crossinline block: (Continuation&lt;T&gt;) -&gt; Unit): T</p> <p>Suspends the current coroutine until the specified block is completed or the timeout is reached.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#return","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#parameters","title":"Parameters","text":"<p>androidJvm</p> timeout The duration to wait for the block to complete. block The block to execute. <p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendCoroutineWithTimeout(timeMillis: Long, crossinline block: (CancellableContinuation&lt;T&gt;) -&gt; Unit): T</p> <p>Suspends the current coroutine until the specified block is completed or the timeout is reached.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#return_1","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-coroutine-with-timeout/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> timeMillis The time in milliseconds to wait for the block to complete. block The block to execute."},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/","title":"Suspend run catching","text":"<p>//android/dev.atick.core.utils/suspendRunCatching</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#suspendruncatching","title":"suspendRunCatching","text":"<p>[androidJvm]\\ inline suspend fun &lt;T&gt; suspendRunCatching(crossinline block: suspend () -&gt; T): Result&lt;T&gt;</p> <p>Runs the specified block and returns the result as a Result.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#return","title":"Return","text":"<p>The result of the block.</p>"},{"location":"core/android/android/dev.atick.core.utils/suspend-run-catching/#parameters","title":"Parameters","text":"<p>androidJvm</p> block The block to execute."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/","title":"Index","text":"<p>//android/dev.atick.core.utils/OneTimeEvent</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#onetimeevent","title":"OneTimeEvent","text":"<p>class OneTimeEvent&lt;T&gt;(content: T)</p> <p>A wrapper for data that is exposed via a LiveData that represents an event.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the content."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#constructors","title":"Constructors","text":"OneTimeEvent [androidJvm]constructor(content: T)"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/#functions","title":"Functions","text":"Name Summary getContentIfNotHandled [androidJvm]fun getContentIfNotHandled(): T?Returns the content if it has not been handled yet, and marks it as handled. peekContent [androidJvm]fun peekContent(): TReturns the content, even if it has already been handled."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/-one-time-event/","title":"one time event","text":"<p>//android/dev.atick.core.utils/OneTimeEvent/OneTimeEvent</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/-one-time-event/#onetimeevent","title":"OneTimeEvent","text":"<p>[androidJvm]\\ constructor(content: T)</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/-one-time-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the content."},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/get-content-if-not-handled/","title":"Get content if not handled","text":"<p>//android/dev.atick.core.utils/OneTimeEvent/getContentIfNotHandled</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/get-content-if-not-handled/#getcontentifnothandled","title":"getContentIfNotHandled","text":"<p>[androidJvm]\\ fun getContentIfNotHandled(): T?</p> <p>Returns the content if it has not been handled yet, and marks it as handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/get-content-if-not-handled/#return","title":"Return","text":"<p>The content if it has not been handled, otherwise null.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/peek-content/","title":"Peek content","text":"<p>//android/dev.atick.core.utils/OneTimeEvent/peekContent</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/peek-content/#peekcontent","title":"peekContent","text":"<p>[androidJvm]\\ fun peekContent(): T</p> <p>Returns the content, even if it has already been handled.</p>"},{"location":"core/android/android/dev.atick.core.utils/-one-time-event/peek-content/#return","title":"Return","text":"<p>The content.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/#resource","title":"Resource","text":"<p>sealed class Resource&lt;T&gt;</p> <p>A sealed class that represents the result of a resource operation.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation. error The error that occurred during the operation, if any."},{"location":"core/android/android/dev.atick.core.utils/-resource/#inheritors","title":"Inheritors","text":"Success Loading Error"},{"location":"core/android/android/dev.atick.core.utils/-resource/#types","title":"Types","text":"Name Summary Error [androidJvm]class Error&lt;T&gt;(data: T? = null, error: Throwable) : Resource&lt;T&gt; Represents an error state with optional data and an error. Loading [androidJvm]class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt; Represents a loading state with optional data. Success [androidJvm]class Success&lt;T&gt;(data: T) : Resource&lt;T&gt; Represents a successful result with data."},{"location":"core/android/android/dev.atick.core.utils/-resource/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? = null error [androidJvm]val error: Throwable? = null"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/","title":"Data","text":"<p>//android/dev.atick.core.utils/Resource/data</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/#data","title":"data","text":"<p>[androidJvm]\\ val data: T? = null</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/data/#parameters","title":"Parameters","text":"<p>androidJvm</p> data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/error/","title":"Error","text":"<p>//android/dev.atick.core.utils/Resource/error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/error/#error","title":"error","text":"<p>[androidJvm]\\ val error: Throwable? = null</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/error/#parameters","title":"Parameters","text":"<p>androidJvm</p> error The error that occurred during the operation, if any."},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#error","title":"Error","text":"<p>class Error&lt;T&gt;(data: T? = null, error: Throwable) : Resource&lt;T&gt; </p> <p>Represents an error state with optional data and an error.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation. error The error that occurred during the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#constructors","title":"Constructors","text":"Error [androidJvm]constructor(data: T? = null, error: Throwable)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/","title":"error","text":"<p>//android/dev.atick.core.utils/Resource/Error/Error</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/#error","title":"Error","text":"<p>[androidJvm]\\ constructor(data: T? = null, error: Throwable)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-error/-error/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation. error The error that occurred during the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Loading</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#loading","title":"Loading","text":"<p>class Loading&lt;T&gt;(data: T? = null) : Resource&lt;T&gt; </p> <p>Represents a loading state with optional data.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#constructors","title":"Constructors","text":"Loading [androidJvm]constructor(data: T? = null)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/","title":"loading","text":"<p>//android/dev.atick.core.utils/Resource/Loading/Loading</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/#loading","title":"Loading","text":"<p>[androidJvm]\\ constructor(data: T? = null)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-loading/-loading/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The optional data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/","title":"Index","text":"<p>//android/dev.atick.core.utils/Resource/Success</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#success","title":"Success","text":"<p>class Success&lt;T&gt;(data: T) : Resource&lt;T&gt; </p> <p>Represents a successful result with data.</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#constructors","title":"Constructors","text":"Success [androidJvm]constructor(data: T)"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: T? error [androidJvm]val error: Throwable?"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/","title":"success","text":"<p>//android/dev.atick.core.utils/Resource/Success/Success</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/#success","title":"Success","text":"<p>[androidJvm]\\ constructor(data: T)</p>"},{"location":"core/android/android/dev.atick.core.utils/-resource/-success/-success/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of data. data The data result of the operation."},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/","title":"Index","text":"<p>//android/dev.atick.core.utils/StringDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#stringdecoder","title":"StringDecoder","text":"<p>interface StringDecoder</p> <p>Interface representing a string decoder.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#inheritors","title":"Inheritors","text":"UriDecoder"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/#functions","title":"Functions","text":"Name Summary decodeString [androidJvm]abstract fun decodeString(encodedString: String): StringDecodes an encoded string."},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/","title":"Decode string","text":"<p>//android/dev.atick.core.utils/StringDecoder/decodeString</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#decodestring","title":"decodeString","text":"<p>[androidJvm]\\ abstract fun decodeString(encodedString: String): String</p> <p>Decodes an encoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#return","title":"Return","text":"<p>The decoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-string-decoder/decode-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> encodedString The string to be decoded."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/","title":"Index","text":"<p>//android/dev.atick.core.utils/UriDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#uridecoder","title":"UriDecoder","text":"<p>[androidJvm]\\ class UriDecoder@Injectconstructor : StringDecoder</p> <p>Implementation of StringDecoder that uses Android's Uri.decode method for decoding strings.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#constructors","title":"Constructors","text":"UriDecoder [androidJvm]@Injectconstructor()Creates a UriDecoder instance."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/#functions","title":"Functions","text":"Name Summary decodeString [androidJvm]open override fun decodeString(encodedString: String): StringDecodes an encoded string using Android's Uri.decode method."},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/-uri-decoder/","title":"uri decoder","text":"<p>//android/dev.atick.core.utils/UriDecoder/UriDecoder</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/-uri-decoder/#uridecoder","title":"UriDecoder","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor()</p> <p>Creates a UriDecoder instance.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/","title":"Decode string","text":"<p>//android/dev.atick.core.utils/UriDecoder/decodeString</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#decodestring","title":"decodeString","text":"<p>[androidJvm]\\ open override fun decodeString(encodedString: String): String</p> <p>Decodes an encoded string using Android's Uri.decode method.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#return","title":"Return","text":"<p>The decoded string.</p>"},{"location":"core/android/android/dev.atick.core.utils/-uri-decoder/decode-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> encodedString The string to be decoded."},{"location":"core/network/","title":"Index","text":"<p>//network</p>"},{"location":"core/network/#network","title":"network","text":""},{"location":"core/network/#packages","title":"Packages","text":"Name dev.atick.core.network.api dev.atick.core.network.data dev.atick.core.network.di dev.atick.core.network.di.coil dev.atick.core.network.di.okhttp dev.atick.core.network.di.retrofit dev.atick.core.network.models dev.atick.core.network.utils"},{"location":"core/network/network/dev.atick.core.network.api/","title":"Index","text":"<p>//network/dev.atick.core.network.api</p>"},{"location":"core/network/network/dev.atick.core.network.api/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.api/#types","title":"Types","text":"Name Summary JetpackRestApi [androidJvm]interface JetpackRestApiRetrofit API interface for Jetpack."},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/","title":"Index","text":"<p>//network/dev.atick.core.network.api/JetpackRestApi</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/#jetpackrestapi","title":"JetpackRestApi","text":"<p>[androidJvm]\\ interface JetpackRestApi</p> <p>Retrofit API interface for Jetpack.</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/#functions","title":"Functions","text":"Name Summary getPost [androidJvm]@GET(value = \"/photos/{id}\")abstract suspend fun getPost(@Path(value = \"id\")id: Int): NetworkPostRetrieves a network post with the specified ID from the designated endpoint. getPosts [androidJvm]@GET(value = \"/photos\")abstract suspend fun getPosts(): List&lt;NetworkPost&gt;Retrieves a list of network posts from the specified endpoint."},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-post/","title":"Get post","text":"<p>//network/dev.atick.core.network.api/JetpackRestApi/getPost</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\</p> <p>@GET(value = \"/photos/{id}\")</p> <p>abstract suspend fun getPost(@Path(value = \"id\")id: Int): NetworkPost</p> <p>Retrieves a network post with the specified ID from the designated endpoint.</p> <p>This function uses the HTTP GET method to retrieve a single network post with the given ID from the \"/posts/{id}\" endpoint.</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-post/#return","title":"Return","text":"<p>A NetworkPost object representing the retrieved network post.</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the network post to retrieve."},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-posts/","title":"Get posts","text":"<p>//network/dev.atick.core.network.api/JetpackRestApi/getPosts</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-posts/#getposts","title":"getPosts","text":"<p>[androidJvm]\\</p> <p>@GET(value = \"/photos\")</p> <p>abstract suspend fun getPosts(): List&lt;NetworkPost&gt;</p> <p>Retrieves a list of network posts from the specified endpoint.</p> <p>This function uses the HTTP GET method to retrieve a list of network posts from the \"/posts\" endpoint.</p>"},{"location":"core/network/network/dev.atick.core.network.api/-jetpack-rest-api/get-posts/#return","title":"Return","text":"<p>A List of NetworkPost objects representing the retrieved network posts.</p>"},{"location":"core/network/network/dev.atick.core.network.data/","title":"Index","text":"<p>//network/dev.atick.core.network.data</p>"},{"location":"core/network/network/dev.atick.core.network.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.data/#types","title":"Types","text":"Name Summary NetworkDataSource [androidJvm]interface NetworkDataSourceData source interface for Jetpack. NetworkDataSourceImpl [androidJvm]class NetworkDataSourceImpl@Injectconstructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher) : NetworkDataSourceData source implementation for Jetpack."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/","title":"Index","text":"<p>//network/dev.atick.core.network.data/NetworkDataSource</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/#networkdatasource","title":"NetworkDataSource","text":"<p>interface NetworkDataSource</p> <p>Data source interface for Jetpack.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/#inheritors","title":"Inheritors","text":"NetworkDataSourceImpl"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/#functions","title":"Functions","text":"Name Summary getPost [androidJvm]abstract suspend fun getPost(id: Int): NetworkPostRetrieves a network post with the specified ID from the designated endpoint. getPosts [androidJvm]abstract suspend fun getPosts(): List&lt;NetworkPost&gt;Retrieves a list of network posts from the specified endpoint."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-post/","title":"Get post","text":"<p>//network/dev.atick.core.network.data/NetworkDataSource/getPost</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\ abstract suspend fun getPost(id: Int): NetworkPost</p> <p>Retrieves a network post with the specified ID from the designated endpoint.</p> <p>This function uses the HTTP GET method to retrieve a single network post with the given ID from the \"/posts/{id}\" endpoint.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-post/#return","title":"Return","text":"<p>A NetworkPost object representing the retrieved network post.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the network post to retrieve."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-posts/","title":"Get posts","text":"<p>//network/dev.atick.core.network.data/NetworkDataSource/getPosts</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-posts/#getposts","title":"getPosts","text":"<p>[androidJvm]\\ abstract suspend fun getPosts(): List&lt;NetworkPost&gt;</p> <p>Retrieves a list of network posts from the specified endpoint.</p> <p>This function uses the HTTP GET method to retrieve a list of network posts from the \"/posts\" endpoint.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source/get-posts/#return","title":"Return","text":"<p>A List of NetworkPost objects representing the retrieved network posts.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/","title":"Index","text":"<p>//network/dev.atick.core.network.data/NetworkDataSourceImpl</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/#networkdatasourceimpl","title":"NetworkDataSourceImpl","text":"<p>class NetworkDataSourceImpl@Injectconstructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher) : NetworkDataSource</p> <p>Data source implementation for Jetpack.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackRestApi The JetpackRestApi instance."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/#constructors","title":"Constructors","text":"NetworkDataSourceImpl [androidJvm]@Injectconstructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher)"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/#functions","title":"Functions","text":"Name Summary getPost [androidJvm]open suspend override fun getPost(id: Int): NetworkPostRetrieves a network post with the specified ID from the designated endpoint. getPosts [androidJvm]open suspend override fun getPosts(): List&lt;NetworkPost&gt;Retrieves a list of network posts from a remote source using the specified IO dispatcher."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/-network-data-source-impl/","title":"network data source impl","text":"<p>//network/dev.atick.core.network.data/NetworkDataSourceImpl/NetworkDataSourceImpl</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/-network-data-source-impl/#networkdatasourceimpl","title":"NetworkDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(jetpackRestApi: JetpackRestApi, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/-network-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackRestApi The JetpackRestApi instance."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-post/","title":"Get post","text":"<p>//network/dev.atick.core.network.data/NetworkDataSourceImpl/getPost</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-post/#getpost","title":"getPost","text":"<p>[androidJvm]\\ open suspend override fun getPost(id: Int): NetworkPost</p> <p>Retrieves a network post with the specified ID from the designated endpoint.</p> <p>This function uses the HTTP GET method to retrieve a single network post with the given ID from the \"/posts/{id}\" endpoint.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-post/#return","title":"Return","text":"<p>A NetworkPost object representing the retrieved network post.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-post/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the network post to retrieve."},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-posts/","title":"Get posts","text":"<p>//network/dev.atick.core.network.data/NetworkDataSourceImpl/getPosts</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-posts/#getposts","title":"getPosts","text":"<p>[androidJvm]\\ open suspend override fun getPosts(): List&lt;NetworkPost&gt;</p> <p>Retrieves a list of network posts from a remote source using the specified IO dispatcher.</p> <p>This function overrides the suspend function getPosts and fetches a list of network posts by invoking jetpackRestApi.getPosts() within the provided IO dispatcher context.</p>"},{"location":"core/network/network/dev.atick.core.network.data/-network-data-source-impl/get-posts/#return","title":"Return","text":"<p>A List of NetworkPost objects representing the retrieved network posts.</p>"},{"location":"core/network/network/dev.atick.core.network.di/","title":"Index","text":"<p>//network/dev.atick.core.network.di</p>"},{"location":"core/network/network/dev.atick.core.network.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.di/#types","title":"Types","text":"Name Summary ConnectivityManagerModule [androidJvm]@Moduleobject ConnectivityManagerModuleModule for providing ConnectivityManager. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleModule for providing NetworkDataSource. NetworkUtilsModule [androidJvm]@Moduleabstract class NetworkUtilsModuleModule for providing NetworkUtils. RestApiModule [androidJvm]@Module(includes = [RetrofitModule::class])object RestApiModuleModule for providing JetpackRestApi."},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di/ConnectivityManagerModule</p>"},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/#connectivitymanagermodule","title":"ConnectivityManagerModule","text":"<p>[androidJvm]\\ @Module</p> <p>object ConnectivityManagerModule</p> <p>Module for providing ConnectivityManager.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/#functions","title":"Functions","text":"Name Summary provideConnectivityManager [androidJvm]@Provides@Singletonfun provideConnectivityManager(context: Context): ConnectivityManagerProvides ConnectivityManager."},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/provide-connectivity-manager/","title":"Provide connectivity manager","text":"<p>//network/dev.atick.core.network.di/ConnectivityManagerModule/provideConnectivityManager</p>"},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/provide-connectivity-manager/#provideconnectivitymanager","title":"provideConnectivityManager","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideConnectivityManager(context: Context): ConnectivityManager</p> <p>Provides ConnectivityManager.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/provide-connectivity-manager/#return","title":"Return","text":"<p>ConnectivityManager.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-connectivity-manager-module/provide-connectivity-manager/#parameters","title":"Parameters","text":"<p>androidJvm</p> context Context."},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di/DataSourceModule</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Module for providing NetworkDataSource.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindJetpackDataSource [androidJvm]@Binds@Singletonabstract fun bindJetpackDataSource(jetpackDataSourceImpl: NetworkDataSourceImpl): NetworkDataSourceBinds NetworkDataSourceImpl to NetworkDataSource."},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//network/dev.atick.core.network.di/DataSourceModule/DataSourceModule</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/bind-jetpack-data-source/","title":"Bind jetpack data source","text":"<p>//network/dev.atick.core.network.di/DataSourceModule/bindJetpackDataSource</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/bind-jetpack-data-source/#bindjetpackdatasource","title":"bindJetpackDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindJetpackDataSource(jetpackDataSourceImpl: NetworkDataSourceImpl): NetworkDataSource</p> <p>Binds NetworkDataSourceImpl to NetworkDataSource.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/bind-jetpack-data-source/#return","title":"Return","text":"<p>NetworkDataSource.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-data-source-module/bind-jetpack-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDataSourceImpl NetworkDataSourceImpl."},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di/NetworkUtilsModule</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/#networkutilsmodule","title":"NetworkUtilsModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class NetworkUtilsModule</p> <p>Module for providing NetworkUtils.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/#constructors","title":"Constructors","text":"NetworkUtilsModule [androidJvm]constructor()"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/#functions","title":"Functions","text":"Name Summary bindNetworkUtils [androidJvm]@Binds@Singletonabstract fun bindNetworkUtils(networkUtilsImpl: NetworkUtilsImpl): NetworkUtilsBinds NetworkUtilsImpl to NetworkUtils."},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/-network-utils-module/","title":"network utils module","text":"<p>//network/dev.atick.core.network.di/NetworkUtilsModule/NetworkUtilsModule</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/-network-utils-module/#networkutilsmodule","title":"NetworkUtilsModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/bind-network-utils/","title":"Bind network utils","text":"<p>//network/dev.atick.core.network.di/NetworkUtilsModule/bindNetworkUtils</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/bind-network-utils/#bindnetworkutils","title":"bindNetworkUtils","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindNetworkUtils(networkUtilsImpl: NetworkUtilsImpl): NetworkUtils</p> <p>Binds NetworkUtilsImpl to NetworkUtils.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/bind-network-utils/#return","title":"Return","text":"<p>NetworkUtils.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-network-utils-module/bind-network-utils/#parameters","title":"Parameters","text":"<p>androidJvm</p> networkUtilsImpl NetworkUtilsImpl."},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di/RestApiModule</p>"},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/#restapimodule","title":"RestApiModule","text":"<p>[androidJvm]\\ @Module(includes = [RetrofitModule::class])</p> <p>object RestApiModule</p> <p>Module for providing JetpackRestApi.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/#functions","title":"Functions","text":"Name Summary provideApiService [androidJvm]@Singleton@Providesfun provideApiService(retrofit: Retrofit): JetpackRestApiProvides JetpackRestApi."},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/provide-api-service/","title":"Provide api service","text":"<p>//network/dev.atick.core.network.di/RestApiModule/provideApiService</p>"},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/provide-api-service/#provideapiservice","title":"provideApiService","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideApiService(retrofit: Retrofit): JetpackRestApi</p> <p>Provides JetpackRestApi.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/provide-api-service/#return","title":"Return","text":"<p>JetpackRestApi.</p>"},{"location":"core/network/network/dev.atick.core.network.di/-rest-api-module/provide-api-service/#parameters","title":"Parameters","text":"<p>androidJvm</p> retrofit Retrofit."},{"location":"core/network/network/dev.atick.core.network.di.coil/","title":"Index","text":"<p>//network/dev.atick.core.network.di.coil</p>"},{"location":"core/network/network/dev.atick.core.network.di.coil/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.di.coil/#types","title":"Types","text":"Name Summary CoilModule [androidJvm]@Moduleobject CoilModuleModule that provides the ImageLoader instance for Coil."},{"location":"core/network/network/dev.atick.core.network.di.coil/-coil-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di.coil/CoilModule</p>"},{"location":"core/network/network/dev.atick.core.network.di.coil/-coil-module/#coilmodule","title":"CoilModule","text":"<p>[androidJvm]\\ @Module</p> <p>object CoilModule</p> <p>Module that provides the ImageLoader instance for Coil.</p>"},{"location":"core/network/network/dev.atick.core.network.di.coil/-coil-module/#functions","title":"Functions","text":"Name Summary provideImageLoader [androidJvm]@Provides@Singletonfun provideImageLoader(okHttpCallFactory: Call.Factory, application: Context): ImageLoaderSince we're displaying SVGs in the app, Coil needs an ImageLoader which supports this format. During Coil's initialization it will call <code>applicationContext.newImageLoader()</code> to obtain an ImageLoader."},{"location":"core/network/network/dev.atick.core.network.di.coil/-coil-module/provide-image-loader/","title":"Provide image loader","text":"<p>//network/dev.atick.core.network.di.coil/CoilModule/provideImageLoader</p>"},{"location":"core/network/network/dev.atick.core.network.di.coil/-coil-module/provide-image-loader/#provideimageloader","title":"provideImageLoader","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideImageLoader(okHttpCallFactory: Call.Factory, application: Context): ImageLoader</p> <p>Since we're displaying SVGs in the app, Coil needs an ImageLoader which supports this format. During Coil's initialization it will call <code>applicationContext.newImageLoader()</code> to obtain an ImageLoader.</p>"},{"location":"core/network/network/dev.atick.core.network.di.coil/-coil-module/provide-image-loader/#see-also","title":"See also","text":"Coil"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/","title":"Index","text":"<p>//network/dev.atick.core.network.di.okhttp</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.di.okhttp/#types","title":"Types","text":"Name Summary InterceptorModule [androidJvm]@Moduleobject InterceptorModuleModule for providing interceptors. OkHttpClientModule [androidJvm]@Module(includes = [InterceptorModule::class])object OkHttpClientModuleModule for providing OkHttpClient."},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-interceptor-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di.okhttp/InterceptorModule</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-interceptor-module/#interceptormodule","title":"InterceptorModule","text":"<p>[androidJvm]\\ @Module</p> <p>object InterceptorModule</p> <p>Module for providing interceptors.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-interceptor-module/#functions","title":"Functions","text":"Name Summary provideLoggingInterceptor [androidJvm]@Provides@Singletonfun provideLoggingInterceptor(): HttpLoggingInterceptorProvides a HttpLoggingInterceptor for logging network requests and responses."},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-interceptor-module/provide-logging-interceptor/","title":"Provide logging interceptor","text":"<p>//network/dev.atick.core.network.di.okhttp/InterceptorModule/provideLoggingInterceptor</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-interceptor-module/provide-logging-interceptor/#providelogginginterceptor","title":"provideLoggingInterceptor","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideLoggingInterceptor(): HttpLoggingInterceptor</p> <p>Provides a HttpLoggingInterceptor for logging network requests and responses.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-interceptor-module/provide-logging-interceptor/#return","title":"Return","text":"<p>A HttpLoggingInterceptor instance.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di.okhttp/OkHttpClientModule</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/#okhttpclientmodule","title":"OkHttpClientModule","text":"<p>[androidJvm]\\ @Module(includes = [InterceptorModule::class])</p> <p>object OkHttpClientModule</p> <p>Module for providing OkHttpClient.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/#functions","title":"Functions","text":"Name Summary provideOkHttpCallFactory [androidJvm]@Provides@Singletonfun provideOkHttpCallFactory(loggingInterceptor: HttpLoggingInterceptor): Call.FactoryProvides Call.Factory. provideOkHttpClient [androidJvm]@Singleton@Providesfun provideOkHttpClient(loggingInterceptor: HttpLoggingInterceptor): OkHttpClientProvides OkHttpClient."},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-call-factory/","title":"Provide ok http call factory","text":"<p>//network/dev.atick.core.network.di.okhttp/OkHttpClientModule/provideOkHttpCallFactory</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-call-factory/#provideokhttpcallfactory","title":"provideOkHttpCallFactory","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideOkHttpCallFactory(loggingInterceptor: HttpLoggingInterceptor): Call.Factory</p> <p>Provides Call.Factory.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-call-factory/#return","title":"Return","text":"<p>Call.Factory.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-call-factory/#parameters","title":"Parameters","text":"<p>androidJvm</p> loggingInterceptor HttpLoggingInterceptor."},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/","title":"Provide ok http client","text":"<p>//network/dev.atick.core.network.di.okhttp/OkHttpClientModule/provideOkHttpClient</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/#provideokhttpclient","title":"provideOkHttpClient","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideOkHttpClient(loggingInterceptor: HttpLoggingInterceptor): OkHttpClient</p> <p>Provides OkHttpClient.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/#return","title":"Return","text":"<p>OkHttpClient.</p>"},{"location":"core/network/network/dev.atick.core.network.di.okhttp/-ok-http-client-module/provide-ok-http-client/#parameters","title":"Parameters","text":"<p>androidJvm</p> loggingInterceptor HttpLoggingInterceptor."},{"location":"core/network/network/dev.atick.core.network.di.retrofit/","title":"Index","text":"<p>//network/dev.atick.core.network.di.retrofit</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.di.retrofit/#types","title":"Types","text":"Name Summary ConverterModule [androidJvm]@Moduleobject ConverterModuleModule for providing Converter.Factory. RetrofitModule [androidJvm]@Module(includes = [OkHttpClientModule::class])object RetrofitModuleModule for providing Retrofit."},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-converter-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di.retrofit/ConverterModule</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-converter-module/#convertermodule","title":"ConverterModule","text":"<p>[androidJvm]\\ @Module</p> <p>object ConverterModule</p> <p>Module for providing Converter.Factory.</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-converter-module/#functions","title":"Functions","text":"Name Summary provideConverter [androidJvm]@Provides@Singletonfun provideConverter(): Converter.FactoryProvides kotlinx.serialization Converter.Factory."},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-converter-module/provide-converter/","title":"Provide converter","text":"<p>//network/dev.atick.core.network.di.retrofit/ConverterModule/provideConverter</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-converter-module/provide-converter/#provideconverter","title":"provideConverter","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideConverter(): Converter.Factory</p> <p>Provides kotlinx.serialization Converter.Factory.</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-converter-module/provide-converter/#return","title":"Return","text":"<p>Converter.Factory.</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/","title":"Index","text":"<p>//network/dev.atick.core.network.di.retrofit/RetrofitModule</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/#retrofitmodule","title":"RetrofitModule","text":"<p>[androidJvm]\\ @Module(includes = [OkHttpClientModule::class])</p> <p>object RetrofitModule</p> <p>Module for providing Retrofit.</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/#functions","title":"Functions","text":"Name Summary provideRetrofitClient [androidJvm]@Singleton@Providesfun provideRetrofitClient(converterFactory: Converter.Factory, okHttpClient: OkHttpClient): RetrofitProvides Retrofit."},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/provide-retrofit-client/","title":"Provide retrofit client","text":"<p>//network/dev.atick.core.network.di.retrofit/RetrofitModule/provideRetrofitClient</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/provide-retrofit-client/#provideretrofitclient","title":"provideRetrofitClient","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideRetrofitClient(converterFactory: Converter.Factory, okHttpClient: OkHttpClient): Retrofit</p> <p>Provides Retrofit.</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/provide-retrofit-client/#return","title":"Return","text":"<p>Retrofit.</p>"},{"location":"core/network/network/dev.atick.core.network.di.retrofit/-retrofit-module/provide-retrofit-client/#parameters","title":"Parameters","text":"<p>androidJvm</p> converterFactory Converter.Factory. okHttpClient OkHttpClient."},{"location":"core/network/network/dev.atick.core.network.models/","title":"Index","text":"<p>//network/dev.atick.core.network.models</p>"},{"location":"core/network/network/dev.atick.core.network.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.models/#types","title":"Types","text":"Name Summary NetworkPost [androidJvm]@Serializabledata class NetworkPost(val id: Int, val title: String, val url: String, val thumbnailUrl: String)Data class representing a network post retrieved from a remote source."},{"location":"core/network/network/dev.atick.core.network.models/-network-post/","title":"Index","text":"<p>//network/dev.atick.core.network.models/NetworkPost</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/#networkpost","title":"NetworkPost","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class NetworkPost(val id: Int, val title: String, val url: String, val thumbnailUrl: String)</p> <p>Data class representing a network post retrieved from a remote source.</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/#constructors","title":"Constructors","text":"NetworkPost [androidJvm]constructor(id: Int, title: String, url: String, thumbnailUrl: String)"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: IntThe unique identifier of the network post. thumbnailUrl [androidJvm]val thumbnailUrl: StringThe URL of the thumbnail image associated with the network post. title [androidJvm]val title: StringThe title of the network post. url [androidJvm]val url: StringThe URL associated with the network post."},{"location":"core/network/network/dev.atick.core.network.models/-network-post/-network-post/","title":"network post","text":"<p>//network/dev.atick.core.network.models/NetworkPost/NetworkPost</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/-network-post/#networkpost","title":"NetworkPost","text":"<p>[androidJvm]\\ constructor(id: Int, title: String, url: String, thumbnailUrl: String)</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/id/","title":"Id","text":"<p>//network/dev.atick.core.network.models/NetworkPost/id</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Int</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/thumbnail-url/","title":"Thumbnail url","text":"<p>//network/dev.atick.core.network.models/NetworkPost/thumbnailUrl</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/thumbnail-url/#thumbnailurl","title":"thumbnailUrl","text":"<p>[androidJvm]\\ val thumbnailUrl: String</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/title/","title":"Title","text":"<p>//network/dev.atick.core.network.models/NetworkPost/title</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: String</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/url/","title":"Url","text":"<p>//network/dev.atick.core.network.models/NetworkPost/url</p>"},{"location":"core/network/network/dev.atick.core.network.models/-network-post/url/#url","title":"url","text":"<p>[androidJvm]\\ val url: String</p>"},{"location":"core/network/network/dev.atick.core.network.utils/","title":"Index","text":"<p>//network/dev.atick.core.network.utils</p>"},{"location":"core/network/network/dev.atick.core.network.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/network/network/dev.atick.core.network.utils/#types","title":"Types","text":"Name Summary NetworkState [androidJvm]enum NetworkState : Enum&lt;NetworkState&gt; Network state. NetworkUtils [androidJvm]interface NetworkUtilsNetwork utils. NetworkUtilsImpl [androidJvm]class NetworkUtilsImpl@Injectconstructor(connectivityManager: ConnectivityManager) : NetworkUtilsImplementation of NetworkUtils."},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkState</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/#networkstate","title":"NetworkState","text":"<p>enum NetworkState : Enum&lt;NetworkState&gt; </p> <p>Network state.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> description StringRes description."},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/#entries","title":"Entries","text":"CONNECTED [androidJvm]CONNECTEDNetwork is connected. LOSING [androidJvm]LOSINGNetwork is connecting. LOST [androidJvm]LOSTNetwork is disconnected. UNAVAILABLE [androidJvm]UNAVAILABLENetwork is unavailable."},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int entries [androidJvm]val entries: EnumEntries&lt;NetworkState&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): NetworkStateReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;NetworkState&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/description/","title":"Description","text":"<p>//network/dev.atick.core.network.utils/NetworkState/description</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/description/#description","title":"description","text":"<p>[androidJvm]\\ val description: Int</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/description/#parameters","title":"Parameters","text":"<p>androidJvm</p> description StringRes description."},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/entries/","title":"Entries","text":"<p>//network/dev.atick.core.network.utils/NetworkState/entries</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;NetworkState&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/value-of/","title":"Value of","text":"<p>//network/dev.atick.core.network.utils/NetworkState/valueOf</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): NetworkState</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/values/","title":"Values","text":"<p>//network/dev.atick.core.network.utils/NetworkState/values</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;NetworkState&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkState/CONNECTED</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/#connected","title":"CONNECTED","text":"<p>[androidJvm]\\ CONNECTED</p> <p>Network is connected.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-c-o-n-n-e-c-t-e-d/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-l-o-s-i-n-g/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkState/LOSING</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-l-o-s-i-n-g/#losing","title":"LOSING","text":"<p>[androidJvm]\\ LOSING</p> <p>Network is connecting.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-l-o-s-i-n-g/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-l-o-s-t/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkState/LOST</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-l-o-s-t/#lost","title":"LOST","text":"<p>[androidJvm]\\ LOST</p> <p>Network is disconnected.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-l-o-s-t/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkState/UNAVAILABLE</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/#unavailable","title":"UNAVAILABLE","text":"<p>[androidJvm]\\ UNAVAILABLE</p> <p>Network is unavailable.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-state/-u-n-a-v-a-i-l-a-b-l-e/#properties","title":"Properties","text":"Name Summary description [androidJvm]val description: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkUtils</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils/#networkutils","title":"NetworkUtils","text":"<p>interface NetworkUtils</p> <p>Network utils.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils/#inheritors","title":"Inheritors","text":"NetworkUtilsImpl"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils/#properties","title":"Properties","text":"Name Summary currentState [androidJvm]abstract val currentState: Flow&lt;NetworkState&gt;Current network state as Flow."},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils/current-state/","title":"Current state","text":"<p>//network/dev.atick.core.network.utils/NetworkUtils/currentState</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils/current-state/#currentstate","title":"currentState","text":"<p>[androidJvm]\\ abstract val currentState: Flow&lt;NetworkState&gt;</p> <p>Current network state as Flow.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/","title":"Index","text":"<p>//network/dev.atick.core.network.utils/NetworkUtilsImpl</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/#networkutilsimpl","title":"NetworkUtilsImpl","text":"<p>class NetworkUtilsImpl@Injectconstructor(connectivityManager: ConnectivityManager) : NetworkUtils</p> <p>Implementation of NetworkUtils.</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> connectivityManager ConnectivityManager."},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/#constructors","title":"Constructors","text":"NetworkUtilsImpl [androidJvm]@Injectconstructor(connectivityManager: ConnectivityManager)"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/#properties","title":"Properties","text":"Name Summary currentState [androidJvm]open override val currentState: Flow&lt;NetworkState&gt;Current network state as Flow."},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/-network-utils-impl/","title":"network utils impl","text":"<p>//network/dev.atick.core.network.utils/NetworkUtilsImpl/NetworkUtilsImpl</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/-network-utils-impl/#networkutilsimpl","title":"NetworkUtilsImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(connectivityManager: ConnectivityManager)</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/-network-utils-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> connectivityManager ConnectivityManager."},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/current-state/","title":"Current state","text":"<p>//network/dev.atick.core.network.utils/NetworkUtilsImpl/currentState</p>"},{"location":"core/network/network/dev.atick.core.network.utils/-network-utils-impl/current-state/#currentstate","title":"currentState","text":"<p>[androidJvm]\\ open override val currentState: Flow&lt;NetworkState&gt;</p> <p>Current network state as Flow.</p>"},{"location":"core/preferences/","title":"Index","text":"<p>//preferences</p>"},{"location":"core/preferences/#preferences","title":"preferences","text":""},{"location":"core/preferences/#packages","title":"Packages","text":"Name dev.atick.core.preferences.data dev.atick.core.preferences.di dev.atick.core.preferences.models dev.atick.core.preferences.utils"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.data</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/#types","title":"Types","text":"Name Summary UserPreferencesDataSource [androidJvm]interface UserPreferencesDataSourceInterface defining methods to interact with user preferences data source. UserPreferencesDataSourceImpl [androidJvm]class UserPreferencesDataSourceImpl@Injectconstructor(datastore: DataStore&lt;UserDataPreferences&gt;, ioDispatcher: CoroutineDispatcher) : UserPreferencesDataSourceImplementation of the UserPreferencesDataSource interface using DataStore to manage user preferences."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/#userpreferencesdatasource","title":"UserPreferencesDataSource","text":"<p>interface UserPreferencesDataSource</p> <p>Interface defining methods to interact with user preferences data source.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/#inheritors","title":"Inheritors","text":"UserPreferencesDataSourceImpl"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/#properties","title":"Properties","text":"Name Summary userDataPreferences [androidJvm]abstract val userDataPreferences: Flow&lt;UserDataPreferences&gt;A Flow that emits UserDataPreferences representing user-specific data."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/#functions","title":"Functions","text":"Name Summary getUserIdOrThrow [androidJvm]abstract suspend fun getUserIdOrThrow(): StringRetrieves the user ID or throws an exception if the user is not authenticated. resetUserPreferences [androidJvm]abstract suspend fun resetUserPreferences()Resets the user preferences to their default values. setDarkThemeConfig [androidJvm]abstract suspend fun setDarkThemeConfig(darkThemeConfigPreferences: DarkThemeConfigPreferences)Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean)Sets the dynamic color preferences in the user preferences. setUserProfile [androidJvm]abstract suspend fun setUserProfile(preferencesUserProfile: PreferencesUserProfile)Sets the user profile in the user preferences."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/get-user-id-or-throw/","title":"Get user id or throw","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource/getUserIdOrThrow</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/get-user-id-or-throw/#getuseridorthrow","title":"getUserIdOrThrow","text":"<p>[androidJvm]\\ abstract suspend fun getUserIdOrThrow(): String</p> <p>Retrieves the user ID or throws an exception if the user is not authenticated.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/get-user-id-or-throw/#return","title":"Return","text":"<p>The user ID as a String.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/get-user-id-or-throw/#throws","title":"Throws","text":"IllegalStateException if the user is not authenticated."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/reset-user-preferences/","title":"Reset user preferences","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource/resetUserPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/reset-user-preferences/#resetuserpreferences","title":"resetUserPreferences","text":"<p>[androidJvm]\\ abstract suspend fun resetUserPreferences()</p> <p>Resets the user preferences to their default values.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource/setDarkThemeConfig</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ abstract suspend fun setDarkThemeConfig(darkThemeConfigPreferences: DarkThemeConfigPreferences)</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfigPreferences The dark theme configuration to be set."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource/setDynamicColorPreference</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean)</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-user-profile/","title":"Set user profile","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource/setUserProfile</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-user-profile/#setuserprofile","title":"setUserProfile","text":"<p>[androidJvm]\\ abstract suspend fun setUserProfile(preferencesUserProfile: PreferencesUserProfile)</p> <p>Sets the user profile in the user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/set-user-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> preferencesUserProfile The user ID to be set."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/user-data-preferences/","title":"User data preferences","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSource/userDataPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source/user-data-preferences/#userdatapreferences","title":"userDataPreferences","text":"<p>[androidJvm]\\ abstract val userDataPreferences: Flow&lt;UserDataPreferences&gt;</p> <p>A Flow that emits UserDataPreferences representing user-specific data.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/#userpreferencesdatasourceimpl","title":"UserPreferencesDataSourceImpl","text":"<p>[androidJvm]\\ class UserPreferencesDataSourceImpl@Injectconstructor(datastore: DataStore&lt;UserDataPreferences&gt;, ioDispatcher: CoroutineDispatcher) : UserPreferencesDataSource</p> <p>Implementation of the UserPreferencesDataSource interface using DataStore to manage user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/#constructors","title":"Constructors","text":"UserPreferencesDataSourceImpl [androidJvm]@Injectconstructor(datastore: DataStore&lt;UserDataPreferences&gt;, ioDispatcher: CoroutineDispatcher)"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/#properties","title":"Properties","text":"Name Summary userDataPreferences [androidJvm]open override val userDataPreferences: Flow&lt;UserDataPreferences&gt;A Flow that emits UserDataPreferences representing user-specific data."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/#functions","title":"Functions","text":"Name Summary getUserIdOrThrow [androidJvm]open suspend override fun getUserIdOrThrow(): StringRetrieves the user ID or throws an exception if the user is not authenticated. resetUserPreferences [androidJvm]open suspend override fun resetUserPreferences()Resets the user preferences to their default values. setDarkThemeConfig [androidJvm]open suspend override fun setDarkThemeConfig(darkThemeConfigPreferences: DarkThemeConfigPreferences)Sets the dark theme configuration in the user preferences. setDynamicColorPreference [androidJvm]open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean)Sets the dynamic color preferences in the user preferences. setUserProfile [androidJvm]open suspend override fun setUserProfile(preferencesUserProfile: PreferencesUserProfile)Sets the user profile in the user preferences."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/-user-preferences-data-source-impl/","title":"user preferences data source impl","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/UserPreferencesDataSourceImpl</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/-user-preferences-data-source-impl/#userpreferencesdatasourceimpl","title":"UserPreferencesDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(datastore: DataStore&lt;UserDataPreferences&gt;, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/get-user-id-or-throw/","title":"Get user id or throw","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/getUserIdOrThrow</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/get-user-id-or-throw/#getuseridorthrow","title":"getUserIdOrThrow","text":"<p>[androidJvm]\\ open suspend override fun getUserIdOrThrow(): String</p> <p>Retrieves the user ID or throws an exception if the user is not authenticated.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/get-user-id-or-throw/#return","title":"Return","text":"<p>The user ID as a String.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/get-user-id-or-throw/#throws","title":"Throws","text":"IllegalStateException if the user is not authenticated."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/reset-user-preferences/","title":"Reset user preferences","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/resetUserPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/reset-user-preferences/#resetuserpreferences","title":"resetUserPreferences","text":"<p>[androidJvm]\\ open suspend override fun resetUserPreferences()</p> <p>Resets the user preferences to their default values.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/setDarkThemeConfig</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ open suspend override fun setDarkThemeConfig(darkThemeConfigPreferences: DarkThemeConfigPreferences)</p> <p>Sets the dark theme configuration in the user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfigPreferences The dark theme configuration to be set."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/setDynamicColorPreference</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean)</p> <p>Sets the dynamic color preferences in the user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor A boolean indicating whether dynamic colors should be used."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-user-profile/","title":"Set user profile","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/setUserProfile</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-user-profile/#setuserprofile","title":"setUserProfile","text":"<p>[androidJvm]\\ open suspend override fun setUserProfile(preferencesUserProfile: PreferencesUserProfile)</p> <p>Sets the user profile in the user preferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/set-user-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> preferencesUserProfile The user PreferencesUserProfile to be set."},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/user-data-preferences/","title":"User data preferences","text":"<p>//preferences/dev.atick.core.preferences.data/UserPreferencesDataSourceImpl/userDataPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.data/-user-preferences-data-source-impl/user-data-preferences/#userdatapreferences","title":"userDataPreferences","text":"<p>[androidJvm]\\ open override val userDataPreferences: Flow&lt;UserDataPreferences&gt;</p> <p>A Flow that emits UserDataPreferences representing user-specific data.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.di</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/#types","title":"Types","text":"Name Summary DatastoreModule [androidJvm]@Moduleobject DatastoreModuleDatastore module PreferencesDataSourceModule [androidJvm]@Moduleabstract class PreferencesDataSourceModulePreferences DataSource module"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.di/DatastoreModule</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/#datastoremodule","title":"DatastoreModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DatastoreModule</p> <p>Datastore module</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/#functions","title":"Functions","text":"Name Summary providePreferencesDataStore [androidJvm]@Singleton@Providesfun providePreferencesDataStore(appContext: Context, ioDispatcher: CoroutineDispatcher): DataStore&lt;UserDataPreferences&gt;Provides the DataStore for UserDataPreferences."},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/provide-preferences-data-store/","title":"Provide preferences data store","text":"<p>//preferences/dev.atick.core.preferences.di/DatastoreModule/providePreferencesDataStore</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/provide-preferences-data-store/#providepreferencesdatastore","title":"providePreferencesDataStore","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun providePreferencesDataStore(appContext: Context, ioDispatcher: CoroutineDispatcher): DataStore&lt;UserDataPreferences&gt;</p> <p>Provides the DataStore for UserDataPreferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/provide-preferences-data-store/#return","title":"Return","text":"<p>The DataStore for UserDataPreferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-datastore-module/provide-preferences-data-store/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext The application Context. ioDispatcher The CoroutineDispatcher for performing I/O operations."},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.di/PreferencesDataSourceModule</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/#preferencesdatasourcemodule","title":"PreferencesDataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class PreferencesDataSourceModule</p> <p>Preferences DataSource module</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/#constructors","title":"Constructors","text":"PreferencesDataSourceModule [androidJvm]constructor()"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/#functions","title":"Functions","text":"Name Summary bindUserPreferencesDataSource [androidJvm]@Binds@Singletonabstract fun bindUserPreferencesDataSource(userPreferencesDataSourceImpl: UserPreferencesDataSourceImpl): UserPreferencesDataSourceBind preferences datasource"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/-preferences-data-source-module/","title":"preferences data source module","text":"<p>//preferences/dev.atick.core.preferences.di/PreferencesDataSourceModule/PreferencesDataSourceModule</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/-preferences-data-source-module/#preferencesdatasourcemodule","title":"PreferencesDataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/","title":"Bind user preferences data source","text":"<p>//preferences/dev.atick.core.preferences.di/PreferencesDataSourceModule/bindUserPreferencesDataSource</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#binduserpreferencesdatasource","title":"bindUserPreferencesDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindUserPreferencesDataSource(userPreferencesDataSourceImpl: UserPreferencesDataSourceImpl): UserPreferencesDataSource</p> <p>Bind preferences datasource</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#return","title":"Return","text":"<p>UserPreferencesDataSource</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.di/-preferences-data-source-module/bind-user-preferences-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> userPreferencesDataSourceImpl PreferencesDatastoreImpl"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/#types","title":"Types","text":"Name Summary DarkThemeConfigPreferences [androidJvm]@Serializableenum DarkThemeConfigPreferences : Enum&lt;DarkThemeConfigPreferences&gt; Enum class representing configuration options for the dark theme. PreferencesUserProfile [androidJvm]@Serializabledata class PreferencesUserProfile(val id: String = String(), val userName: String = String(), val profilePictureUriString: String? = null)Represents a user profile. UserDataPreferences [androidJvm]@Serializabledata class UserDataPreferences(val id: String = String(), val userName: String? = null, val profilePictureUriString: String? = null, val darkThemeConfigPreferences: DarkThemeConfigPreferences = DarkThemeConfigPreferences.FOLLOW_SYSTEM, val useDynamicColor: Boolean = true)Represents user data saved in Shared Preferences."},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/#darkthemeconfigpreferences","title":"DarkThemeConfigPreferences","text":"<p>[androidJvm]\\ @Serializable</p> <p>enum DarkThemeConfigPreferences : Enum&lt;DarkThemeConfigPreferences&gt; </p> <p>Enum class representing configuration options for the dark theme.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/#entries","title":"Entries","text":"FOLLOW_SYSTEM [androidJvm]FOLLOW_SYSTEM LIGHT [androidJvm]LIGHT DARK [androidJvm]DARK"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;DarkThemeConfigPreferences&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): DarkThemeConfigPreferencesReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;DarkThemeConfigPreferences&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/entries/","title":"Entries","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences/entries</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;DarkThemeConfigPreferences&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/value-of/","title":"Value of","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences/valueOf</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): DarkThemeConfigPreferences</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/values/","title":"Values","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences/values</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;DarkThemeConfigPreferences&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-d-a-r-k/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences/DARK</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-d-a-r-k/#dark","title":"DARK","text":"<p>[androidJvm]\\ DARK</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-d-a-r-k/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-f-o-l-l-o-w_-s-y-s-t-e-m/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences/FOLLOW_SYSTEM</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-f-o-l-l-o-w_-s-y-s-t-e-m/#follow_system","title":"FOLLOW_SYSTEM","text":"<p>[androidJvm]\\ FOLLOW_SYSTEM</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-f-o-l-l-o-w_-s-y-s-t-e-m/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-l-i-g-h-t/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models/DarkThemeConfigPreferences/LIGHT</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-l-i-g-h-t/#light","title":"LIGHT","text":"<p>[androidJvm]\\ LIGHT</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-dark-theme-config-preferences/-l-i-g-h-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models/PreferencesUserProfile</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/#preferencesuserprofile","title":"PreferencesUserProfile","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class PreferencesUserProfile(val id: String = String(), val userName: String = String(), val profilePictureUriString: String? = null)</p> <p>Represents a user profile.</p> <p>This data class is used for storing information about a user's profile.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/#constructors","title":"Constructors","text":"PreferencesUserProfile [androidJvm]constructor(id: String = String(), userName: String = String(), profilePictureUriString: String? = null)"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: StringThe unique identifier for the profile. Defaults to empty if not provided. profilePictureUriString [androidJvm]val profilePictureUriString: String? = nullThe URI string for the user's profile picture, if available. Defaults to <code>null</code> if not provided. userName [androidJvm]val userName: StringThe name of the user. Defaults to empty if not provided."},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/-preferences-user-profile/","title":"preferences user profile","text":"<p>//preferences/dev.atick.core.preferences.models/PreferencesUserProfile/PreferencesUserProfile</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/-preferences-user-profile/#preferencesuserprofile","title":"PreferencesUserProfile","text":"<p>[androidJvm]\\ constructor(id: String = String(), userName: String = String(), profilePictureUriString: String? = null)</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/id/","title":"Id","text":"<p>//preferences/dev.atick.core.preferences.models/PreferencesUserProfile/id</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/profile-picture-uri-string/","title":"Profile picture uri string","text":"<p>//preferences/dev.atick.core.preferences.models/PreferencesUserProfile/profilePictureUriString</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/profile-picture-uri-string/#profilepictureuristring","title":"profilePictureUriString","text":"<p>[androidJvm]\\ val profilePictureUriString: String? = null</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/user-name/","title":"User name","text":"<p>//preferences/dev.atick.core.preferences.models/PreferencesUserProfile/userName</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-preferences-user-profile/user-name/#username","title":"userName","text":"<p>[androidJvm]\\ val userName: String</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/#userdatapreferences","title":"UserDataPreferences","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class UserDataPreferences(val id: String = String(), val userName: String? = null, val profilePictureUriString: String? = null, val darkThemeConfigPreferences: DarkThemeConfigPreferences = DarkThemeConfigPreferences.FOLLOW_SYSTEM, val useDynamicColor: Boolean = true)</p> <p>Represents user data saved in Shared Preferences.</p> <p>This data class is used to store information about a user, including their ID, name, profile picture URI string, preferred theme brand, dark theme configuration, and dynamic color preference.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/#constructors","title":"Constructors","text":"UserDataPreferences [androidJvm]constructor(id: String = String(), userName: String? = null, profilePictureUriString: String? = null, darkThemeConfigPreferences: DarkThemeConfigPreferences = DarkThemeConfigPreferences.FOLLOW_SYSTEM, useDynamicColor: Boolean = true)"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/#properties","title":"Properties","text":"Name Summary darkThemeConfigPreferences [androidJvm]val darkThemeConfigPreferences: DarkThemeConfigPreferencesThe user's preferred dark theme configuration. Defaults to DarkThemeConfigPreferences.FOLLOW_SYSTEM. id [androidJvm]val id: StringThe unique identifier for the user. Defaults to empty if not provided. profilePictureUriString [androidJvm]val profilePictureUriString: String? = nullThe URI string for the user's profile picture, if available. Defaults to <code>null</code> if not provided. useDynamicColor [androidJvm]val useDynamicColor: Boolean = trueA boolean indicating whether the user prefers dynamic colors. Defaults to <code>true</code>. userName [androidJvm]val userName: String? = nullThe name of the user. Defaults to \"No Name\" if not provided."},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/-user-data-preferences/","title":"user data preferences","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences/UserDataPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/-user-data-preferences/#userdatapreferences","title":"UserDataPreferences","text":"<p>[androidJvm]\\ constructor(id: String = String(), userName: String? = null, profilePictureUriString: String? = null, darkThemeConfigPreferences: DarkThemeConfigPreferences = DarkThemeConfigPreferences.FOLLOW_SYSTEM, useDynamicColor: Boolean = true)</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/dark-theme-config-preferences/","title":"Dark theme config preferences","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences/darkThemeConfigPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/dark-theme-config-preferences/#darkthemeconfigpreferences","title":"darkThemeConfigPreferences","text":"<p>[androidJvm]\\ val darkThemeConfigPreferences: DarkThemeConfigPreferences</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/id/","title":"Id","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences/id</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/profile-picture-uri-string/","title":"Profile picture uri string","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences/profilePictureUriString</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/profile-picture-uri-string/#profilepictureuristring","title":"profilePictureUriString","text":"<p>[androidJvm]\\ val profilePictureUriString: String? = null</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/use-dynamic-color/","title":"Use dynamic color","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences/useDynamicColor</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/use-dynamic-color/#usedynamiccolor","title":"useDynamicColor","text":"<p>[androidJvm]\\ val useDynamicColor: Boolean = true</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/user-name/","title":"User name","text":"<p>//preferences/dev.atick.core.preferences.models/UserDataPreferences/userName</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.models/-user-data-preferences/user-name/#username","title":"userName","text":"<p>[androidJvm]\\ val userName: String? = null</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.utils</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/#types","title":"Types","text":"Name Summary DarkThemeConfigSerializer [androidJvm]object DarkThemeConfigSerializer : KSerializer&lt;DarkThemeConfigPreferences&gt; Custom serializer for serializing and deserializing DarkThemeConfigPreferences enums. UserDataSerializer [androidJvm]object UserDataSerializer : Serializer&lt;UserDataPreferences&gt; Serializer implementation for serializing and deserializing UserDataPreferences objects."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.utils/DarkThemeConfigSerializer</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/#darkthemeconfigserializer","title":"DarkThemeConfigSerializer","text":"<p>[androidJvm]\\ object DarkThemeConfigSerializer : KSerializer&lt;DarkThemeConfigPreferences&gt; </p> <p>Custom serializer for serializing and deserializing DarkThemeConfigPreferences enums.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/#properties","title":"Properties","text":"Name Summary descriptor [androidJvm]open override val descriptor: SerialDescriptorThe descriptor for the serialized form of DarkThemeConfigPreferences."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/#functions","title":"Functions","text":"Name Summary deserialize [androidJvm]open override fun deserialize(decoder: Decoder): DarkThemeConfigPreferencesDeserializes the string representation from the provided decoder and converts it to a DarkThemeConfigPreferences enum. serialize [androidJvm]open override fun serialize(encoder: Encoder, value: DarkThemeConfigPreferences)Serializes the provided value of DarkThemeConfigPreferences enum to a string representation."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/descriptor/","title":"Descriptor","text":"<p>//preferences/dev.atick.core.preferences.utils/DarkThemeConfigSerializer/descriptor</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/descriptor/#descriptor","title":"descriptor","text":"<p>[androidJvm]\\ open override val descriptor: SerialDescriptor</p> <p>The descriptor for the serialized form of DarkThemeConfigPreferences.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/deserialize/","title":"Deserialize","text":"<p>//preferences/dev.atick.core.preferences.utils/DarkThemeConfigSerializer/deserialize</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/deserialize/#deserialize","title":"deserialize","text":"<p>[androidJvm]\\ open override fun deserialize(decoder: Decoder): DarkThemeConfigPreferences</p> <p>Deserializes the string representation from the provided decoder and converts it to a DarkThemeConfigPreferences enum.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/deserialize/#return","title":"Return","text":"<p>The deserialized DarkThemeConfigPreferences enum value.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/deserialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> decoder The decoder to read the serialized data from."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/serialize/","title":"Serialize","text":"<p>//preferences/dev.atick.core.preferences.utils/DarkThemeConfigSerializer/serialize</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/serialize/#serialize","title":"serialize","text":"<p>[androidJvm]\\ open override fun serialize(encoder: Encoder, value: DarkThemeConfigPreferences)</p> <p>Serializes the provided value of DarkThemeConfigPreferences enum to a string representation.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-dark-theme-config-serializer/serialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> encoder The encoder to write the serialized data to. value The DarkThemeConfigPreferences value to be serialized."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/","title":"Index","text":"<p>//preferences/dev.atick.core.preferences.utils/UserDataSerializer</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/#userdataserializer","title":"UserDataSerializer","text":"<p>[androidJvm]\\ object UserDataSerializer : Serializer&lt;UserDataPreferences&gt; </p> <p>Serializer implementation for serializing and deserializing UserDataPreferences objects.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/#properties","title":"Properties","text":"Name Summary defaultValue [androidJvm]open override val defaultValue: UserDataPreferencesThe default value of UserDataPreferences to be used when deserialization fails."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/#functions","title":"Functions","text":"Name Summary readFrom [androidJvm]open suspend override fun readFrom(input: InputStream): UserDataPreferencesReads a UserDataPreferences object from the provided InputStream. writeTo [androidJvm]open suspend override fun writeTo(t: UserDataPreferences, output: OutputStream)Writes a UserDataPreferences object to the provided OutputStream."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/default-value/","title":"Default value","text":"<p>//preferences/dev.atick.core.preferences.utils/UserDataSerializer/defaultValue</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/default-value/#defaultvalue","title":"defaultValue","text":"<p>[androidJvm]\\ open override val defaultValue: UserDataPreferences</p> <p>The default value of UserDataPreferences to be used when deserialization fails.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/read-from/","title":"Read from","text":"<p>//preferences/dev.atick.core.preferences.utils/UserDataSerializer/readFrom</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/read-from/#readfrom","title":"readFrom","text":"<p>[androidJvm]\\ open suspend override fun readFrom(input: InputStream): UserDataPreferences</p> <p>Reads a UserDataPreferences object from the provided InputStream.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/read-from/#return","title":"Return","text":"<p>The deserialized UserDataPreferences object.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/read-from/#parameters","title":"Parameters","text":"<p>androidJvm</p> input The input stream to read data from."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/read-from/#throws","title":"Throws","text":"CorruptionException if there's an issue with deserialization."},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/write-to/","title":"Write to","text":"<p>//preferences/dev.atick.core.preferences.utils/UserDataSerializer/writeTo</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/write-to/#writeto","title":"writeTo","text":"<p>[androidJvm]\\ open suspend override fun writeTo(t: UserDataPreferences, output: OutputStream)</p> <p>Writes a UserDataPreferences object to the provided OutputStream.</p>"},{"location":"core/preferences/preferences/dev.atick.core.preferences.utils/-user-data-serializer/write-to/#parameters","title":"Parameters","text":"<p>androidJvm</p> t The UserDataPreferences object to be serialized. output The output stream to write data to."},{"location":"core/room/","title":"Index","text":"<p>//room</p>"},{"location":"core/room/#room","title":"room","text":""},{"location":"core/room/#packages","title":"Packages","text":"Name dev.atick.core.room.data dev.atick.core.room.di dev.atick.core.room.models"},{"location":"core/room/room/dev.atick.core.room.data/","title":"Index","text":"<p>//room/dev.atick.core.room.data</p>"},{"location":"core/room/room/dev.atick.core.room.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/room/room/dev.atick.core.room.data/#types","title":"Types","text":"Name Summary JetpackDao [androidJvm]interface JetpackDaoDAO for handling JetpackEntity operations. JetpackDatabase [androidJvm]abstract class JetpackDatabase : RoomDatabaseRoom database for Jetpack. LocalDataSource [androidJvm]interface LocalDataSourceData source interface for managing local storage operations related to JetpackEntity objects. LocalDataSourceImpl [androidJvm]class LocalDataSourceImpl@Injectconstructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher) : LocalDataSourceImplementation of LocalDataSource that interacts with the local storage using JetpackDao."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/","title":"Index","text":"<p>//room/dev.atick.core.room.data/JetpackDao</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/#jetpackdao","title":"JetpackDao","text":"<p>[androidJvm]\\ interface JetpackDao</p> <p>DAO for handling JetpackEntity operations.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/#functions","title":"Functions","text":"Name Summary deleteJetpackPermanently [androidJvm]abstract suspend fun deleteJetpackPermanently(id: String)Permanently deletes a jetpack from the database. getJetpack [androidJvm]abstract fun getJetpack(id: String): Flow&lt;JetpackEntity&gt;Retrieves a specific jetpack by its ID. getJetpacks [androidJvm]abstract fun getJetpacks(userId: String): Flow&lt;List&lt;JetpackEntity&gt;&gt;Retrieves a list of jetpacks for a specific user that are not marked as deleted, ordered by the last updated timestamp in descending order. getLatestUpdateTimestamp [androidJvm]abstract suspend fun getLatestUpdateTimestamp(userId: String): Long?Gets the most recent lastUpdated timestamp for a specific user's jetpacks. This can be used as a reference point for fetching only newer items from remote. getUnsyncedJetpacks [androidJvm]abstract suspend fun getUnsyncedJetpacks(userId: String): List&lt;JetpackEntity&gt;Retrieves a list of jetpacks for a specific user that need to be synced. A jetpack needs to be synced if it was updated after the last sync or if it is marked as needing sync. insertJetpack [androidJvm]abstract suspend fun insertJetpack(jetpackEntity: JetpackEntity)Inserts a new jetpack into the database. If a jetpack with the same ID already exists, it will be replaced. markAsSynced [androidJvm]abstract suspend fun markAsSynced(id: String, timestamp: Long = System.currentTimeMillis())Marks a jetpack as synced by setting the needsSync flag to 0, the syncAction to 'NONE', and updating the lastSynced timestamp. markJetpackAsDeleted [androidJvm]abstract suspend fun markJetpackAsDeleted(id: String)Marks a jetpack as deleted by setting the deleted flag to 1 and the needsSync flag to 1. Also sets the syncAction to 'DELETE'. updateJetpack [androidJvm]abstract suspend fun updateJetpack(jetpackEntity: JetpackEntity)Updates an existing jetpack in the database. upsertJetpack [androidJvm]abstract suspend fun upsertJetpack(jetpackEntity: JetpackEntity)Inserts or updates a jetpack in the database. If a jetpack with the same ID already exists, it will be updated; otherwise, a new entry will be created. upsertJetpacks [androidJvm]abstract suspend fun upsertJetpacks(remoteJetpacks: List&lt;JetpackEntity&gt;)Upserts (insert or update) jetpacks from a remote source. If a jetpack already exists locally (matching ID), it will be updated with the remote version. If it doesn't exist locally, a new entry will be created."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/delete-jetpack-permanently/","title":"Delete jetpack permanently","text":"<p>//room/dev.atick.core.room.data/JetpackDao/deleteJetpackPermanently</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/delete-jetpack-permanently/#deletejetpackpermanently","title":"deleteJetpackPermanently","text":"<p>[androidJvm]\\ abstract suspend fun deleteJetpackPermanently(id: String)</p> <p>Permanently deletes a jetpack from the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/delete-jetpack-permanently/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to delete."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpack/","title":"Get jetpack","text":"<p>//room/dev.atick.core.room.data/JetpackDao/getJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpack/#getjetpack","title":"getJetpack","text":"<p>[androidJvm]\\ abstract fun getJetpack(id: String): Flow&lt;JetpackEntity&gt;</p> <p>Retrieves a specific jetpack by its ID.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpack/#return","title":"Return","text":"<p>A Flow emitting the JetpackEntity object.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpacks/","title":"Get jetpacks","text":"<p>//room/dev.atick.core.room.data/JetpackDao/getJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpacks/#getjetpacks","title":"getJetpacks","text":"<p>[androidJvm]\\ abstract fun getJetpacks(userId: String): Flow&lt;List&lt;JetpackEntity&gt;&gt;</p> <p>Retrieves a list of jetpacks for a specific user that are not marked as deleted, ordered by the last updated timestamp in descending order.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpacks/#return","title":"Return","text":"<p>A Flow emitting a list of JetpackEntity objects.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose jetpacks to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-latest-update-timestamp/","title":"Get latest update timestamp","text":"<p>//room/dev.atick.core.room.data/JetpackDao/getLatestUpdateTimestamp</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-latest-update-timestamp/#getlatestupdatetimestamp","title":"getLatestUpdateTimestamp","text":"<p>[androidJvm]\\ abstract suspend fun getLatestUpdateTimestamp(userId: String): Long?</p> <p>Gets the most recent lastUpdated timestamp for a specific user's jetpacks. This can be used as a reference point for fetching only newer items from remote.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-latest-update-timestamp/#return","title":"Return","text":"<p>The most recent lastUpdated timestamp for that user's jetpacks, or 0 if no jetpacks exist.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-latest-update-timestamp/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose jetpacks to check."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-unsynced-jetpacks/","title":"Get unsynced jetpacks","text":"<p>//room/dev.atick.core.room.data/JetpackDao/getUnsyncedJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-unsynced-jetpacks/#getunsyncedjetpacks","title":"getUnsyncedJetpacks","text":"<p>[androidJvm]\\ abstract suspend fun getUnsyncedJetpacks(userId: String): List&lt;JetpackEntity&gt;</p> <p>Retrieves a list of jetpacks for a specific user that need to be synced. A jetpack needs to be synced if it was updated after the last sync or if it is marked as needing sync.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-unsynced-jetpacks/#return","title":"Return","text":"<p>A list of JetpackEntity objects that need to be synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/get-unsynced-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose unsynced jetpacks to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/insert-jetpack/","title":"Insert jetpack","text":"<p>//room/dev.atick.core.room.data/JetpackDao/insertJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/insert-jetpack/#insertjetpack","title":"insertJetpack","text":"<p>[androidJvm]\\ abstract suspend fun insertJetpack(jetpackEntity: JetpackEntity)</p> <p>Inserts a new jetpack into the database. If a jetpack with the same ID already exists, it will be replaced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/insert-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to insert."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/mark-as-synced/","title":"Mark as synced","text":"<p>//room/dev.atick.core.room.data/JetpackDao/markAsSynced</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/mark-as-synced/#markassynced","title":"markAsSynced","text":"<p>[androidJvm]\\ abstract suspend fun markAsSynced(id: String, timestamp: Long = System.currentTimeMillis())</p> <p>Marks a jetpack as synced by setting the needsSync flag to 0, the syncAction to 'NONE', and updating the lastSynced timestamp.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/mark-as-synced/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to mark as synced. timestamp The timestamp to set as the last synced time. Defaults to the current system time."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/mark-jetpack-as-deleted/","title":"Mark jetpack as deleted","text":"<p>//room/dev.atick.core.room.data/JetpackDao/markJetpackAsDeleted</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/mark-jetpack-as-deleted/#markjetpackasdeleted","title":"markJetpackAsDeleted","text":"<p>[androidJvm]\\ abstract suspend fun markJetpackAsDeleted(id: String)</p> <p>Marks a jetpack as deleted by setting the deleted flag to 1 and the needsSync flag to 1. Also sets the syncAction to 'DELETE'.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/mark-jetpack-as-deleted/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to mark as deleted."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/update-jetpack/","title":"Update jetpack","text":"<p>//room/dev.atick.core.room.data/JetpackDao/updateJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/update-jetpack/#updatejetpack","title":"updateJetpack","text":"<p>[androidJvm]\\ abstract suspend fun updateJetpack(jetpackEntity: JetpackEntity)</p> <p>Updates an existing jetpack in the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/update-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to update."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpack/","title":"Upsert jetpack","text":"<p>//room/dev.atick.core.room.data/JetpackDao/upsertJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpack/#upsertjetpack","title":"upsertJetpack","text":"<p>[androidJvm]\\ abstract suspend fun upsertJetpack(jetpackEntity: JetpackEntity)</p> <p>Inserts or updates a jetpack in the database. If a jetpack with the same ID already exists, it will be updated; otherwise, a new entry will be created.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to upsert."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpacks/","title":"Upsert jetpacks","text":"<p>//room/dev.atick.core.room.data/JetpackDao/upsertJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpacks/#upsertjetpacks","title":"upsertJetpacks","text":"<p>[androidJvm]\\ abstract suspend fun upsertJetpacks(remoteJetpacks: List&lt;JetpackEntity&gt;)</p> <p>Upserts (insert or update) jetpacks from a remote source. If a jetpack already exists locally (matching ID), it will be updated with the remote version. If it doesn't exist locally, a new entry will be created.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpacks/#return","title":"Return","text":"<p>List of row IDs for the inserted rows.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-dao/upsert-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> remoteJetpacks List of jetpack entities from the remote source to be upserted."},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/","title":"Index","text":"<p>//room/dev.atick.core.room.data/JetpackDatabase</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/#jetpackdatabase","title":"JetpackDatabase","text":"<p>[androidJvm]\\ abstract class JetpackDatabase : RoomDatabase</p> <p>Room database for Jetpack.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/#constructors","title":"Constructors","text":"JetpackDatabase [androidJvm]constructor()"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/#properties","title":"Properties","text":"Name Summary backingFieldMap [androidJvm]val backingFieldMap: MutableMap&lt;String, Any&gt; invalidationTracker [androidJvm]open val invalidationTracker: InvalidationTracker isOpen [androidJvm]open val isOpen: Boolean isOpenInternal [androidJvm]val isOpenInternal: Boolean openHelper [androidJvm]open val openHelper: SupportSQLiteOpenHelper queryExecutor [androidJvm]open val queryExecutor: Executor suspendingTransactionId [androidJvm]val suspendingTransactionId: ThreadLocal&lt;Int&gt; transactionExecutor [androidJvm]open val transactionExecutor: Executor"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/#functions","title":"Functions","text":"Name Summary assertNotMainThread [androidJvm]open fun assertNotMainThread() assertNotSuspendingTransaction [androidJvm]open fun assertNotSuspendingTransaction() beginTransaction [androidJvm]open fun ~~beginTransaction~~() clearAllTables [androidJvm]abstract fun clearAllTables() close [androidJvm]open fun close() compileStatement [androidJvm]open fun compileStatement(sql: String): SupportSQLiteStatement endTransaction [androidJvm]open fun ~~endTransaction~~() getAutoMigrations [androidJvm]open fun getAutoMigrations(autoMigrationSpecs: Map&lt;Class&lt;out AutoMigrationSpec&gt;, AutoMigrationSpec&gt;): List&lt;Migration&gt; getJetpackDao [androidJvm]abstract fun getJetpackDao(): JetpackDaoGet the data access object for JetpackEntity entity. getRequiredAutoMigrationSpecs [androidJvm]open fun getRequiredAutoMigrationSpecs(): Set&lt;Class&lt;out AutoMigrationSpec&gt;&gt; getTypeConverter [androidJvm]open fun &lt;T&gt; getTypeConverter(klass: Class&lt;T&gt;): T? init [androidJvm]open fun init(configuration: DatabaseConfiguration) inTransaction [androidJvm]open fun inTransaction(): Boolean query [androidJvm]open fun query(query: SupportSQLiteQuery, signal: CancellationSignal?): Cursoropen fun query(query: String, args: Array&lt;out Any?&gt;?): Cursor runInTransaction [androidJvm]open fun runInTransaction(body: Runnable)open fun &lt;V&gt; runInTransaction(body: Callable&lt;V&gt;): V setTransactionSuccessful [androidJvm]open fun ~~setTransactionSuccessful~~()"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/-jetpack-database/","title":"jetpack database","text":"<p>//room/dev.atick.core.room.data/JetpackDatabase/JetpackDatabase</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/-jetpack-database/#jetpackdatabase","title":"JetpackDatabase","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/get-jetpack-dao/","title":"Get jetpack dao","text":"<p>//room/dev.atick.core.room.data/JetpackDatabase/getJetpackDao</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/get-jetpack-dao/#getjetpackdao","title":"getJetpackDao","text":"<p>[androidJvm]\\ abstract fun getJetpackDao(): JetpackDao</p> <p>Get the data access object for JetpackEntity entity.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-jetpack-database/get-jetpack-dao/#return","title":"Return","text":"<p>The data access object for JetpackEntity entity.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/","title":"Index","text":"<p>//room/dev.atick.core.room.data/LocalDataSource</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/#localdatasource","title":"LocalDataSource","text":"<p>interface LocalDataSource</p> <p>Data source interface for managing local storage operations related to JetpackEntity objects.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/#inheritors","title":"Inheritors","text":"LocalDataSourceImpl"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/#functions","title":"Functions","text":"Name Summary deleteJetpackPermanently [androidJvm]abstract suspend fun deleteJetpackPermanently(id: String)Permanently deletes a jetpack from the database. getJetpack [androidJvm]abstract fun getJetpack(id: String): Flow&lt;JetpackEntity&gt;Retrieves a specific jetpack by its ID. getJetpacks [androidJvm]abstract fun getJetpacks(userId: String): Flow&lt;List&lt;JetpackEntity&gt;&gt;Retrieves a list of jetpacks for a specific user. getLatestUpdateTimestamp [androidJvm]abstract suspend fun getLatestUpdateTimestamp(userId: String): LongGets the most recent lastUpdated timestamp for a specific user's jetpacks. getUnsyncedJetpacks [androidJvm]abstract suspend fun getUnsyncedJetpacks(userId: String): List&lt;JetpackEntity&gt;Retrieves a list of jetpacks for a specific user that need to be synced. insertJetpack [androidJvm]abstract suspend fun insertJetpack(jetpackEntity: JetpackEntity)Inserts a new jetpack into the database. markAsSynced [androidJvm]abstract suspend fun markAsSynced(id: String, timestamp: Long = System.currentTimeMillis())Marks a jetpack as synced. markJetpackAsDeleted [androidJvm]abstract suspend fun markJetpackAsDeleted(id: String)Marks a jetpack as deleted. updateJetpack [androidJvm]abstract suspend fun updateJetpack(jetpackEntity: JetpackEntity)Updates an existing jetpack in the database. upsertJetpack [androidJvm]abstract suspend fun upsertJetpack(jetpackEntity: JetpackEntity)Inserts or updates a jetpack in the database. upsertJetpacks [androidJvm]abstract suspend fun upsertJetpacks(remoteJetpacks: List&lt;JetpackEntity&gt;)Upserts (insert or update) jetpacks from a remote source."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/delete-jetpack-permanently/","title":"Delete jetpack permanently","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/deleteJetpackPermanently</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/delete-jetpack-permanently/#deletejetpackpermanently","title":"deleteJetpackPermanently","text":"<p>[androidJvm]\\ abstract suspend fun deleteJetpackPermanently(id: String)</p> <p>Permanently deletes a jetpack from the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/delete-jetpack-permanently/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to delete."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpack/","title":"Get jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/getJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpack/#getjetpack","title":"getJetpack","text":"<p>[androidJvm]\\ abstract fun getJetpack(id: String): Flow&lt;JetpackEntity&gt;</p> <p>Retrieves a specific jetpack by its ID.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpack/#return","title":"Return","text":"<p>A Flow emitting the JetpackEntity object.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpacks/","title":"Get jetpacks","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/getJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpacks/#getjetpacks","title":"getJetpacks","text":"<p>[androidJvm]\\ abstract fun getJetpacks(userId: String): Flow&lt;List&lt;JetpackEntity&gt;&gt;</p> <p>Retrieves a list of jetpacks for a specific user.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpacks/#return","title":"Return","text":"<p>A Flow emitting a list of JetpackEntity objects.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose jetpacks to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-latest-update-timestamp/","title":"Get latest update timestamp","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/getLatestUpdateTimestamp</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-latest-update-timestamp/#getlatestupdatetimestamp","title":"getLatestUpdateTimestamp","text":"<p>[androidJvm]\\ abstract suspend fun getLatestUpdateTimestamp(userId: String): Long</p> <p>Gets the most recent lastUpdated timestamp for a specific user's jetpacks.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-latest-update-timestamp/#return","title":"Return","text":"<p>The most recent lastUpdated timestamp for that user's jetpacks.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-latest-update-timestamp/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose jetpacks to check."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-unsynced-jetpacks/","title":"Get unsynced jetpacks","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/getUnsyncedJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-unsynced-jetpacks/#getunsyncedjetpacks","title":"getUnsyncedJetpacks","text":"<p>[androidJvm]\\ abstract suspend fun getUnsyncedJetpacks(userId: String): List&lt;JetpackEntity&gt;</p> <p>Retrieves a list of jetpacks for a specific user that need to be synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-unsynced-jetpacks/#return","title":"Return","text":"<p>A list of JetpackEntity objects that need to be synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/get-unsynced-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose unsynced jetpacks to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/insert-jetpack/","title":"Insert jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/insertJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/insert-jetpack/#insertjetpack","title":"insertJetpack","text":"<p>[androidJvm]\\ abstract suspend fun insertJetpack(jetpackEntity: JetpackEntity)</p> <p>Inserts a new jetpack into the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/insert-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to insert."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/mark-as-synced/","title":"Mark as synced","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/markAsSynced</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/mark-as-synced/#markassynced","title":"markAsSynced","text":"<p>[androidJvm]\\ abstract suspend fun markAsSynced(id: String, timestamp: Long = System.currentTimeMillis())</p> <p>Marks a jetpack as synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/mark-as-synced/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to mark as synced. timestamp The timestamp to set as the last synced time. Defaults to the current system time."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/mark-jetpack-as-deleted/","title":"Mark jetpack as deleted","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/markJetpackAsDeleted</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/mark-jetpack-as-deleted/#markjetpackasdeleted","title":"markJetpackAsDeleted","text":"<p>[androidJvm]\\ abstract suspend fun markJetpackAsDeleted(id: String)</p> <p>Marks a jetpack as deleted.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/mark-jetpack-as-deleted/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to mark as deleted."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/update-jetpack/","title":"Update jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/updateJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/update-jetpack/#updatejetpack","title":"updateJetpack","text":"<p>[androidJvm]\\ abstract suspend fun updateJetpack(jetpackEntity: JetpackEntity)</p> <p>Updates an existing jetpack in the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/update-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to update."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/upsert-jetpack/","title":"Upsert jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/upsertJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/upsert-jetpack/#upsertjetpack","title":"upsertJetpack","text":"<p>[androidJvm]\\ abstract suspend fun upsertJetpack(jetpackEntity: JetpackEntity)</p> <p>Inserts or updates a jetpack in the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/upsert-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to upsert."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/upsert-jetpacks/","title":"Upsert jetpacks","text":"<p>//room/dev.atick.core.room.data/LocalDataSource/upsertJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/upsert-jetpacks/#upsertjetpacks","title":"upsertJetpacks","text":"<p>[androidJvm]\\ abstract suspend fun upsertJetpacks(remoteJetpacks: List&lt;JetpackEntity&gt;)</p> <p>Upserts (insert or update) jetpacks from a remote source.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source/upsert-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> remoteJetpacks List of jetpack entities from the remote source to be upserted."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/","title":"Index","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/#localdatasourceimpl","title":"LocalDataSourceImpl","text":"<p>class LocalDataSourceImpl@Injectconstructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher) : LocalDataSource</p> <p>Implementation of LocalDataSource that interacts with the local storage using JetpackDao.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDao The data access object for performing database operations. ioDispatcher The coroutine dispatcher for performing IO-bound tasks."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/#constructors","title":"Constructors","text":"LocalDataSourceImpl [androidJvm]@Injectconstructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher)"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/#functions","title":"Functions","text":"Name Summary deleteJetpackPermanently [androidJvm]open suspend override fun deleteJetpackPermanently(id: String)Permanently deletes a jetpack from the database. getJetpack [androidJvm]open override fun getJetpack(id: String): Flow&lt;JetpackEntity&gt;Retrieves a specific jetpack by its ID. getJetpacks [androidJvm]open override fun getJetpacks(userId: String): Flow&lt;List&lt;JetpackEntity&gt;&gt;Retrieves a list of jetpacks for a specific user. getLatestUpdateTimestamp [androidJvm]open suspend override fun getLatestUpdateTimestamp(userId: String): LongGets the most recent lastUpdated timestamp for a specific user's jetpacks. getUnsyncedJetpacks [androidJvm]open suspend override fun getUnsyncedJetpacks(userId: String): List&lt;JetpackEntity&gt;Retrieves a list of jetpacks for a specific user that need to be synced. insertJetpack [androidJvm]open suspend override fun insertJetpack(jetpackEntity: JetpackEntity)Inserts a new jetpack into the database. markAsSynced [androidJvm]open suspend override fun markAsSynced(id: String, timestamp: Long)Marks a jetpack as synced. markJetpackAsDeleted [androidJvm]open suspend override fun markJetpackAsDeleted(id: String)Marks a jetpack as deleted. updateJetpack [androidJvm]open suspend override fun updateJetpack(jetpackEntity: JetpackEntity)Updates an existing jetpack in the database. upsertJetpack [androidJvm]open suspend override fun upsertJetpack(jetpackEntity: JetpackEntity)Inserts or updates a jetpack in the database. upsertJetpacks [androidJvm]open suspend override fun upsertJetpacks(remoteJetpacks: List&lt;JetpackEntity&gt;)Upserts (insert or update) jetpacks from a remote source."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/-local-data-source-impl/","title":"local data source impl","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/LocalDataSourceImpl</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/-local-data-source-impl/#localdatasourceimpl","title":"LocalDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(jetpackDao: JetpackDao, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/-local-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDao The data access object for performing database operations. ioDispatcher The coroutine dispatcher for performing IO-bound tasks."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/delete-jetpack-permanently/","title":"Delete jetpack permanently","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/deleteJetpackPermanently</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/delete-jetpack-permanently/#deletejetpackpermanently","title":"deleteJetpackPermanently","text":"<p>[androidJvm]\\ open suspend override fun deleteJetpackPermanently(id: String)</p> <p>Permanently deletes a jetpack from the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/delete-jetpack-permanently/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to delete."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpack/","title":"Get jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/getJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpack/#getjetpack","title":"getJetpack","text":"<p>[androidJvm]\\ open override fun getJetpack(id: String): Flow&lt;JetpackEntity&gt;</p> <p>Retrieves a specific jetpack by its ID.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpack/#return","title":"Return","text":"<p>A Flow emitting the JetpackEntity object.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpacks/","title":"Get jetpacks","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/getJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpacks/#getjetpacks","title":"getJetpacks","text":"<p>[androidJvm]\\ open override fun getJetpacks(userId: String): Flow&lt;List&lt;JetpackEntity&gt;&gt;</p> <p>Retrieves a list of jetpacks for a specific user.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpacks/#return","title":"Return","text":"<p>A Flow emitting a list of JetpackEntity objects.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose jetpacks to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-latest-update-timestamp/","title":"Get latest update timestamp","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/getLatestUpdateTimestamp</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-latest-update-timestamp/#getlatestupdatetimestamp","title":"getLatestUpdateTimestamp","text":"<p>[androidJvm]\\ open suspend override fun getLatestUpdateTimestamp(userId: String): Long</p> <p>Gets the most recent lastUpdated timestamp for a specific user's jetpacks.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-latest-update-timestamp/#return","title":"Return","text":"<p>The most recent lastUpdated timestamp for that user's jetpacks, or 0 if no jetpacks exist.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-latest-update-timestamp/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose jetpacks to check."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-unsynced-jetpacks/","title":"Get unsynced jetpacks","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/getUnsyncedJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-unsynced-jetpacks/#getunsyncedjetpacks","title":"getUnsyncedJetpacks","text":"<p>[androidJvm]\\ open suspend override fun getUnsyncedJetpacks(userId: String): List&lt;JetpackEntity&gt;</p> <p>Retrieves a list of jetpacks for a specific user that need to be synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-unsynced-jetpacks/#return","title":"Return","text":"<p>A list of JetpackEntity objects that need to be synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/get-unsynced-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The ID of the user whose unsynced jetpacks to retrieve."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/insert-jetpack/","title":"Insert jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/insertJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/insert-jetpack/#insertjetpack","title":"insertJetpack","text":"<p>[androidJvm]\\ open suspend override fun insertJetpack(jetpackEntity: JetpackEntity)</p> <p>Inserts a new jetpack into the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/insert-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to insert."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/mark-as-synced/","title":"Mark as synced","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/markAsSynced</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/mark-as-synced/#markassynced","title":"markAsSynced","text":"<p>[androidJvm]\\ open suspend override fun markAsSynced(id: String, timestamp: Long)</p> <p>Marks a jetpack as synced.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/mark-as-synced/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to mark as synced. timestamp The timestamp to set as the last synced time. Defaults to the current system time."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/mark-jetpack-as-deleted/","title":"Mark jetpack as deleted","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/markJetpackAsDeleted</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/mark-jetpack-as-deleted/#markjetpackasdeleted","title":"markJetpackAsDeleted","text":"<p>[androidJvm]\\ open suspend override fun markJetpackAsDeleted(id: String)</p> <p>Marks a jetpack as deleted.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/mark-jetpack-as-deleted/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack to mark as deleted."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/update-jetpack/","title":"Update jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/updateJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/update-jetpack/#updatejetpack","title":"updateJetpack","text":"<p>[androidJvm]\\ open suspend override fun updateJetpack(jetpackEntity: JetpackEntity)</p> <p>Updates an existing jetpack in the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/update-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to update."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/upsert-jetpack/","title":"Upsert jetpack","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/upsertJetpack</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/upsert-jetpack/#upsertjetpack","title":"upsertJetpack","text":"<p>[androidJvm]\\ open suspend override fun upsertJetpack(jetpackEntity: JetpackEntity)</p> <p>Inserts or updates a jetpack in the database.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/upsert-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackEntity The JetpackEntity object to upsert."},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/upsert-jetpacks/","title":"Upsert jetpacks","text":"<p>//room/dev.atick.core.room.data/LocalDataSourceImpl/upsertJetpacks</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/upsert-jetpacks/#upsertjetpacks","title":"upsertJetpacks","text":"<p>[androidJvm]\\ open suspend override fun upsertJetpacks(remoteJetpacks: List&lt;JetpackEntity&gt;)</p> <p>Upserts (insert or update) jetpacks from a remote source.</p>"},{"location":"core/room/room/dev.atick.core.room.data/-local-data-source-impl/upsert-jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> remoteJetpacks List of jetpack entities from the remote source to be upserted."},{"location":"core/room/room/dev.atick.core.room.di/","title":"Index","text":"<p>//room/dev.atick.core.room.di</p>"},{"location":"core/room/room/dev.atick.core.room.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/room/room/dev.atick.core.room.di/#types","title":"Types","text":"Name Summary DaoModule [androidJvm]@Module(includes = [DatabaseModule::class])object DaoModuleDagger module for data access object. DatabaseModule [androidJvm]@Moduleobject DatabaseModuleDagger module for database. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger Hilt module responsible for providing implementations of data source interfaces."},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/","title":"Index","text":"<p>//room/dev.atick.core.room.di/DaoModule</p>"},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/#daomodule","title":"DaoModule","text":"<p>[androidJvm]\\ @Module(includes = [DatabaseModule::class])</p> <p>object DaoModule</p> <p>Dagger module for data access object.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/#functions","title":"Functions","text":"Name Summary provideJetpackDao [androidJvm]@Singleton@Providesfun provideJetpackDao(jetpackDatabase: JetpackDatabase): JetpackDaoGet the data access."},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/provide-jetpack-dao/","title":"Provide jetpack dao","text":"<p>//room/dev.atick.core.room.di/DaoModule/provideJetpackDao</p>"},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/provide-jetpack-dao/#providejetpackdao","title":"provideJetpackDao","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideJetpackDao(jetpackDatabase: JetpackDatabase): JetpackDao</p> <p>Get the data access.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/provide-jetpack-dao/#return","title":"Return","text":"<p>The data access object.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-dao-module/provide-jetpack-dao/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackDatabase The database for Jetpack."},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/","title":"Index","text":"<p>//room/dev.atick.core.room.di/DataSourceModule</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger Hilt module responsible for providing implementations of data source interfaces.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindLocalDataSource [androidJvm]@Binds@Singletonabstract fun bindLocalDataSource(localDataSourceImpl: LocalDataSourceImpl): LocalDataSourceBinds the LocalDataSourceImpl implementation to the LocalDataSource interface."},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//room/dev.atick.core.room.di/DataSourceModule/DataSourceModule</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/bind-local-data-source/","title":"Bind local data source","text":"<p>//room/dev.atick.core.room.di/DataSourceModule/bindLocalDataSource</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/bind-local-data-source/#bindlocaldatasource","title":"bindLocalDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindLocalDataSource(localDataSourceImpl: LocalDataSourceImpl): LocalDataSource</p> <p>Binds the LocalDataSourceImpl implementation to the LocalDataSource interface.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/bind-local-data-source/#return","title":"Return","text":"<p>An instance of LocalDataSource representing the local data source.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-data-source-module/bind-local-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> localDataSourceImpl The concrete implementation of LocalDataSourceImpl."},{"location":"core/room/room/dev.atick.core.room.di/-database-module/","title":"Index","text":"<p>//room/dev.atick.core.room.di/DatabaseModule</p>"},{"location":"core/room/room/dev.atick.core.room.di/-database-module/#databasemodule","title":"DatabaseModule","text":"<p>[androidJvm]\\ @Module</p> <p>object DatabaseModule</p> <p>Dagger module for database.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-database-module/#functions","title":"Functions","text":"Name Summary provideRoomDatabase [androidJvm]@Singleton@Providesfun provideRoomDatabase(appContext: Context): JetpackDatabaseGet the database for Jetpack."},{"location":"core/room/room/dev.atick.core.room.di/-database-module/provide-room-database/","title":"Provide room database","text":"<p>//room/dev.atick.core.room.di/DatabaseModule/provideRoomDatabase</p>"},{"location":"core/room/room/dev.atick.core.room.di/-database-module/provide-room-database/#provideroomdatabase","title":"provideRoomDatabase","text":"<p>[androidJvm]\\</p> <p>@Singleton</p> <p>@Provides</p> <p>fun provideRoomDatabase(appContext: Context): JetpackDatabase</p> <p>Get the database for Jetpack.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-database-module/provide-room-database/#return","title":"Return","text":"<p>The database for Jetpack.</p>"},{"location":"core/room/room/dev.atick.core.room.di/-database-module/provide-room-database/#parameters","title":"Parameters","text":"<p>androidJvm</p> appContext The application context."},{"location":"core/room/room/dev.atick.core.room.models/","title":"Index","text":"<p>//room/dev.atick.core.room.models</p>"},{"location":"core/room/room/dev.atick.core.room.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/room/room/dev.atick.core.room.models/#types","title":"Types","text":"Name Summary JetpackEntity [androidJvm]data class JetpackEntity(val id: String = UUID.randomUUID().toString(), val name: String, val price: Double, val userId: String = String(), val lastUpdated: Long = 0, val lastSynced: Long = 0, val needsSync: Boolean = false, val deleted: Boolean = false, val syncAction: SyncAction = SyncAction.NONE)Represents a JetpackEntity, which is a data structure for storing information about a jetpack. PostEntity [androidJvm]data class PostEntity(val id: Int, val title: String, val url: String, val thumbnailUrl: String)Represents a PostEntity, which is a data structure for storing information about a post. SyncAction [androidJvm]enum SyncAction : Enum&lt;SyncAction&gt; Represents a SyncAction, which is an enumeration of the possible actions to take when syncing an item."},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/","title":"Index","text":"<p>//room/dev.atick.core.room.models/JetpackEntity</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/#jetpackentity","title":"JetpackEntity","text":"<p>[androidJvm]\\ data class JetpackEntity(val id: String = UUID.randomUUID().toString(), val name: String, val price: Double, val userId: String = String(), val lastUpdated: Long = 0, val lastSynced: Long = 0, val needsSync: Boolean = false, val deleted: Boolean = false, val syncAction: SyncAction = SyncAction.NONE)</p> <p>Represents a JetpackEntity, which is a data structure for storing information about a jetpack.</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/#constructors","title":"Constructors","text":"JetpackEntity [androidJvm]constructor(id: String = UUID.randomUUID().toString(), name: String, price: Double, userId: String = String(), lastUpdated: Long = 0, lastSynced: Long = 0, needsSync: Boolean = false, deleted: Boolean = false, syncAction: SyncAction = SyncAction.NONE)"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/#properties","title":"Properties","text":"Name Summary deleted [androidJvm]val deleted: Boolean = falseA flag indicating whether the jetpack has been deleted. id [androidJvm]val id: StringThe unique identifier for the jetpack entity. lastSynced [androidJvm]val lastSynced: Long = 0The timestamp of the last sync operation. lastUpdated [androidJvm]val lastUpdated: Long = 0 name [androidJvm]val name: StringThe name of the jetpack. needsSync [androidJvm]val needsSync: Boolean = falseA flag indicating whether the jetpack needs to be synced. price [androidJvm]val price: DoubleThe price of the jetpack. syncAction [androidJvm]val syncAction: SyncActionThe action to take when syncing the jetpack. userId [androidJvm]val userId: String"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/-jetpack-entity/","title":"jetpack entity","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/JetpackEntity</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/-jetpack-entity/#jetpackentity","title":"JetpackEntity","text":"<p>[androidJvm]\\ constructor(id: String = UUID.randomUUID().toString(), name: String, price: Double, userId: String = String(), lastUpdated: Long = 0, lastSynced: Long = 0, needsSync: Boolean = false, deleted: Boolean = false, syncAction: SyncAction = SyncAction.NONE)</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/deleted/","title":"Deleted","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/deleted</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/deleted/#deleted","title":"deleted","text":"<p>[androidJvm]\\ val deleted: Boolean = false</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/id/","title":"Id","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/id</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/last-synced/","title":"Last synced","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/lastSynced</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/last-synced/#lastsynced","title":"lastSynced","text":"<p>[androidJvm]\\ val lastSynced: Long = 0</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/last-updated/","title":"Last updated","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/lastUpdated</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/last-updated/#lastupdated","title":"lastUpdated","text":"<p>[androidJvm]\\ val lastUpdated: Long = 0</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/name/","title":"Name","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/name</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/needs-sync/","title":"Needs sync","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/needsSync</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/needs-sync/#needssync","title":"needsSync","text":"<p>[androidJvm]\\ val needsSync: Boolean = false</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/price/","title":"Price","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/price</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/price/#price","title":"price","text":"<p>[androidJvm]\\ val price: Double</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/sync-action/","title":"Sync action","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/syncAction</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/sync-action/#syncaction","title":"syncAction","text":"<p>[androidJvm]\\ val syncAction: SyncAction</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/user-id/","title":"User id","text":"<p>//room/dev.atick.core.room.models/JetpackEntity/userId</p>"},{"location":"core/room/room/dev.atick.core.room.models/-jetpack-entity/user-id/#userid","title":"userId","text":"<p>[androidJvm]\\ val userId: String</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/","title":"Index","text":"<p>//room/dev.atick.core.room.models/PostEntity</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/#postentity","title":"PostEntity","text":"<p>[androidJvm]\\ data class PostEntity(val id: Int, val title: String, val url: String, val thumbnailUrl: String)</p> <p>Represents a PostEntity, which is a data structure for storing information about a post.</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/#constructors","title":"Constructors","text":"PostEntity [androidJvm]constructor(id: Int, title: String, url: String, thumbnailUrl: String)"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: IntThe unique identifier for the post entity. thumbnailUrl [androidJvm]val thumbnailUrl: StringThe URL of the thumbnail image associated with the post. title [androidJvm]val title: StringThe title of the post. url [androidJvm]val url: StringThe URL associated with the post."},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/-post-entity/","title":"post entity","text":"<p>//room/dev.atick.core.room.models/PostEntity/PostEntity</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/-post-entity/#postentity","title":"PostEntity","text":"<p>[androidJvm]\\ constructor(id: Int, title: String, url: String, thumbnailUrl: String)</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/id/","title":"Id","text":"<p>//room/dev.atick.core.room.models/PostEntity/id</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: Int</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/thumbnail-url/","title":"Thumbnail url","text":"<p>//room/dev.atick.core.room.models/PostEntity/thumbnailUrl</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/thumbnail-url/#thumbnailurl","title":"thumbnailUrl","text":"<p>[androidJvm]\\ val thumbnailUrl: String</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/title/","title":"Title","text":"<p>//room/dev.atick.core.room.models/PostEntity/title</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/title/#title","title":"title","text":"<p>[androidJvm]\\ val title: String</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/url/","title":"Url","text":"<p>//room/dev.atick.core.room.models/PostEntity/url</p>"},{"location":"core/room/room/dev.atick.core.room.models/-post-entity/url/#url","title":"url","text":"<p>[androidJvm]\\ val url: String</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/","title":"Index","text":"<p>//room/dev.atick.core.room.models/SyncAction</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/#syncaction","title":"SyncAction","text":"<p>[androidJvm]\\ enum SyncAction : Enum&lt;SyncAction&gt; </p> <p>Represents a SyncAction, which is an enumeration of the possible actions to take when syncing an item.</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/#entries","title":"Entries","text":"NONE [androidJvm]NONE UPSERT [androidJvm]UPSERT DELETE [androidJvm]DELETE"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;SyncAction&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): SyncActionReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;SyncAction&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/entries/","title":"Entries","text":"<p>//room/dev.atick.core.room.models/SyncAction/entries</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;SyncAction&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/value-of/","title":"Value of","text":"<p>//room/dev.atick.core.room.models/SyncAction/valueOf</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): SyncAction</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/values/","title":"Values","text":"<p>//room/dev.atick.core.room.models/SyncAction/values</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;SyncAction&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-d-e-l-e-t-e/","title":"Index","text":"<p>//room/dev.atick.core.room.models/SyncAction/DELETE</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-d-e-l-e-t-e/#delete","title":"DELETE","text":"<p>[androidJvm]\\ DELETE</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-d-e-l-e-t-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-n-o-n-e/","title":"Index","text":"<p>//room/dev.atick.core.room.models/SyncAction/NONE</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-n-o-n-e/#none","title":"NONE","text":"<p>[androidJvm]\\ NONE</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-n-o-n-e/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-u-p-s-e-r-t/","title":"Index","text":"<p>//room/dev.atick.core.room.models/SyncAction/UPSERT</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-u-p-s-e-r-t/#upsert","title":"UPSERT","text":"<p>[androidJvm]\\ UPSERT</p>"},{"location":"core/room/room/dev.atick.core.room.models/-sync-action/-u-p-s-e-r-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/ui/","title":"Index","text":"<p>//ui</p>"},{"location":"core/ui/#ui","title":"ui","text":""},{"location":"core/ui/#packages","title":"Packages","text":"Name dev.atick.core.ui.components dev.atick.core.ui.extensions dev.atick.core.ui.theme dev.atick.core.ui.utils"},{"location":"core/ui/ui/dev.atick.core.ui.components/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.components/#types","title":"Types","text":"Name Summary JetpackButtonDefaults [androidJvm]object JetpackButtonDefaultsJetpack button default values. JetpackChipDefaults [androidJvm]object JetpackChipDefaultsJetpack chip default values. JetpackIconButtonDefaults [androidJvm]object JetpackIconButtonDefaultsJetpack icon button default values. JetpackNavigationDefaults [androidJvm]object JetpackNavigationDefaultsJetpack navigation default values. JetpackNavigationSuiteScope [androidJvm]class JetpackNavigationSuiteScopeJetpack navigation suite scope for setting item properties. JetpackTabDefaults [androidJvm]object JetpackTabDefaultsJetpack tab default values. JetpackTagDefaults [androidJvm]object JetpackTagDefaultsJetpack tag default values."},{"location":"core/ui/ui/dev.atick.core.ui.components/#functions","title":"Functions","text":"Name Summary AppBackground [androidJvm]@Composablefun AppBackground(modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)The main background for the app. Uses LocalBackgroundTheme to set the color and tonal elevation of a Surface. AppGradientBackground [androidJvm]@Composablefun AppGradientBackground(modifier: Modifier = Modifier, gradientColors: GradientColors = LocalGradientColors.current, content: @Composable() -&gt; Unit)A gradient background for select screens. Uses LocalBackgroundTheme to set the gradient colors of a Box within a Surface. DynamicAsyncImage [androidJvm]@Composablefun DynamicAsyncImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier, placeholder: Painter = painterResource(R.drawable.ic_placeholder))A wrapper around AsyncImage which determines the colorFilter based on the theme JetpackActionBar [androidJvm]@Composablefun JetpackActionBar(@StringRestitleRes: Int, @StringResactionRes: Int, onActionClick: () -&gt; Unit, onNavigateBackClick: () -&gt; Unit, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.topAppBarColors())A Jetpack Compose top app bar with a title, navigation icon, and action button. JetpackButton [androidJvm]@Composablefun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)Jetpack filled button with generic content slot. Wraps Material 3 Button.[androidJvm]@Composablefun JetpackButton(onClick: () -&gt; Unit, text: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack filled button with text and icon content slots. JetpackExtendedFab [androidJvm]@Composablefun JetpackExtendedFab(icon: ImageVector, @StringRestext: Int, onClick: () -&gt; Unit, modifier: Modifier = Modifier)Composable function that represents the floating action button in the Jetpack application. JetpackFilterChip [androidJvm]@Composablefun JetpackFilterChip(selected: Boolean, onSelectedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, label: @Composable() -&gt; Unit)Jetpack filter chip with included leading checked icon as well as text content slot. JetpackIconToggleButton [androidJvm]@Composablefun JetpackIconToggleButton(checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, checkedIcon: @Composable() -&gt; Unit = icon)Jetpack toggle button with icon and checked icon content slots. Wraps Material 3 IconButton. JetpackLoadingWheel [androidJvm]@Composablefun JetpackLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)Composable function that represents the loading wheel in the Jetpack application. JetpackNavigationBar [androidJvm]@Composablefun JetpackNavigationBar(modifier: Modifier = Modifier, content: @ComposableRowScope.() -&gt; Unit)Jetpack navigation bar with content slot. Wraps Material 3 NavigationBar. JetpackNavigationBarItem [androidJvm]@Composablefun RowScope.JetpackNavigationBarItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)Jetpack navigation bar item with icon and label content slots. Wraps Material 3 NavigationBarItem. JetpackNavigationRail [androidJvm]@Composablefun JetpackNavigationRail(modifier: Modifier = Modifier, header: @ComposableColumnScope.() -&gt; Unit? = null, content: @ComposableColumnScope.() -&gt; Unit)Jetpack navigation rail with header and content slots. Wraps Material 3 NavigationRail. JetpackNavigationRailItem [androidJvm]@Composablefun JetpackNavigationRailItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)Jetpack navigation rail item with icon and label content slots. Wraps Material 3 NavigationRailItem. JetpackNavigationSuiteScaffold [androidJvm]@Composablefun JetpackNavigationSuiteScaffold(navigationSuiteItems: JetpackNavigationSuiteScope.() -&gt; Unit, modifier: Modifier = Modifier, windowAdaptiveInfo: WindowAdaptiveInfo = currentWindowAdaptiveInfo(), content: @Composable() -&gt; Unit)Jetpack navigation suite scaffold with item and content slots. Wraps Material 3 NavigationSuiteScaffold. JetpackOutlinedButton [androidJvm]@Composablefun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)Jetpack outlined button with generic content slot. Wraps Material 3 OutlinedButton.[androidJvm]@Composablefun JetpackOutlinedButton(onClick: () -&gt; Unit, text: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack outlined button with text and icon content slots. JetpackOverlayLoadingWheel [androidJvm]@Composablefun JetpackOverlayLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)Composable function that represents the loading wheel in the Jetpack application with an overlay. JetpackPasswordFiled [androidJvm]@Composablefun JetpackPasswordFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, errorMessage: String? = null)A Jetpack Compose password field with customizable appearance and optional error message display. JetpackTab [androidJvm]@Composablefun JetpackTab(selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit)Jetpack tab. Wraps Material 3 Tab and shifts text label down. JetpackTabRow [androidJvm]@Composablefun JetpackTabRow(selectedTabIndex: Int, modifier: Modifier = Modifier, tabs: @Composable() -&gt; Unit)Jetpack tab row. Wraps Material 3 TabRow. JetpackTag [androidJvm]@Composablefun JetpackTag(followed: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit)Jetpack tag. JetpackTextButton [androidJvm]@Composablefun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @ComposableRowScope.() -&gt; Unit)Jetpack text button with generic content slot. Wraps Material 3 TextButton.[androidJvm]@Composablefun JetpackTextButton(onClick: () -&gt; Unit, text: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: @Composable() -&gt; Unit? = null)Jetpack text button with text and icon content slots. JetpackTextFiled [androidJvm]@Composablefun JetpackTextFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null)A Jetpack Compose text field with customizable appearance and optional error message display. JetpackTopAppBar [androidJvm]@Composablefun JetpackTopAppBar(@StringRestitleRes: Int, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onActionClick: () -&gt; Unit = {})A Jetpack Compose top app bar with a title and action icon.[androidJvm]@Composablefun JetpackTopAppBar(@StringRestitleRes: Int, navigationIcon: ImageVector, navigationIconContentDescription: String?, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onNavigationClick: () -&gt; Unit = {}, onActionClick: () -&gt; Unit = {})A Jetpack Compose top app bar with a title, navigation icon, and action icon. JetpackTopAppBarWithAvatar [androidJvm]@Composablefun JetpackTopAppBarWithAvatar(@StringRestitleRes: Int, avatarUri: String?, avatarContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onAvatarClick: () -&gt; Unit = {})A Jetpack Compose top app bar with a title and avatar. SwipeToDismiss [androidJvm]@Composablefun SwipeToDismiss(onDelete: () -&gt; Unit, modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)A composable that allows swiping to dismiss an item."},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/","title":"app background","text":"<p>//ui/dev.atick.core.ui.components/AppBackground</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/#appbackground","title":"AppBackground","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun AppBackground(modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)</p> <p>The main background for the app. Uses LocalBackgroundTheme to set the color and tonal elevation of a Surface.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-background/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the background. content The background content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/","title":"app gradient background","text":"<p>//ui/dev.atick.core.ui.components/AppGradientBackground</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/#appgradientbackground","title":"AppGradientBackground","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun AppGradientBackground(modifier: Modifier = Modifier, gradientColors: GradientColors = LocalGradientColors.current, content: @Composable() -&gt; Unit)</p> <p>A gradient background for select screens. Uses LocalBackgroundTheme to set the gradient colors of a Box within a Surface.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-app-gradient-background/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the background. gradientColors The gradient colors to be rendered. content The background content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-dynamic-async-image/","title":"dynamic async image","text":"<p>//ui/dev.atick.core.ui.components/DynamicAsyncImage</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-dynamic-async-image/#dynamicasyncimage","title":"DynamicAsyncImage","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun DynamicAsyncImage(imageUrl: String, contentDescription: String?, modifier: Modifier = Modifier, placeholder: Painter = painterResource(R.drawable.ic_placeholder))</p> <p>A wrapper around AsyncImage which determines the colorFilter based on the theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-action-bar/","title":"jetpack action bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackActionBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-action-bar/#jetpackactionbar","title":"JetpackActionBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackActionBar(@StringRestitleRes: Int, @StringResactionRes: Int, onActionClick: () -&gt; Unit, onNavigateBackClick: () -&gt; Unit, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.topAppBarColors())</p> <p>A Jetpack Compose top app bar with a title, navigation icon, and action button.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-action-bar/#parameters","title":"Parameters","text":"<p>androidJvm</p> titleRes The string resource ID for the title of the top app bar. actionRes The string resource ID for the action button. onActionClick The callback when the action button is clicked. onNavigateBackClick The callback when the navigation icon is clicked. colors The colors for this top app bar. modifier The modifier for this top app bar."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/","title":"jetpack button","text":"<p>//ui/dev.atick.core.ui.components/JetpackButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#jetpackbutton","title":"JetpackButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack filled button with generic content slot. Wraps Material 3 Button.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. contentPadding The spacing values to apply internally between the container and the content. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackButton(onClick: () -&gt; Unit, text: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack filled button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. text The button text label content. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-extended-fab/","title":"jetpack extended fab","text":"<p>//ui/dev.atick.core.ui.components/JetpackExtendedFab</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-extended-fab/#jetpackextendedfab","title":"JetpackExtendedFab","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackExtendedFab(icon: ImageVector, @StringRestext: Int, onClick: () -&gt; Unit, modifier: Modifier = Modifier)</p> <p>Composable function that represents the floating action button in the Jetpack application.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-extended-fab/#parameters","title":"Parameters","text":"<p>androidJvm</p> icon The icon to be displayed on the floating action button. text The text to be displayed on the floating action button. onClick Callback when the floating action button is clicked. modifier Modifier to be applied to the floating action button."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/","title":"jetpack filter chip","text":"<p>//ui/dev.atick.core.ui.components/JetpackFilterChip</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/#jetpackfilterchip","title":"JetpackFilterChip","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackFilterChip(selected: Boolean, onSelectedChange: (Boolean) -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, label: @Composable() -&gt; Unit)</p> <p>Jetpack filter chip with included leading checked icon as well as text content slot.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-filter-chip/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether the chip is currently checked. onSelectedChange Called when the user clicks the chip and toggles checked. modifier Modifier to be applied to the chip. enabled Controls the enabled state of the chip. When <code>false</code>, this chip will not be clickable and will appear disabled to accessibility services. label The text label content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/","title":"jetpack icon toggle button","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconToggleButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/#jetpackicontogglebutton","title":"JetpackIconToggleButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackIconToggleButton(checked: Boolean, onCheckedChange: (Boolean) -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, checkedIcon: @Composable() -&gt; Unit = icon)</p> <p>Jetpack toggle button with icon and checked icon content slots. Wraps Material 3 IconButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-toggle-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> checked Whether the toggle button is currently checked. onCheckedChange Called when the user clicks the toggle button and toggles checked. modifier Modifier to be applied to the toggle button. enabled Controls the enabled state of the toggle button. When <code>false</code>, this toggle button will not be clickable and will appear disabled to accessibility services. icon The icon content to show when unchecked. checkedIcon The icon content to show when checked."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/","title":"jetpack loading wheel","text":"<p>//ui/dev.atick.core.ui.components/JetpackLoadingWheel</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/#jetpackloadingwheel","title":"JetpackLoadingWheel","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)</p> <p>Composable function that represents the loading wheel in the Jetpack application.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-loading-wheel/#parameters","title":"Parameters","text":"<p>androidJvm</p> contentDesc The content description for the loading wheel. modifier The modifier to be applied to the loading wheel."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/","title":"jetpack navigation bar item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationBarItem</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/#jetpacknavigationbaritem","title":"JetpackNavigationBarItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun RowScope.JetpackNavigationBarItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)</p> <p>Jetpack navigation bar item with icon and label content slots. Wraps Material 3 NavigationBarItem.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar-item/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this item is selected. onClick The callback to be invoked when this item is selected. icon The item icon content. modifier Modifier to be applied to this item. selectedIcon The item icon content when selected. enabled controls the enabled state of this item. When <code>false</code>, this item will not be clickable and will appear disabled to accessibility services. label The item text label content. alwaysShowLabel Whether to always show the label for this item. If false, the label will only be shown when this item is selected."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/","title":"jetpack navigation bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/#jetpacknavigationbar","title":"JetpackNavigationBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationBar(modifier: Modifier = Modifier, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack navigation bar with content slot. Wraps Material 3 NavigationBar.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-bar/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation bar. content Destinations inside the navigation bar. This should contain multiple NavigationBarItems."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/","title":"jetpack navigation rail item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationRailItem</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/#jetpacknavigationrailitem","title":"JetpackNavigationRailItem","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationRailItem(selected: Boolean, onClick: () -&gt; Unit, icon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, selectedIcon: @Composable() -&gt; Unit = icon, enabled: Boolean = true, label: @Composable() -&gt; Unit? = null, alwaysShowLabel: Boolean = true)</p> <p>Jetpack navigation rail item with icon and label content slots. Wraps Material 3 NavigationRailItem.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail-item/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this item is selected. onClick The callback to be invoked when this item is selected. icon The item icon content. modifier Modifier to be applied to this item. selectedIcon The item icon content when selected. enabled controls the enabled state of this item. When <code>false</code>, this item will not be clickable and will appear disabled to accessibility services. label The item text label content. alwaysShowLabel Whether to always show the label for this item. If false, the label will only be shown when this item is selected."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/","title":"jetpack navigation rail","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationRail</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/#jetpacknavigationrail","title":"JetpackNavigationRail","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationRail(modifier: Modifier = Modifier, header: @ComposableColumnScope.() -&gt; Unit? = null, content: @ComposableColumnScope.() -&gt; Unit)</p> <p>Jetpack navigation rail with header and content slots. Wraps Material 3 NavigationRail.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-rail/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation rail. header Optional header that may hold a floating action button or a logo. content Destinations inside the navigation rail. This should contain multiple NavigationRailItems."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scaffold/","title":"jetpack navigation suite scaffold","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationSuiteScaffold</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scaffold/#jetpacknavigationsuitescaffold","title":"JetpackNavigationSuiteScaffold","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackNavigationSuiteScaffold(navigationSuiteItems: JetpackNavigationSuiteScope.() -&gt; Unit, modifier: Modifier = Modifier, windowAdaptiveInfo: WindowAdaptiveInfo = currentWindowAdaptiveInfo(), content: @Composable() -&gt; Unit)</p> <p>Jetpack navigation suite scaffold with item and content slots. Wraps Material 3 NavigationSuiteScaffold.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scaffold/#parameters","title":"Parameters","text":"<p>androidJvm</p> modifier Modifier to be applied to the navigation suite scaffold. navigationSuiteItems A slot to display multiple items via JetpackNavigationSuiteScope. windowAdaptiveInfo The window adaptive info. content The app content inside the scaffold."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/","title":"jetpack outlined button","text":"<p>//ui/dev.atick.core.ui.components/JetpackOutlinedButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#jetpackoutlinedbutton","title":"JetpackOutlinedButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOutlinedButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = ButtonDefaults.ContentPadding, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack outlined button with generic content slot. Wraps Material 3 OutlinedButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. contentPadding The spacing values to apply internally between the container and the content. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOutlinedButton(onClick: () -&gt; Unit, text: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack outlined button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-outlined-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/","title":"jetpack overlay loading wheel","text":"<p>//ui/dev.atick.core.ui.components/JetpackOverlayLoadingWheel</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/#jetpackoverlayloadingwheel","title":"JetpackOverlayLoadingWheel","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackOverlayLoadingWheel(contentDesc: String, modifier: Modifier = Modifier)</p> <p>Composable function that represents the loading wheel in the Jetpack application with an overlay.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-overlay-loading-wheel/#parameters","title":"Parameters","text":"<p>androidJvm</p> contentDesc The content description for the loading wheel. modifier The modifier to be applied to the loading wheel."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/","title":"jetpack password filed","text":"<p>//ui/dev.atick.core.ui.components/JetpackPasswordFiled</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/#jetpackpasswordfiled","title":"JetpackPasswordFiled","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackPasswordFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, errorMessage: String? = null)</p> <p>A Jetpack Compose password field with customizable appearance and optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-password-filed/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the password field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the password field. leadingIcon A composable function that represents the leading icon of the password field. modifier The modifier for this password field. errorMessage The error message to display below the password field, if any."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-row/","title":"jetpack tab row","text":"<p>//ui/dev.atick.core.ui.components/JetpackTabRow</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-row/#jetpacktabrow","title":"JetpackTabRow","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTabRow(selectedTabIndex: Int, modifier: Modifier = Modifier, tabs: @Composable() -&gt; Unit)</p> <p>Jetpack tab row. Wraps Material 3 TabRow.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-row/#parameters","title":"Parameters","text":"<p>androidJvm</p> selectedTabIndex The index of the currently selected tab. modifier Modifier to be applied to the tab row. tabs The tabs inside this tab row. Typically this will be multiple JetpackTabs. Each element inside this lambda will be measured and placed evenly across the row, each taking up equal space."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab/","title":"jetpack tab","text":"<p>//ui/dev.atick.core.ui.components/JetpackTab</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab/#jetpacktab","title":"JetpackTab","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTab(selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit)</p> <p>Jetpack tab. Wraps Material 3 Tab and shifts text label down.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab/#parameters","title":"Parameters","text":"<p>androidJvm</p> selected Whether this tab is selected or not. onClick The callback to be invoked when this tab is selected. modifier Modifier to be applied to the tab. enabled Controls the enabled state of the tab. When <code>false</code>, this tab will not be clickable and will appear disabled to accessibility services. text The text label content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag/","title":"jetpack tag","text":"<p>//ui/dev.atick.core.ui.components/JetpackTag</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag/#jetpacktag","title":"JetpackTag","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTag(followed: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, text: @Composable() -&gt; Unit)</p> <p>Jetpack tag.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag/#parameters","title":"Parameters","text":"<p>androidJvm</p> followed Whether this tag is followed or not. onClick The callback to be invoked when this tag is clicked. modifier Modifier to be applied to the tag. enabled Controls the enabled state of the tag. When <code>false</code>, this tag will not be clickable and will appear disabled to accessibility services. text The text label content."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/","title":"jetpack text button","text":"<p>//ui/dev.atick.core.ui.components/JetpackTextButton</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#jetpacktextbutton","title":"JetpackTextButton","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextButton(onClick: () -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, content: @ComposableRowScope.() -&gt; Unit)</p> <p>Jetpack text button with generic content slot. Wraps Material 3 TextButton.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#parameters","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. content The button content. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextButton(onClick: () -&gt; Unit, text: @Composable() -&gt; Unit, modifier: Modifier = Modifier, enabled: Boolean = true, leadingIcon: @Composable() -&gt; Unit? = null)</p> <p>Jetpack text button with text and icon content slots.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-button/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> onClick Will be called when the user clicks the button. modifier Modifier to be applied to the button. enabled Controls the enabled state of the button. When <code>false</code>, this button will not be clickable and will appear disabled to accessibility services. text The button text label content. leadingIcon The button leading icon content. Pass <code>null</code> here for no leading icon."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-filed/","title":"jetpack text filed","text":"<p>//ui/dev.atick.core.ui.components/JetpackTextFiled</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-filed/#jetpacktextfiled","title":"JetpackTextFiled","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTextFiled(value: String, onValueChange: (String) -&gt; Unit, label: @Composable() -&gt; Unit, leadingIcon: @Composable() -&gt; Unit, modifier: Modifier = Modifier, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, trailingIcon: @Composable() -&gt; Unit = {}, errorMessage: String? = null)</p> <p>A Jetpack Compose text field with customizable appearance and optional error message display.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-text-filed/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The current text value of the text field. onValueChange The callback invoked when the text value changes. label A composable function that represents the label of the text field. leadingIcon A composable function that represents the leading icon of the text field. modifier The modifier for this text field. keyboardOptions The keyboard options for the text field. trailingIcon A composable function that represents the trailing icon of the text field. errorMessage The error message to display below the text field, if any."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar-with-avatar/","title":"jetpack top app bar with avatar","text":"<p>//ui/dev.atick.core.ui.components/JetpackTopAppBarWithAvatar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar-with-avatar/#jetpacktopappbarwithavatar","title":"JetpackTopAppBarWithAvatar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTopAppBarWithAvatar(@StringRestitleRes: Int, avatarUri: String?, avatarContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onAvatarClick: () -&gt; Unit = {})</p> <p>A Jetpack Compose top app bar with a title and avatar.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar-with-avatar/#parameters","title":"Parameters","text":"<p>androidJvm</p> titleRes The string resource ID for the title of the top app bar. avatarUri The URI for the avatar image. avatarContentDescription The content description for the avatar. modifier The modifier for this top app bar. colors The colors for this top app bar. onAvatarClick The callback when the avatar is clicked."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/","title":"jetpack top app bar","text":"<p>//ui/dev.atick.core.ui.components/JetpackTopAppBar</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/#jetpacktopappbar","title":"JetpackTopAppBar","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTopAppBar(@StringRestitleRes: Int, navigationIcon: ImageVector, navigationIconContentDescription: String?, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onNavigationClick: () -&gt; Unit = {}, onActionClick: () -&gt; Unit = {})</p> <p>A Jetpack Compose top app bar with a title, navigation icon, and action icon.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/#parameters","title":"Parameters","text":"<p>androidJvm</p> titleRes The string resource ID for the title of the top app bar. navigationIcon The navigation icon to be displayed on the top app bar. navigationIconContentDescription The content description for the navigation icon. actionIcon The action icon to be displayed on the top app bar. actionIconContentDescription The content description for the action icon. modifier The modifier for this top app bar. colors The colors for this top app bar. onNavigationClick The callback when the navigation icon is clicked. onActionClick The callback when the action icon is clicked. <p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTopAppBar(@StringRestitleRes: Int, actionIcon: ImageVector, actionIconContentDescription: String?, modifier: Modifier = Modifier, colors: TopAppBarColors = TopAppBarDefaults.centerAlignedTopAppBarColors(), onActionClick: () -&gt; Unit = {})</p> <p>A Jetpack Compose top app bar with a title and action icon.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-top-app-bar/#parameters_1","title":"Parameters","text":"<p>androidJvm</p> titleRes The string resource ID for the title of the top app bar. actionIcon The action icon to be displayed on the top app bar. actionIconContentDescription The content description for the action icon. modifier The modifier for this top app bar. colors The colors for this top app bar. onActionClick The callback when the action icon is clicked."},{"location":"core/ui/ui/dev.atick.core.ui.components/-swipe-to-dismiss/","title":"swipe to dismiss","text":"<p>//ui/dev.atick.core.ui.components/SwipeToDismiss</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-swipe-to-dismiss/#swipetodismiss","title":"SwipeToDismiss","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SwipeToDismiss(onDelete: () -&gt; Unit, modifier: Modifier = Modifier, content: @Composable() -&gt; Unit)</p> <p>A composable that allows swiping to dismiss an item.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-swipe-to-dismiss/#parameters","title":"Parameters","text":"<p>androidJvm</p> onDelete The callback to be invoked when the item is swiped to dismiss. modifier The modifier to be applied to the composable. content The content to be displayed."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/#jetpackbuttondefaults","title":"JetpackButtonDefaults","text":"<p>[androidJvm]\\ object JetpackButtonDefaults</p> <p>Jetpack button default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/#properties","title":"Properties","text":"Name Summary DISABLED_OUTLINED_BUTTON_BORDER_ALPHA [androidJvm]const val DISABLED_OUTLINED_BUTTON_BORDER_ALPHA: Float = 0.12f OutlinedButtonBorderWidth [androidJvm]val OutlinedButtonBorderWidth: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-d-i-s-a-b-l-e-d_-o-u-t-l-i-n-e-d_-b-u-t-t-o-n_-b-o-r-d-e-r_-a-l-p-h-a/","title":"d i s a b l e d  o u t l i n e d  b u t t o n  b o r d e r  a l p h a","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults/DISABLED_OUTLINED_BUTTON_BORDER_ALPHA</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-d-i-s-a-b-l-e-d_-o-u-t-l-i-n-e-d_-b-u-t-t-o-n_-b-o-r-d-e-r_-a-l-p-h-a/#disabled_outlined_button_border_alpha","title":"DISABLED_OUTLINED_BUTTON_BORDER_ALPHA","text":"<p>[androidJvm]\\ const val DISABLED_OUTLINED_BUTTON_BORDER_ALPHA: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-outlined-button-border-width/","title":"outlined button border width","text":"<p>//ui/dev.atick.core.ui.components/JetpackButtonDefaults/OutlinedButtonBorderWidth</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-button-defaults/-outlined-button-border-width/#outlinedbuttonborderwidth","title":"OutlinedButtonBorderWidth","text":"<p>[androidJvm]\\ val OutlinedButtonBorderWidth: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/#jetpackchipdefaults","title":"JetpackChipDefaults","text":"<p>[androidJvm]\\ object JetpackChipDefaults</p> <p>Jetpack chip default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/#properties","title":"Properties","text":"Name Summary ChipBorderWidth [androidJvm]val ChipBorderWidth: Dp DISABLED_CHIP_CONTAINER_ALPHA [androidJvm]const val DISABLED_CHIP_CONTAINER_ALPHA: Float = 0.12f DISABLED_CHIP_CONTENT_ALPHA [androidJvm]const val DISABLED_CHIP_CONTENT_ALPHA: Float = 0.38f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-chip-border-width/","title":"chip border width","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/ChipBorderWidth</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-chip-border-width/#chipborderwidth","title":"ChipBorderWidth","text":"<p>[androidJvm]\\ val ChipBorderWidth: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-d-i-s-a-b-l-e-d_-c-h-i-p_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/","title":"d i s a b l e d  c h i p  c o n t a i n e r  a l p h a","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/DISABLED_CHIP_CONTAINER_ALPHA</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-d-i-s-a-b-l-e-d_-c-h-i-p_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/#disabled_chip_container_alpha","title":"DISABLED_CHIP_CONTAINER_ALPHA","text":"<p>[androidJvm]\\ const val DISABLED_CHIP_CONTAINER_ALPHA: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-d-i-s-a-b-l-e-d_-c-h-i-p_-c-o-n-t-e-n-t_-a-l-p-h-a/","title":"d i s a b l e d  c h i p  c o n t e n t  a l p h a","text":"<p>//ui/dev.atick.core.ui.components/JetpackChipDefaults/DISABLED_CHIP_CONTENT_ALPHA</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-chip-defaults/-d-i-s-a-b-l-e-d_-c-h-i-p_-c-o-n-t-e-n-t_-a-l-p-h-a/#disabled_chip_content_alpha","title":"DISABLED_CHIP_CONTENT_ALPHA","text":"<p>[androidJvm]\\ const val DISABLED_CHIP_CONTENT_ALPHA: Float = 0.38f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconButtonDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/#jetpackiconbuttondefaults","title":"JetpackIconButtonDefaults","text":"<p>[androidJvm]\\ object JetpackIconButtonDefaults</p> <p>Jetpack icon button default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/#properties","title":"Properties","text":"Name Summary DISABLED_ICON_BUTTON_CONTAINER_ALPHA [androidJvm]const val DISABLED_ICON_BUTTON_CONTAINER_ALPHA: Float = 0.12f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/-d-i-s-a-b-l-e-d_-i-c-o-n_-b-u-t-t-o-n_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/","title":"d i s a b l e d  i c o n  b u t t o n  c o n t a i n e r  a l p h a","text":"<p>//ui/dev.atick.core.ui.components/JetpackIconButtonDefaults/DISABLED_ICON_BUTTON_CONTAINER_ALPHA</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-icon-button-defaults/-d-i-s-a-b-l-e-d_-i-c-o-n_-b-u-t-t-o-n_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/#disabled_icon_button_container_alpha","title":"DISABLED_ICON_BUTTON_CONTAINER_ALPHA","text":"<p>[androidJvm]\\ const val DISABLED_ICON_BUTTON_CONTAINER_ALPHA: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/#jetpacknavigationdefaults","title":"JetpackNavigationDefaults","text":"<p>[androidJvm]\\ object JetpackNavigationDefaults</p> <p>Jetpack navigation default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/#functions","title":"Functions","text":"Name Summary navigationContentColor [androidJvm]@Composablefun navigationContentColor(): Color navigationIndicatorColor [androidJvm]@Composablefun navigationIndicatorColor(): Color navigationSelectedItemColor [androidJvm]@Composablefun navigationSelectedItemColor(): Color"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-content-color/","title":"Navigation content color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationContentColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-content-color/#navigationcontentcolor","title":"navigationContentColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationContentColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-indicator-color/","title":"Navigation indicator color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationIndicatorColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-indicator-color/#navigationindicatorcolor","title":"navigationIndicatorColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationIndicatorColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-selected-item-color/","title":"Navigation selected item color","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationDefaults/navigationSelectedItemColor</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-defaults/navigation-selected-item-color/#navigationselecteditemcolor","title":"navigationSelectedItemColor","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun navigationSelectedItemColor(): Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scope/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationSuiteScope</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scope/#jetpacknavigationsuitescope","title":"JetpackNavigationSuiteScope","text":"<p>class JetpackNavigationSuiteScope</p> <p>Jetpack navigation suite scope for setting item properties.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scope/#parameters","title":"Parameters","text":"<p>androidJvm</p> navigationSuiteScope The navigation suite scope. navigationSuiteItemColors The navigation suite item colors."},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scope/#functions","title":"Functions","text":"Name Summary item [androidJvm]fun item(selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, icon: @Composable() -&gt; Unit, selectedIcon: @Composable() -&gt; Unit = icon, label: @Composable() -&gt; Unit? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scope/item/","title":"Item","text":"<p>//ui/dev.atick.core.ui.components/JetpackNavigationSuiteScope/item</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-navigation-suite-scope/item/#item","title":"item","text":"<p>[androidJvm]\\ fun item(selected: Boolean, onClick: () -&gt; Unit, modifier: Modifier = Modifier, icon: @Composable() -&gt; Unit, selectedIcon: @Composable() -&gt; Unit = icon, label: @Composable() -&gt; Unit? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackTabDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-defaults/#jetpacktabdefaults","title":"JetpackTabDefaults","text":"<p>[androidJvm]\\ object JetpackTabDefaults</p> <p>Jetpack tab default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-defaults/#properties","title":"Properties","text":"Name Summary TabTopPadding [androidJvm]val TabTopPadding: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-defaults/-tab-top-padding/","title":"tab top padding","text":"<p>//ui/dev.atick.core.ui.components/JetpackTabDefaults/TabTopPadding</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tab-defaults/-tab-top-padding/#tabtoppadding","title":"TabTopPadding","text":"<p>[androidJvm]\\ val TabTopPadding: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/","title":"Index","text":"<p>//ui/dev.atick.core.ui.components/JetpackTagDefaults</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/#jetpacktagdefaults","title":"JetpackTagDefaults","text":"<p>[androidJvm]\\ object JetpackTagDefaults</p> <p>Jetpack tag default values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/#properties","title":"Properties","text":"Name Summary DISABLED_TOPIC_TAG_CONTAINER_ALPHA [androidJvm]const val DISABLED_TOPIC_TAG_CONTAINER_ALPHA: Float = 0.12f UNFOLLOWED_TOPIC_TAG_CONTAINER_ALPHA [androidJvm]const val UNFOLLOWED_TOPIC_TAG_CONTAINER_ALPHA: Float = 0.5f"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/-d-i-s-a-b-l-e-d_-t-o-p-i-c_-t-a-g_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/","title":"d i s a b l e d  t o p i c  t a g  c o n t a i n e r  a l p h a","text":"<p>//ui/dev.atick.core.ui.components/JetpackTagDefaults/DISABLED_TOPIC_TAG_CONTAINER_ALPHA</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/-d-i-s-a-b-l-e-d_-t-o-p-i-c_-t-a-g_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/#disabled_topic_tag_container_alpha","title":"DISABLED_TOPIC_TAG_CONTAINER_ALPHA","text":"<p>[androidJvm]\\ const val DISABLED_TOPIC_TAG_CONTAINER_ALPHA: Float = 0.12f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/-u-n-f-o-l-l-o-w-e-d_-t-o-p-i-c_-t-a-g_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/","title":"u n f o l l o w e d  t o p i c  t a g  c o n t a i n e r  a l p h a","text":"<p>//ui/dev.atick.core.ui.components/JetpackTagDefaults/UNFOLLOWED_TOPIC_TAG_CONTAINER_ALPHA</p>"},{"location":"core/ui/ui/dev.atick.core.ui.components/-jetpack-tag-defaults/-u-n-f-o-l-l-o-w-e-d_-t-o-p-i-c_-t-a-g_-c-o-n-t-a-i-n-e-r_-a-l-p-h-a/#unfollowed_topic_tag_container_alpha","title":"UNFOLLOWED_TOPIC_TAG_CONTAINER_ALPHA","text":"<p>[androidJvm]\\ const val UNFOLLOWED_TOPIC_TAG_CONTAINER_ALPHA: Float = 0.5f</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/","title":"Index","text":"<p>//ui/dev.atick.core.ui.extensions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#properties","title":"Properties","text":"Name Summary isSystemInDarkTheme [androidJvm]val Configuration.isSystemInDarkTheme: BooleanConvenience wrapper for dark mode checking"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/#functions","title":"Functions","text":"Name Summary checkForPermissions [androidJvm]inline fun ComponentActivity.checkForPermissions(permissions: List&lt;String&gt;, crossinline onSuccess: () -&gt; Unit)Check for permissions. collectWithLifecycle [androidJvm]inline fun &lt;T&gt; LifecycleOwner.collectWithLifecycle(flow: Flow&lt;T&gt;, crossinline action: (T) -&gt; Unit)Observe a Flow and execute an action when the value is changed. isSystemInDarkTheme [androidJvm]fun ComponentActivity.isSystemInDarkTheme(): Flow&lt;Boolean&gt;Registers listener for configuration changes to retrieve whether system is in dark theme or not. Immediately upon subscribing, it sends the current value and then registers listener for changes. observe [androidJvm]inline fun &lt;T&gt; LifecycleOwner.observe(liveData: LiveData&lt;T&gt;, crossinline action: (T) -&gt; Unit)Observe a LiveData and execute an action when the value is changed. observeEvent [androidJvm]inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: LiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: MutableLiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)Observe a LiveData and execute an action when the value is changed. openPermissionSettings [androidJvm]fun ComponentActivity.openPermissionSettings()Open app settings. permissionLauncher [androidJvm]inline fun ComponentActivity.permissionLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Array&lt;String&gt;&gt;Launch an activity for permission. resultLauncher [androidJvm]inline fun ComponentActivity.resultLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Intent&gt;Launch an activity for result."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/","title":"Check for permissions","text":"<p>//ui/dev.atick.core.ui.extensions/checkForPermissions</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/#checkforpermissions","title":"checkForPermissions","text":"<p>[androidJvm]\\ inline fun ComponentActivity.checkForPermissions(permissions: List&lt;String&gt;, crossinline onSuccess: () -&gt; Unit)</p> <p>Check for permissions.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/check-for-permissions/#parameters","title":"Parameters","text":"<p>androidJvm</p> permissions List of permissions to be checked. onSuccess Callback when the result is successful."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/","title":"Collect with lifecycle","text":"<p>//ui/dev.atick.core.ui.extensions/collectWithLifecycle</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/#collectwithlifecycle","title":"collectWithLifecycle","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.collectWithLifecycle(flow: Flow&lt;T&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a Flow and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/collect-with-lifecycle/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/is-system-in-dark-theme/","title":"Is system in dark theme","text":"<p>//ui/dev.atick.core.ui.extensions/isSystemInDarkTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/is-system-in-dark-theme/#issystemindarktheme","title":"isSystemInDarkTheme","text":"<p>[androidJvm]\\ fun ComponentActivity.isSystemInDarkTheme(): Flow&lt;Boolean&gt;</p> <p>Registers listener for configuration changes to retrieve whether system is in dark theme or not. Immediately upon subscribing, it sends the current value and then registers listener for changes.</p> <p>[androidJvm]\\ val Configuration.isSystemInDarkTheme: Boolean</p> <p>Convenience wrapper for dark mode checking</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/","title":"Observe event","text":"<p>//ui/dev.atick.core.ui.extensions/observeEvent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/#observeevent","title":"observeEvent","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: LiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)</p> <p>inline fun &lt;T&gt; LifecycleOwner.observeEvent(liveData: MutableLiveData&lt;OneTimeEvent&lt;T&gt;&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a LiveData and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe-event/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/","title":"Observe","text":"<p>//ui/dev.atick.core.ui.extensions/observe</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/#observe","title":"observe","text":"<p>[androidJvm]\\ inline fun &lt;T&gt; LifecycleOwner.observe(liveData: LiveData&lt;T&gt;, crossinline action: (T) -&gt; Unit)</p> <p>Observe a LiveData and execute an action when the value is changed.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/observe/#parameters","title":"Parameters","text":"<p>androidJvm</p> action The action to be executed when the value is changed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/open-permission-settings/","title":"Open permission settings","text":"<p>//ui/dev.atick.core.ui.extensions/openPermissionSettings</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/open-permission-settings/#openpermissionsettings","title":"openPermissionSettings","text":"<p>[androidJvm]\\ fun ComponentActivity.openPermissionSettings()</p> <p>Open app settings.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/","title":"Permission launcher","text":"<p>//ui/dev.atick.core.ui.extensions/permissionLauncher</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/#permissionlauncher","title":"permissionLauncher","text":"<p>[androidJvm]\\ inline fun ComponentActivity.permissionLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Array&lt;String&gt;&gt;</p> <p>Launch an activity for permission.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/permission-launcher/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSuccess Callback when the result is successful. onFailure Callback when the result is failed."},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/","title":"Result launcher","text":"<p>//ui/dev.atick.core.ui.extensions/resultLauncher</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/#resultlauncher","title":"resultLauncher","text":"<p>[androidJvm]\\ inline fun ComponentActivity.resultLauncher(crossinline onSuccess: () -&gt; Unit = {}, crossinline onFailure: () -&gt; Unit = {}): ActivityResultLauncher&lt;Intent&gt;</p> <p>Launch an activity for result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.extensions/result-launcher/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSuccess Callback when the result is successful. onFailure Callback when the result is failed."},{"location":"core/ui/ui/dev.atick.core.ui.theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.theme/#types","title":"Types","text":"Name Summary BackgroundTheme [androidJvm]@Immutabledata class BackgroundTheme(val color: Color = Color.Unspecified, val tonalElevation: Dp = Dp.Unspecified)Data class that holds the background theme. GradientColors [androidJvm]@Immutabledata class GradientColors(val top: Color = Color.Unspecified, val bottom: Color = Color.Unspecified, val container: Color = Color.Unspecified)A class to model gradient color values. TintTheme [androidJvm]@Immutabledata class TintTheme(val iconTint: Color? = null)Data class that holds the tint theme."},{"location":"core/ui/ui/dev.atick.core.ui.theme/#properties","title":"Properties","text":"Name Summary DarkDefaultColorScheme [androidJvm]@VisibleForTestingval DarkDefaultColorScheme: ColorSchemeDark default theme color scheme LightDefaultColorScheme [androidJvm]@VisibleForTestingval LightDefaultColorScheme: ColorSchemeLight default theme color scheme LocalBackgroundTheme [androidJvm]val LocalBackgroundTheme: ProvidableCompositionLocal&lt;BackgroundTheme&gt;A composition local for BackgroundTheme. LocalGradientColors [androidJvm]val LocalGradientColors: ProvidableCompositionLocal&lt;GradientColors&gt;A composition local for GradientColors. LocalTintTheme [androidJvm]val LocalTintTheme: ProvidableCompositionLocal&lt;TintTheme&gt;A composition local for TintTheme."},{"location":"core/ui/ui/dev.atick.core.ui.theme/#functions","title":"Functions","text":"Name Summary JetpackTheme [androidJvm]@Composablefun JetpackTheme(darkTheme: Boolean = isSystemInDarkTheme(), disableDynamicTheming: Boolean = false, content: @Composable() -&gt; Unit)Now in Android theme. supportsDynamicTheming [androidJvm]@ChecksSdkIntAtLeast(api = 31)fun supportsDynamicTheming(): BooleanChecks if the current device supports dynamic theming."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-default-color-scheme/","title":"dark default color scheme","text":"<p>//ui/dev.atick.core.ui.theme/DarkDefaultColorScheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-dark-default-color-scheme/#darkdefaultcolorscheme","title":"DarkDefaultColorScheme","text":"<p>[androidJvm]\\</p> <p>@VisibleForTesting</p> <p>val DarkDefaultColorScheme: ColorScheme</p> <p>Dark default theme color scheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/","title":"jetpack theme","text":"<p>//ui/dev.atick.core.ui.theme/JetpackTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/#jetpacktheme","title":"JetpackTheme","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackTheme(darkTheme: Boolean = isSystemInDarkTheme(), disableDynamicTheming: Boolean = false, content: @Composable() -&gt; Unit)</p> <p>Now in Android theme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-jetpack-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkTheme Whether the theme should use a dark color scheme (follows system by default). disableDynamicTheming If <code>true</code>, disables the use of dynamic theming, even when it is     supported. This parameter has no effect if androidTheme is <code>true</code>."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-default-color-scheme/","title":"light default color scheme","text":"<p>//ui/dev.atick.core.ui.theme/LightDefaultColorScheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-light-default-color-scheme/#lightdefaultcolorscheme","title":"LightDefaultColorScheme","text":"<p>[androidJvm]\\</p> <p>@VisibleForTesting</p> <p>val LightDefaultColorScheme: ColorScheme</p> <p>Light default theme color scheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-background-theme/","title":"local background theme","text":"<p>//ui/dev.atick.core.ui.theme/LocalBackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-background-theme/#localbackgroundtheme","title":"LocalBackgroundTheme","text":"<p>[androidJvm]\\ val LocalBackgroundTheme: ProvidableCompositionLocal&lt;BackgroundTheme&gt;</p> <p>A composition local for BackgroundTheme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-gradient-colors/","title":"local gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/LocalGradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-gradient-colors/#localgradientcolors","title":"LocalGradientColors","text":"<p>[androidJvm]\\ val LocalGradientColors: ProvidableCompositionLocal&lt;GradientColors&gt;</p> <p>A composition local for GradientColors.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-tint-theme/","title":"local tint theme","text":"<p>//ui/dev.atick.core.ui.theme/LocalTintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-local-tint-theme/#localtinttheme","title":"LocalTintTheme","text":"<p>[androidJvm]\\ val LocalTintTheme: ProvidableCompositionLocal&lt;TintTheme&gt;</p> <p>A composition local for TintTheme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/supports-dynamic-theming/","title":"Supports dynamic theming","text":"<p>//ui/dev.atick.core.ui.theme/supportsDynamicTheming</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/supports-dynamic-theming/#supportsdynamictheming","title":"supportsDynamicTheming","text":"<p>[androidJvm]\\</p> <p>@ChecksSdkIntAtLeast(api = 31)</p> <p>fun supportsDynamicTheming(): Boolean</p> <p>Checks if the current device supports dynamic theming.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#backgroundtheme","title":"BackgroundTheme","text":"<p>@Immutable</p> <p>data class BackgroundTheme(val color: Color = Color.Unspecified, val tonalElevation: Dp = Dp.Unspecified)</p> <p>Data class that holds the background theme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> color The color of the background. tonalElevation The tonal elevation of the background."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#constructors","title":"Constructors","text":"BackgroundTheme [androidJvm]constructor(color: Color = Color.Unspecified, tonalElevation: Dp = Dp.Unspecified)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/#properties","title":"Properties","text":"Name Summary color [androidJvm]val color: Color tonalElevation [androidJvm]val tonalElevation: Dp"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/","title":"background theme","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/BackgroundTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/#backgroundtheme","title":"BackgroundTheme","text":"<p>[androidJvm]\\ constructor(color: Color = Color.Unspecified, tonalElevation: Dp = Dp.Unspecified)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/-background-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> color The color of the background. tonalElevation The tonal elevation of the background."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/","title":"Color","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/#color","title":"color","text":"<p>[androidJvm]\\ val color: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/color/#parameters","title":"Parameters","text":"<p>androidJvm</p> color The color of the background."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/","title":"Tonal elevation","text":"<p>//ui/dev.atick.core.ui.theme/BackgroundTheme/tonalElevation</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/#tonalelevation","title":"tonalElevation","text":"<p>[androidJvm]\\ val tonalElevation: Dp</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-background-theme/tonal-elevation/#parameters","title":"Parameters","text":"<p>androidJvm</p> tonalElevation The tonal elevation of the background."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#gradientcolors","title":"GradientColors","text":"<p>@Immutable</p> <p>data class GradientColors(val top: Color = Color.Unspecified, val bottom: Color = Color.Unspecified, val container: Color = Color.Unspecified)</p> <p>A class to model gradient color values.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered. bottom The bottom gradient color to be rendered. container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#constructors","title":"Constructors","text":"GradientColors [androidJvm]constructor(top: Color = Color.Unspecified, bottom: Color = Color.Unspecified, container: Color = Color.Unspecified)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/#properties","title":"Properties","text":"Name Summary bottom [androidJvm]val bottom: Color container [androidJvm]val container: Color top [androidJvm]val top: Color"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/","title":"gradient colors","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/GradientColors</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/#gradientcolors","title":"GradientColors","text":"<p>[androidJvm]\\ constructor(top: Color = Color.Unspecified, bottom: Color = Color.Unspecified, container: Color = Color.Unspecified)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/-gradient-colors/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered. bottom The bottom gradient color to be rendered. container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/","title":"Bottom","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/bottom</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/#bottom","title":"bottom","text":"<p>[androidJvm]\\ val bottom: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/bottom/#parameters","title":"Parameters","text":"<p>androidJvm</p> bottom The bottom gradient color to be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/","title":"Container","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/container</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/#container","title":"container","text":"<p>[androidJvm]\\ val container: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/container/#parameters","title":"Parameters","text":"<p>androidJvm</p> container The container gradient color over which the gradient will be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/","title":"Top","text":"<p>//ui/dev.atick.core.ui.theme/GradientColors/top</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/#top","title":"top","text":"<p>[androidJvm]\\ val top: Color</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-gradient-colors/top/#parameters","title":"Parameters","text":"<p>androidJvm</p> top The top gradient color to be rendered."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/","title":"Index","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#tinttheme","title":"TintTheme","text":"<p>@Immutable</p> <p>data class TintTheme(val iconTint: Color? = null)</p> <p>Data class that holds the tint theme.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> iconTint The color of the icon tint."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#constructors","title":"Constructors","text":"TintTheme [androidJvm]constructor(iconTint: Color? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/#properties","title":"Properties","text":"Name Summary iconTint [androidJvm]val iconTint: Color? = null"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/","title":"tint theme","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme/TintTheme</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/#tinttheme","title":"TintTheme","text":"<p>[androidJvm]\\ constructor(iconTint: Color? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/-tint-theme/#parameters","title":"Parameters","text":"<p>androidJvm</p> iconTint The color of the icon tint."},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/","title":"Icon tint","text":"<p>//ui/dev.atick.core.ui.theme/TintTheme/iconTint</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/#icontint","title":"iconTint","text":"<p>[androidJvm]\\ val iconTint: Color? = null</p>"},{"location":"core/ui/ui/dev.atick.core.ui.theme/-tint-theme/icon-tint/#parameters","title":"Parameters","text":"<p>androidJvm</p> iconTint The color of the icon tint."},{"location":"core/ui/ui/dev.atick.core.ui.utils/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"core/ui/ui/dev.atick.core.ui.utils/#types","title":"Types","text":"Name Summary PreviewDevices [androidJvm]@Preview(name = \"phone\", device = \"spec:width=360dp,height=640dp,dpi=480\")@Preview(name = \"landscape\", device = \"spec:width=640dp,height=360dp,dpi=480\")@Preview(name = \"foldable\", device = \"spec:width=673dp,height=841dp,dpi=480\")@Preview(name = \"tablet\", device = \"spec:width=1280dp,height=800dp,dpi=480\")annotation class PreviewDevicesMultipreview annotation that represents various device sizes. Add this annotation to a composable to render various devices. PreviewThemes [androidJvm]@Preview(uiMode = 16, name = \"Light theme\")@Preview(uiMode = 32, name = \"Dark theme\")annotation class PreviewThemesMulti-preview annotation that represents light and dark themes. Add this annotation to a composable to render the both themes. SnackbarAction [androidJvm]enum SnackbarAction : Enum&lt;SnackbarAction&gt; Enum class representing different actions that can be taken on a Snackbar. TakePictureActivityContract [androidJvm]class TakePictureActivityContract : ActivityResultContract&lt;Uri, Pair&lt;Boolean, Uri&gt;&gt; Contract for taking picture. TextFiledData [androidJvm]data class TextFiledData(val value: String, val errorMessage: String? = null)Data class representing the state of a text field. UiState [androidJvm]data class UiState&lt;T : Any&gt;(val data: T, val loading: Boolean = false, val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))Data class representing the state of the UI. UiText [androidJvm]sealed class UiTextA sealed class that represents a string that can be either a string resource or a dynamic string."},{"location":"core/ui/ui/dev.atick.core.ui.utils/#functions","title":"Functions","text":"Name Summary StatefulComposable [androidJvm]@Composablefun &lt;T : Any&gt; StatefulComposable(state: UiState&lt;T&gt;, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, content: @Composable(T) -&gt; Unit)A composable function that represents a stateful UI component. updateState [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateState(update: T.() -&gt; T)Extension function to update the state of a MutableStateFlow. updateStateWith [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateStateWith(scope: CoroutineScope, crossinline operation: suspend T.() -&gt; Result&lt;T&gt;)Extension function to update the state of a MutableStateFlow with a suspend operation. updateWith [androidJvm]inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateWith(scope: CoroutineScope, crossinline operation: suspend T.() -&gt; Result&lt;Unit&gt;)Extension function to update the state of a MutableStateFlow with a suspend operation that returns Unit."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/","title":"stateful composable","text":"<p>//ui/dev.atick.core.ui.utils/StatefulComposable</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/#statefulcomposable","title":"StatefulComposable","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun &lt;T : Any&gt; StatefulComposable(state: UiState&lt;T&gt;, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, content: @Composable(T) -&gt; Unit)</p> <p>A composable function that represents a stateful UI component.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-stateful-composable/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. state The current state of the UI. onShowSnackbar A suspend function to show a snackbar with a message and an action. content A composable function that defines the UI content based on the state data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/","title":"Update state with","text":"<p>//ui/dev.atick.core.ui.utils/updateStateWith</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/#updatestatewith","title":"updateStateWith","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateStateWith(scope: CoroutineScope, crossinline operation: suspend T.() -&gt; Result&lt;T&gt;)</p> <p>Extension function to update the state of a MutableStateFlow with a suspend operation.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state-with/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. scope The CoroutineScope to launch the operation. operation A suspend function that returns a Result of the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/","title":"Update state","text":"<p>//ui/dev.atick.core.ui.utils/updateState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/#updatestate","title":"updateState","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateState(update: T.() -&gt; T)</p> <p>Extension function to update the state of a MutableStateFlow.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. update A function to update the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/","title":"Update with","text":"<p>//ui/dev.atick.core.ui.utils/updateWith</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/#updatewith","title":"updateWith","text":"<p>[androidJvm]\\ inline fun &lt;T : Any&gt; MutableStateFlow&lt;UiState&lt;T&gt;&gt;.updateWith(scope: CoroutineScope, crossinline operation: suspend T.() -&gt; Result&lt;Unit&gt;)</p> <p>Extension function to update the state of a MutableStateFlow with a suspend operation that returns Unit.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/update-with/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data. scope The CoroutineScope to launch the operation. operation A suspend function that returns a Result of Unit."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-preview-devices/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/PreviewDevices</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-preview-devices/#previewdevices","title":"PreviewDevices","text":"<p>[androidJvm]\\ @Preview(name = \"phone\", device = \"spec:width=360dp,height=640dp,dpi=480\")</p> <p>@Preview(name = \"landscape\", device = \"spec:width=640dp,height=360dp,dpi=480\")</p> <p>@Preview(name = \"foldable\", device = \"spec:width=673dp,height=841dp,dpi=480\")</p> <p>@Preview(name = \"tablet\", device = \"spec:width=1280dp,height=800dp,dpi=480\")</p> <p>annotation class PreviewDevices</p> <p>Multipreview annotation that represents various device sizes. Add this annotation to a composable to render various devices.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-preview-themes/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/PreviewThemes</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-preview-themes/#previewthemes","title":"PreviewThemes","text":"<p>[androidJvm]\\ @Preview(uiMode = 16, name = \"Light theme\")</p> <p>@Preview(uiMode = 32, name = \"Dark theme\")</p> <p>annotation class PreviewThemes</p> <p>Multi-preview annotation that represents light and dark themes. Add this annotation to a composable to render the both themes.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/#snackbaraction","title":"SnackbarAction","text":"<p>enum SnackbarAction : Enum&lt;SnackbarAction&gt; </p> <p>Enum class representing different actions that can be taken on a Snackbar.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/#parameters","title":"Parameters","text":"<p>androidJvm</p> actionText The text to display for the action."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/#entries","title":"Entries","text":"NONE [androidJvm]NONENo action. REPORT [androidJvm]REPORTReport action. UNDO [androidJvm]UNDOUndo action."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/#properties","title":"Properties","text":"Name Summary actionText [androidJvm]val actionText: Int entries [androidJvm]val entries: EnumEntries&lt;SnackbarAction&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/#functions","title":"Functions","text":"Name Summary valueOf [androidJvm]fun valueOf(value: String): SnackbarActionReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;SnackbarAction&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/action-text/","title":"Action text","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/actionText</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/action-text/#actiontext","title":"actionText","text":"<p>[androidJvm]\\ val actionText: Int</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/action-text/#parameters","title":"Parameters","text":"<p>androidJvm</p> actionText The text to display for the action."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/entries/","title":"Entries","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/entries</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;SnackbarAction&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/value-of/","title":"Value of","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/valueOf</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): SnackbarAction</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/values/","title":"Values","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/values</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;SnackbarAction&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-n-o-n-e/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/NONE</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-n-o-n-e/#none","title":"NONE","text":"<p>[androidJvm]\\ NONE</p> <p>No action.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-n-o-n-e/#properties","title":"Properties","text":"Name Summary actionText [androidJvm]val actionText: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-r-e-p-o-r-t/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/REPORT</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-r-e-p-o-r-t/#report","title":"REPORT","text":"<p>[androidJvm]\\ REPORT</p> <p>Report action.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-r-e-p-o-r-t/#properties","title":"Properties","text":"Name Summary actionText [androidJvm]val actionText: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-u-n-d-o/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/SnackbarAction/UNDO</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-u-n-d-o/#undo","title":"UNDO","text":"<p>[androidJvm]\\ UNDO</p> <p>Undo action.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-snackbar-action/-u-n-d-o/#properties","title":"Properties","text":"Name Summary actionText [androidJvm]val actionText: Int name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#takepictureactivitycontract","title":"TakePictureActivityContract","text":"<p>[androidJvm]\\ class TakePictureActivityContract : ActivityResultContract&lt;Uri, Pair&lt;Boolean, Uri&gt;&gt; </p> <p>Contract for taking picture.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#constructors","title":"Constructors","text":"TakePictureActivityContract [androidJvm]constructor()"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/#functions","title":"Functions","text":"Name Summary createIntent [androidJvm]@CallSuperopen override fun createIntent(context: Context, input: Uri): IntentCreate an intent for taking picture. getSynchronousResult [androidJvm]open override fun getSynchronousResult(context: Context, input: Uri): ActivityResultContract.SynchronousResult&lt;Pair&lt;Boolean, Uri&gt;&gt;?Get the synchronous result. parseResult [androidJvm]open override fun parseResult(resultCode: Int, intent: Intent?): Pair&lt;Boolean, Uri&gt;Parse the result."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/-take-picture-activity-contract/","title":"take picture activity contract","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/TakePictureActivityContract</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/-take-picture-activity-contract/#takepictureactivitycontract","title":"TakePictureActivityContract","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/","title":"Create intent","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/createIntent</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#createintent","title":"createIntent","text":"<p>[androidJvm]\\</p> <p>@CallSuper</p> <p>open override fun createIntent(context: Context, input: Uri): Intent</p> <p>Create an intent for taking picture.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#return","title":"Return","text":"<p>The intent.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/create-intent/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The context. input The input."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/","title":"Get synchronous result","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/getSynchronousResult</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#getsynchronousresult","title":"getSynchronousResult","text":"<p>[androidJvm]\\ open override fun getSynchronousResult(context: Context, input: Uri): ActivityResultContract.SynchronousResult&lt;Pair&lt;Boolean, Uri&gt;&gt;?</p> <p>Get the synchronous result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#return","title":"Return","text":"<p>The synchronous result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/get-synchronous-result/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The context. input The input."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/","title":"Parse result","text":"<p>//ui/dev.atick.core.ui.utils/TakePictureActivityContract/parseResult</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#parseresult","title":"parseResult","text":"<p>[androidJvm]\\ open override fun parseResult(resultCode: Int, intent: Intent?): Pair&lt;Boolean, Uri&gt;</p> <p>Parse the result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#return","title":"Return","text":"<p>The result.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-take-picture-activity-contract/parse-result/#parameters","title":"Parameters","text":"<p>androidJvm</p> resultCode The result code. intent The intent."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/#textfileddata","title":"TextFiledData","text":"<p>[androidJvm]\\ data class TextFiledData(val value: String, val errorMessage: String? = null)</p> <p>Data class representing the state of a text field.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/#constructors","title":"Constructors","text":"TextFiledData [androidJvm]constructor(value: String, errorMessage: String? = null)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/#properties","title":"Properties","text":"Name Summary errorMessage [androidJvm]val errorMessage: String? = nullAn optional error message associated with the text field. value [androidJvm]val value: StringThe current value of the text field."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/-text-filed-data/","title":"text filed data","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData/TextFiledData</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/-text-filed-data/#textfileddata","title":"TextFiledData","text":"<p>[androidJvm]\\ constructor(value: String, errorMessage: String? = null)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/error-message/","title":"Error message","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData/errorMessage</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/error-message/#errormessage","title":"errorMessage","text":"<p>[androidJvm]\\ val errorMessage: String? = null</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/value/","title":"Value","text":"<p>//ui/dev.atick.core.ui.utils/TextFiledData/value</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-text-filed-data/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: String</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#uistate","title":"UiState","text":"<p>data class UiState&lt;T : Any&gt;(val data: T, val loading: Boolean = false, val error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))</p> <p>Data class representing the state of the UI.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#constructors","title":"Constructors","text":"UiState [androidJvm]constructor(data: T, loading: Boolean = false, error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/#properties","title":"Properties","text":"Name Summary data [androidJvm]val data: TThe current data of the UI. error [androidJvm]val error: OneTimeEvent&lt;Throwable?&gt;An event representing an error that may have occurred. loading [androidJvm]val loading: Boolean = falseA flag indicating whether the UI is in a loading state."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/","title":"ui state","text":"<p>//ui/dev.atick.core.ui.utils/UiState/UiState</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/#uistate","title":"UiState","text":"<p>[androidJvm]\\ constructor(data: T, loading: Boolean = false, error: OneTimeEvent&lt;Throwable?&gt; = OneTimeEvent(null))</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/-ui-state/#parameters","title":"Parameters","text":"<p>androidJvm</p> T The type of the data."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/data/","title":"Data","text":"<p>//ui/dev.atick.core.ui.utils/UiState/data</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/data/#data","title":"data","text":"<p>[androidJvm]\\ val data: T</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/error/","title":"Error","text":"<p>//ui/dev.atick.core.ui.utils/UiState/error</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/error/#error","title":"error","text":"<p>[androidJvm]\\ val error: OneTimeEvent&lt;Throwable?&gt;</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/loading/","title":"Loading","text":"<p>//ui/dev.atick.core.ui.utils/UiState/loading</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-state/loading/#loading","title":"loading","text":"<p>[androidJvm]\\ val loading: Boolean = false</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#uitext","title":"UiText","text":"<p>sealed class UiText</p> <p>A sealed class that represents a string that can be either a string resource or a dynamic string.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#inheritors","title":"Inheritors","text":"DynamicString StringResource"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#types","title":"Types","text":"Name Summary DynamicString [androidJvm]data class DynamicString(val value: String) : UiTextA dynamic string that can be used to represent a string that is not known at compile time. StringResource [androidJvm]class StringResource(@StringResval resId: Int, val args: Any) : UiTextA string resource that can be used to represent a string that is known at compile time."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/as-string/","title":"As string","text":"<p>//ui/dev.atick.core.ui.utils/UiText/asString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/as-string/#asstring","title":"asString","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun asString(): String</p> <p>fun asString(context: Context): String</p> <p>Returns the string value of this UiText.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#dynamicstring","title":"DynamicString","text":"<p>data class DynamicString(val value: String) : UiText</p> <p>A dynamic string that can be used to represent a string that is not known at compile time.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#constructors","title":"Constructors","text":"DynamicString [androidJvm]constructor(value: String)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#properties","title":"Properties","text":"Name Summary value [androidJvm]val value: String"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/","title":"dynamic string","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString/DynamicString</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/#dynamicstring","title":"DynamicString","text":"<p>[androidJvm]\\ constructor(value: String)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/-dynamic-string/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/","title":"Value","text":"<p>//ui/dev.atick.core.ui.utils/UiText/DynamicString/value</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/#value","title":"value","text":"<p>[androidJvm]\\ val value: String</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-dynamic-string/value/#parameters","title":"Parameters","text":"<p>androidJvm</p> value The string value."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/","title":"Index","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#stringresource","title":"StringResource","text":"<p>class StringResource(@StringResval resId: Int, val args: Any) : UiText</p> <p>A string resource that can be used to represent a string that is known at compile time.</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id. args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#constructors","title":"Constructors","text":"StringResource [androidJvm]constructor(@StringResresId: Int, vararg args: Any)"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#properties","title":"Properties","text":"Name Summary args [androidJvm]val args: Array&lt;out Any&gt; resId [androidJvm]val resId: Int"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/#functions","title":"Functions","text":"Name Summary asString [androidJvm]@Composablefun asString(): Stringfun asString(context: Context): StringReturns the string value of this UiText."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/","title":"string resource","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/StringResource</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/#stringresource","title":"StringResource","text":"<p>[androidJvm]\\ constructor(@StringResresId: Int, vararg args: Any)</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/-string-resource/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id. args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/","title":"Args","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/args</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/#args","title":"args","text":"<p>[androidJvm]\\ val args: Array&lt;out Any&gt;</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/args/#parameters","title":"Parameters","text":"<p>androidJvm</p> args The string resource arguments."},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/","title":"Res id","text":"<p>//ui/dev.atick.core.ui.utils/UiText/StringResource/resId</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/#resid","title":"resId","text":"<p>[androidJvm]\\ val resId: Int</p>"},{"location":"core/ui/ui/dev.atick.core.ui.utils/-ui-text/-string-resource/res-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> resId The string resource id."},{"location":"data/","title":"Index","text":"<p>//data</p>"},{"location":"data/#data","title":"data","text":""},{"location":"data/#packages","title":"Packages","text":"Name dev.atick.data.di dev.atick.data.models dev.atick.data.models.home dev.atick.data.models.settings dev.atick.data.repository.auth dev.atick.data.repository.home dev.atick.data.repository.profile dev.atick.data.repository.settings dev.atick.data.utils"},{"location":"data/data/dev.atick.data.di/","title":"Index","text":"<p>//data/dev.atick.data.di</p>"},{"location":"data/data/dev.atick.data.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.di/#types","title":"Types","text":"Name Summary RepositoryModule [androidJvm]@Moduleabstract class RepositoryModuleDagger module for providing repository implementations."},{"location":"data/data/dev.atick.data.di/-repository-module/","title":"Index","text":"<p>//data/dev.atick.data.di/RepositoryModule</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class RepositoryModule</p> <p>Dagger module for providing repository implementations.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/#constructors","title":"Constructors","text":"RepositoryModule [androidJvm]constructor()"},{"location":"data/data/dev.atick.data.di/-repository-module/#functions","title":"Functions","text":"Name Summary bindAuthRepository [androidJvm]@Binds@Singletonabstract fun bindAuthRepository(authRepositoryImpl: AuthRepositoryImpl): AuthRepositoryBinds the implementation of AuthRepository to AuthRepositoryImpl. bindHomeRepository [androidJvm]@Binds@Singletonabstract fun bindHomeRepository(homeRepositoryImpl: HomeRepositoryImpl): HomeRepositoryBinds the implementation of HomeRepository to HomeRepositoryImpl. bindSettingsRepository [androidJvm]@Binds@Singletonabstract fun bindSettingsRepository(settingsRepositoryImpl: SettingsRepositoryImpl): SettingsRepositoryBinds the implementation of SettingsRepository to SettingsRepositoryImpl. binProfileRepository [androidJvm]@Binds@Singletonabstract fun binProfileRepository(profileRepositoryImpl: ProfileRepositoryImpl): ProfileRepositoryBinds the implementation of ProfileRepository to ProfileRepositoryImpl."},{"location":"data/data/dev.atick.data.di/-repository-module/-repository-module/","title":"repository module","text":"<p>//data/dev.atick.data.di/RepositoryModule/RepositoryModule</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/-repository-module/#repositorymodule","title":"RepositoryModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bin-profile-repository/","title":"Bin profile repository","text":"<p>//data/dev.atick.data.di/RepositoryModule/binProfileRepository</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bin-profile-repository/#binprofilerepository","title":"binProfileRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun binProfileRepository(profileRepositoryImpl: ProfileRepositoryImpl): ProfileRepository</p> <p>Binds the implementation of ProfileRepository to ProfileRepositoryImpl.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bin-profile-repository/#return","title":"Return","text":"<p>The bound ProfileRepository instance.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bin-profile-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> profileRepositoryImpl The implementation of ProfileRepository."},{"location":"data/data/dev.atick.data.di/-repository-module/bind-auth-repository/","title":"Bind auth repository","text":"<p>//data/dev.atick.data.di/RepositoryModule/bindAuthRepository</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-auth-repository/#bindauthrepository","title":"bindAuthRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindAuthRepository(authRepositoryImpl: AuthRepositoryImpl): AuthRepository</p> <p>Binds the implementation of AuthRepository to AuthRepositoryImpl.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-auth-repository/#return","title":"Return","text":"<p>The bound AuthRepository instance.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-auth-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> authRepositoryImpl The implementation of AuthRepository."},{"location":"data/data/dev.atick.data.di/-repository-module/bind-home-repository/","title":"Bind home repository","text":"<p>//data/dev.atick.data.di/RepositoryModule/bindHomeRepository</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-home-repository/#bindhomerepository","title":"bindHomeRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindHomeRepository(homeRepositoryImpl: HomeRepositoryImpl): HomeRepository</p> <p>Binds the implementation of HomeRepository to HomeRepositoryImpl.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-home-repository/#return","title":"Return","text":"<p>The bound HomeRepository instance.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-home-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepositoryImpl The implementation of HomeRepository."},{"location":"data/data/dev.atick.data.di/-repository-module/bind-settings-repository/","title":"Bind settings repository","text":"<p>//data/dev.atick.data.di/RepositoryModule/bindSettingsRepository</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-settings-repository/#bindsettingsrepository","title":"bindSettingsRepository","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindSettingsRepository(settingsRepositoryImpl: SettingsRepositoryImpl): SettingsRepository</p> <p>Binds the implementation of SettingsRepository to SettingsRepositoryImpl.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-settings-repository/#return","title":"Return","text":"<p>The bound SettingsRepository instance.</p>"},{"location":"data/data/dev.atick.data.di/-repository-module/bind-settings-repository/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepositoryImpl The implementation of SettingsRepository."},{"location":"data/data/dev.atick.data.models/","title":"Index","text":"<p>//data/dev.atick.data.models</p>"},{"location":"data/data/dev.atick.data.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.models/#types","title":"Types","text":"Name Summary Profile [androidJvm]data class Profile(val userName: String = String(), val profilePictureUri: String? = null)Data class representing a user profile."},{"location":"data/data/dev.atick.data.models/#functions","title":"Functions","text":"Name Summary toPreferencesUserProfile [androidJvm]fun Profile.toPreferencesUserProfile(): PreferencesUserProfileExtension function to convert Profile to PreferencesUserProfile. toProfile [androidJvm]fun UserDataPreferences.toProfile(): ProfileExtension function to convert UserDataPreferences to Profile."},{"location":"data/data/dev.atick.data.models/to-preferences-user-profile/","title":"To preferences user profile","text":"<p>//data/dev.atick.data.models/toPreferencesUserProfile</p>"},{"location":"data/data/dev.atick.data.models/to-preferences-user-profile/#topreferencesuserprofile","title":"toPreferencesUserProfile","text":"<p>[androidJvm]\\ fun Profile.toPreferencesUserProfile(): PreferencesUserProfile</p> <p>Extension function to convert Profile to PreferencesUserProfile.</p>"},{"location":"data/data/dev.atick.data.models/to-preferences-user-profile/#return","title":"Return","text":"<p>A PreferencesUserProfile object with data from Profile.</p>"},{"location":"data/data/dev.atick.data.models/to-profile/","title":"To profile","text":"<p>//data/dev.atick.data.models/toProfile</p>"},{"location":"data/data/dev.atick.data.models/to-profile/#toprofile","title":"toProfile","text":"<p>[androidJvm]\\ fun UserDataPreferences.toProfile(): Profile</p> <p>Extension function to convert UserDataPreferences to Profile.</p>"},{"location":"data/data/dev.atick.data.models/to-profile/#return","title":"Return","text":"<p>A Profile object with data from UserDataPreferences.</p>"},{"location":"data/data/dev.atick.data.models/-profile/","title":"Index","text":"<p>//data/dev.atick.data.models/Profile</p>"},{"location":"data/data/dev.atick.data.models/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ data class Profile(val userName: String = String(), val profilePictureUri: String? = null)</p> <p>Data class representing a user profile.</p>"},{"location":"data/data/dev.atick.data.models/-profile/#constructors","title":"Constructors","text":"Profile [androidJvm]constructor(userName: String = String(), profilePictureUri: String? = null)"},{"location":"data/data/dev.atick.data.models/-profile/#properties","title":"Properties","text":"Name Summary profilePictureUri [androidJvm]val profilePictureUri: String? = nullThe URI of the user's profile picture. userName [androidJvm]val userName: StringThe name of the user."},{"location":"data/data/dev.atick.data.models/-profile/#functions","title":"Functions","text":"Name Summary toPreferencesUserProfile [androidJvm]fun Profile.toPreferencesUserProfile(): PreferencesUserProfileExtension function to convert Profile to PreferencesUserProfile."},{"location":"data/data/dev.atick.data.models/-profile/-profile/","title":"profile","text":"<p>//data/dev.atick.data.models/Profile/Profile</p>"},{"location":"data/data/dev.atick.data.models/-profile/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ constructor(userName: String = String(), profilePictureUri: String? = null)</p>"},{"location":"data/data/dev.atick.data.models/-profile/profile-picture-uri/","title":"Profile picture uri","text":"<p>//data/dev.atick.data.models/Profile/profilePictureUri</p>"},{"location":"data/data/dev.atick.data.models/-profile/profile-picture-uri/#profilepictureuri","title":"profilePictureUri","text":"<p>[androidJvm]\\ val profilePictureUri: String? = null</p>"},{"location":"data/data/dev.atick.data.models/-profile/user-name/","title":"User name","text":"<p>//data/dev.atick.data.models/Profile/userName</p>"},{"location":"data/data/dev.atick.data.models/-profile/user-name/#username","title":"userName","text":"<p>[androidJvm]\\ val userName: String</p>"},{"location":"data/data/dev.atick.data.models.home/","title":"Index","text":"<p>//data/dev.atick.data.models.home</p>"},{"location":"data/data/dev.atick.data.models.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.models.home/#types","title":"Types","text":"Name Summary Jetpack [androidJvm]data class Jetpack(val id: String = UUID.randomUUID().toString(), val name: String = String(), val price: Double = 0.0, val lastUpdated: Long = System.currentTimeMillis(), val lastSynced: Long = 0, val needsSync: Boolean = true, val formattedDate: String = lastUpdated.asFormattedDateTime())Data class representing a Jetpack."},{"location":"data/data/dev.atick.data.models.home/#functions","title":"Functions","text":"Name Summary mapToJetpacks [androidJvm]fun List&lt;JetpackEntity&gt;.mapToJetpacks(): List&lt;Jetpack&gt;Extension function to map a list of JetpackEntity to a list of Jetpack. toFirebaseJetpack [androidJvm]fun JetpackEntity.toFirebaseJetpack(): FirebaseJetpackExtension function to map a JetpackEntity to a FirebaseJetpack.[androidJvm]fun Jetpack.toFirebaseJetpack(): FirebaseJetpackExtension function to map a Jetpack to a FirebaseJetpack. toJetpack [androidJvm]fun JetpackEntity.toJetpack(): JetpackExtension function to map a JetpackEntity to a Jetpack. toJetpackEntity [androidJvm]fun Jetpack.toJetpackEntity(): JetpackEntityExtension function to map a Jetpack to a JetpackEntity.[androidJvm]fun FirebaseJetpack.toJetpackEntity(): JetpackEntityExtension function to map a FirebaseJetpack to a JetpackEntity."},{"location":"data/data/dev.atick.data.models.home/map-to-jetpacks/","title":"Map to jetpacks","text":"<p>//data/dev.atick.data.models.home/mapToJetpacks</p>"},{"location":"data/data/dev.atick.data.models.home/map-to-jetpacks/#maptojetpacks","title":"mapToJetpacks","text":"<p>[androidJvm]\\ fun List&lt;JetpackEntity&gt;.mapToJetpacks(): List&lt;Jetpack&gt;</p> <p>Extension function to map a list of JetpackEntity to a list of Jetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/map-to-jetpacks/#return","title":"Return","text":"<p>The mapped list of Jetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/to-firebase-jetpack/","title":"To firebase jetpack","text":"<p>//data/dev.atick.data.models.home/toFirebaseJetpack</p>"},{"location":"data/data/dev.atick.data.models.home/to-firebase-jetpack/#tofirebasejetpack","title":"toFirebaseJetpack","text":"<p>[androidJvm]\\ fun Jetpack.toFirebaseJetpack(): FirebaseJetpack</p> <p>Extension function to map a Jetpack to a FirebaseJetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/to-firebase-jetpack/#return","title":"Return","text":"<p>The mapped FirebaseJetpack.</p> <p>[androidJvm]\\ fun JetpackEntity.toFirebaseJetpack(): FirebaseJetpack</p> <p>Extension function to map a JetpackEntity to a FirebaseJetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/to-firebase-jetpack/#return_1","title":"Return","text":"<p>The mapped FirebaseJetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack-entity/","title":"To jetpack entity","text":"<p>//data/dev.atick.data.models.home/toJetpackEntity</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack-entity/#tojetpackentity","title":"toJetpackEntity","text":"<p>[androidJvm]\\ fun Jetpack.toJetpackEntity(): JetpackEntity</p> <p>Extension function to map a Jetpack to a JetpackEntity.</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack-entity/#return","title":"Return","text":"<p>The mapped JetpackEntity.</p> <p>[androidJvm]\\ fun FirebaseJetpack.toJetpackEntity(): JetpackEntity</p> <p>Extension function to map a FirebaseJetpack to a JetpackEntity.</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack-entity/#return_1","title":"Return","text":"<p>The mapped JetpackEntity.</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack/","title":"To jetpack","text":"<p>//data/dev.atick.data.models.home/toJetpack</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack/#tojetpack","title":"toJetpack","text":"<p>[androidJvm]\\ fun JetpackEntity.toJetpack(): Jetpack</p> <p>Extension function to map a JetpackEntity to a Jetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/to-jetpack/#return","title":"Return","text":"<p>The mapped Jetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/","title":"Index","text":"<p>//data/dev.atick.data.models.home/Jetpack</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/#jetpack","title":"Jetpack","text":"<p>data class Jetpack(val id: String = UUID.randomUUID().toString(), val name: String = String(), val price: Double = 0.0, val lastUpdated: Long = System.currentTimeMillis(), val lastSynced: Long = 0, val needsSync: Boolean = true, val formattedDate: String = lastUpdated.asFormattedDateTime())</p> <p>Data class representing a Jetpack.</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the Jetpack. name The name of the Jetpack. price The price of the Jetpack. lastUpdated The last updated timestamp of the Jetpack. lastSynced The last synced timestamp of the Jetpack. needsSync The sync status of the Jetpack. formattedDate The formatted date of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/#constructors","title":"Constructors","text":"Jetpack [androidJvm]constructor(id: String = UUID.randomUUID().toString(), name: String = String(), price: Double = 0.0, lastUpdated: Long = System.currentTimeMillis(), lastSynced: Long = 0, needsSync: Boolean = true, formattedDate: String = lastUpdated.asFormattedDateTime())"},{"location":"data/data/dev.atick.data.models.home/-jetpack/#properties","title":"Properties","text":"Name Summary formattedDate [androidJvm]val formattedDate: String id [androidJvm]val id: String lastSynced [androidJvm]val lastSynced: Long = 0 lastUpdated [androidJvm]val lastUpdated: Long name [androidJvm]val name: String needsSync [androidJvm]val needsSync: Boolean = true price [androidJvm]val price: Double = 0.0"},{"location":"data/data/dev.atick.data.models.home/-jetpack/#functions","title":"Functions","text":"Name Summary toFirebaseJetpack [androidJvm]fun Jetpack.toFirebaseJetpack(): FirebaseJetpackExtension function to map a Jetpack to a FirebaseJetpack. toJetpackEntity [androidJvm]fun Jetpack.toJetpackEntity(): JetpackEntityExtension function to map a Jetpack to a JetpackEntity."},{"location":"data/data/dev.atick.data.models.home/-jetpack/-jetpack/","title":"jetpack","text":"<p>//data/dev.atick.data.models.home/Jetpack/Jetpack</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/-jetpack/#jetpack","title":"Jetpack","text":"<p>[androidJvm]\\ constructor(id: String = UUID.randomUUID().toString(), name: String = String(), price: Double = 0.0, lastUpdated: Long = System.currentTimeMillis(), lastSynced: Long = 0, needsSync: Boolean = true, formattedDate: String = lastUpdated.asFormattedDateTime())</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the Jetpack. name The name of the Jetpack. price The price of the Jetpack. lastUpdated The last updated timestamp of the Jetpack. lastSynced The last synced timestamp of the Jetpack. needsSync The sync status of the Jetpack. formattedDate The formatted date of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/formatted-date/","title":"Formatted date","text":"<p>//data/dev.atick.data.models.home/Jetpack/formattedDate</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/formatted-date/#formatteddate","title":"formattedDate","text":"<p>[androidJvm]\\ val formattedDate: String</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/formatted-date/#parameters","title":"Parameters","text":"<p>androidJvm</p> formattedDate The formatted date of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/id/","title":"Id","text":"<p>//data/dev.atick.data.models.home/Jetpack/id</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/id/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/last-synced/","title":"Last synced","text":"<p>//data/dev.atick.data.models.home/Jetpack/lastSynced</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/last-synced/#lastsynced","title":"lastSynced","text":"<p>[androidJvm]\\ val lastSynced: Long = 0</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/last-synced/#parameters","title":"Parameters","text":"<p>androidJvm</p> lastSynced The last synced timestamp of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/last-updated/","title":"Last updated","text":"<p>//data/dev.atick.data.models.home/Jetpack/lastUpdated</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/last-updated/#lastupdated","title":"lastUpdated","text":"<p>[androidJvm]\\ val lastUpdated: Long</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/last-updated/#parameters","title":"Parameters","text":"<p>androidJvm</p> lastUpdated The last updated timestamp of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/name/","title":"Name","text":"<p>//data/dev.atick.data.models.home/Jetpack/name</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/name/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The name of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/needs-sync/","title":"Needs sync","text":"<p>//data/dev.atick.data.models.home/Jetpack/needsSync</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/needs-sync/#needssync","title":"needsSync","text":"<p>[androidJvm]\\ val needsSync: Boolean = true</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/needs-sync/#parameters","title":"Parameters","text":"<p>androidJvm</p> needsSync The sync status of the Jetpack."},{"location":"data/data/dev.atick.data.models.home/-jetpack/price/","title":"Price","text":"<p>//data/dev.atick.data.models.home/Jetpack/price</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/price/#price","title":"price","text":"<p>[androidJvm]\\ val price: Double = 0.0</p>"},{"location":"data/data/dev.atick.data.models.home/-jetpack/price/#parameters","title":"Parameters","text":"<p>androidJvm</p> price The price of the Jetpack."},{"location":"data/data/dev.atick.data.models.settings/","title":"Index","text":"<p>//data/dev.atick.data.models.settings</p>"},{"location":"data/data/dev.atick.data.models.settings/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.models.settings/#types","title":"Types","text":"Name Summary DarkThemeConfig [androidJvm]enum DarkThemeConfig : Enum&lt;DarkThemeConfig&gt; Enum class representing configuration options for the dark theme. Settings [androidJvm]data class Settings(val userName: String? = null, val useDynamicColor: Boolean = true, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)Data class representing editable user settings related to themes and appearance."},{"location":"data/data/dev.atick.data.models.settings/#functions","title":"Functions","text":"Name Summary asDarkThemeConfig [androidJvm]fun DarkThemeConfigPreferences.asDarkThemeConfig(): DarkThemeConfigExtension function to map DarkThemeConfigPreferences to DarkThemeConfig. asDarkThemeConfigPreferences [androidJvm]fun DarkThemeConfig.asDarkThemeConfigPreferences(): DarkThemeConfigPreferencesExtension function to map DarkThemeConfig to DarkThemeConfigPreferences. asSettings [androidJvm]fun UserDataPreferences.asSettings(): SettingsExtension function to map UserDataPreferences to Settings."},{"location":"data/data/dev.atick.data.models.settings/as-dark-theme-config-preferences/","title":"As dark theme config preferences","text":"<p>//data/dev.atick.data.models.settings/asDarkThemeConfigPreferences</p>"},{"location":"data/data/dev.atick.data.models.settings/as-dark-theme-config-preferences/#asdarkthemeconfigpreferences","title":"asDarkThemeConfigPreferences","text":"<p>[androidJvm]\\ fun DarkThemeConfig.asDarkThemeConfigPreferences(): DarkThemeConfigPreferences</p> <p>Extension function to map DarkThemeConfig to DarkThemeConfigPreferences.</p>"},{"location":"data/data/dev.atick.data.models.settings/as-dark-theme-config-preferences/#return","title":"Return","text":"<p>The mapped DarkThemeConfigPreferences.</p>"},{"location":"data/data/dev.atick.data.models.settings/as-dark-theme-config/","title":"As dark theme config","text":"<p>//data/dev.atick.data.models.settings/asDarkThemeConfig</p>"},{"location":"data/data/dev.atick.data.models.settings/as-dark-theme-config/#asdarkthemeconfig","title":"asDarkThemeConfig","text":"<p>[androidJvm]\\ fun DarkThemeConfigPreferences.asDarkThemeConfig(): DarkThemeConfig</p> <p>Extension function to map DarkThemeConfigPreferences to DarkThemeConfig.</p>"},{"location":"data/data/dev.atick.data.models.settings/as-dark-theme-config/#return","title":"Return","text":"<p>The mapped DarkThemeConfig.</p>"},{"location":"data/data/dev.atick.data.models.settings/as-settings/","title":"As settings","text":"<p>//data/dev.atick.data.models.settings/asSettings</p>"},{"location":"data/data/dev.atick.data.models.settings/as-settings/#assettings","title":"asSettings","text":"<p>[androidJvm]\\ fun UserDataPreferences.asSettings(): Settings</p> <p>Extension function to map UserDataPreferences to Settings.</p>"},{"location":"data/data/dev.atick.data.models.settings/as-settings/#return","title":"Return","text":"<p>The mapped Settings.</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/","title":"Index","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/#darkthemeconfig","title":"DarkThemeConfig","text":"<p>[androidJvm]\\ enum DarkThemeConfig : Enum&lt;DarkThemeConfig&gt; </p> <p>Enum class representing configuration options for the dark theme.</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/#entries","title":"Entries","text":"FOLLOW_SYSTEM [androidJvm]FOLLOW_SYSTEM LIGHT [androidJvm]LIGHT DARK [androidJvm]DARK"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/#properties","title":"Properties","text":"Name Summary entries [androidJvm]val entries: EnumEntries&lt;DarkThemeConfig&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/#functions","title":"Functions","text":"Name Summary asDarkThemeConfigPreferences [androidJvm]fun DarkThemeConfig.asDarkThemeConfigPreferences(): DarkThemeConfigPreferencesExtension function to map DarkThemeConfig to DarkThemeConfigPreferences. valueOf [androidJvm]fun valueOf(value: String): DarkThemeConfigReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [androidJvm]fun values(): Array&lt;DarkThemeConfig&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/entries/","title":"Entries","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig/entries</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/entries/#entries","title":"entries","text":"<p>[androidJvm]\\ val entries: EnumEntries&lt;DarkThemeConfig&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/value-of/","title":"Value of","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig/valueOf</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/value-of/#valueof","title":"valueOf","text":"<p>[androidJvm]\\ fun valueOf(value: String): DarkThemeConfig</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/values/","title":"Values","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig/values</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/values/#values","title":"values","text":"<p>[androidJvm]\\ fun values(): Array&lt;DarkThemeConfig&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-d-a-r-k/","title":"Index","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig/DARK</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-d-a-r-k/#dark","title":"DARK","text":"<p>[androidJvm]\\ DARK</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-d-a-r-k/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/","title":"Index","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig/FOLLOW_SYSTEM</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/#follow_system","title":"FOLLOW_SYSTEM","text":"<p>[androidJvm]\\ FOLLOW_SYSTEM</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-f-o-l-l-o-w_-s-y-s-t-e-m/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-l-i-g-h-t/","title":"Index","text":"<p>//data/dev.atick.data.models.settings/DarkThemeConfig/LIGHT</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-l-i-g-h-t/#light","title":"LIGHT","text":"<p>[androidJvm]\\ LIGHT</p>"},{"location":"data/data/dev.atick.data.models.settings/-dark-theme-config/-l-i-g-h-t/#properties","title":"Properties","text":"Name Summary name [androidJvm]val name: String ordinal [androidJvm]val ordinal: Int"},{"location":"data/data/dev.atick.data.models.settings/-settings/","title":"Index","text":"<p>//data/dev.atick.data.models.settings/Settings</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/#settings","title":"Settings","text":"<p>[androidJvm]\\ data class Settings(val userName: String? = null, val useDynamicColor: Boolean = true, val darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)</p> <p>Data class representing editable user settings related to themes and appearance.</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/#constructors","title":"Constructors","text":"Settings [androidJvm]constructor(userName: String? = null, useDynamicColor: Boolean = true, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)Creates a Settings instance with optional parameters."},{"location":"data/data/dev.atick.data.models.settings/-settings/#properties","title":"Properties","text":"Name Summary darkThemeConfig [androidJvm]val darkThemeConfig: DarkThemeConfigConfiguration for the dark theme. useDynamicColor [androidJvm]val useDynamicColor: Boolean = trueIndicates whether dynamic colors are enabled. userName [androidJvm]val userName: String? = null"},{"location":"data/data/dev.atick.data.models.settings/-settings/-settings/","title":"settings","text":"<p>//data/dev.atick.data.models.settings/Settings/Settings</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/-settings/#settings","title":"Settings","text":"<p>[androidJvm]\\ constructor(userName: String? = null, useDynamicColor: Boolean = true, darkThemeConfig: DarkThemeConfig = DarkThemeConfig.FOLLOW_SYSTEM)</p> <p>Creates a Settings instance with optional parameters.</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/dark-theme-config/","title":"Dark theme config","text":"<p>//data/dev.atick.data.models.settings/Settings/darkThemeConfig</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/dark-theme-config/#darkthemeconfig","title":"darkThemeConfig","text":"<p>[androidJvm]\\ val darkThemeConfig: DarkThemeConfig</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/use-dynamic-color/","title":"Use dynamic color","text":"<p>//data/dev.atick.data.models.settings/Settings/useDynamicColor</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/use-dynamic-color/#usedynamiccolor","title":"useDynamicColor","text":"<p>[androidJvm]\\ val useDynamicColor: Boolean = true</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/user-name/","title":"User name","text":"<p>//data/dev.atick.data.models.settings/Settings/userName</p>"},{"location":"data/data/dev.atick.data.models.settings/-settings/user-name/#username","title":"userName","text":"<p>[androidJvm]\\ val userName: String? = null</p>"},{"location":"data/data/dev.atick.data.repository.auth/","title":"Index","text":"<p>//data/dev.atick.data.repository.auth</p>"},{"location":"data/data/dev.atick.data.repository.auth/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.repository.auth/#types","title":"Types","text":"Name Summary AuthRepository [androidJvm]interface AuthRepositoryInterface defining authentication-related operations. AuthRepositoryImpl [androidJvm]class AuthRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : AuthRepositoryImplementation of the AuthRepository interface responsible for handling authentication operations."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/","title":"Index","text":"<p>//data/dev.atick.data.repository.auth/AuthRepository</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/#authrepository","title":"AuthRepository","text":"<p>interface AuthRepository</p> <p>Interface defining authentication-related operations.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/#inheritors","title":"Inheritors","text":"AuthRepositoryImpl"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;Register a new user with an email and password. registerWithGoogle [androidJvm]abstract suspend fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;Register a new user with Google. signInWithEmailAndPassword [androidJvm]abstract suspend fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;Sign in with an email and password. signInWithGoogle [androidJvm]abstract suspend fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;Sign in with Google. signInWithSavedCredentials [androidJvm]abstract suspend fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;Sign in with saved credentials."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-email-and-password/","title":"Register with email and password","text":"<p>//data/dev.atick.data.repository.auth/AuthRepository/registerWithEmailAndPassword</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with an email and password.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-google/","title":"Register with google","text":"<p>//data/dev.atick.data.repository.auth/AuthRepository/registerWithGoogle</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with Google.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-google/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity used to launch the Google sign-in intent."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//data/dev.atick.data.repository.auth/AuthRepository/signInWithEmailAndPassword</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;</p> <p>Sign in with an email and password.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-google/","title":"Sign in with google","text":"<p>//data/dev.atick.data.repository.auth/AuthRepository/signInWithGoogle</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with Google.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-google/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//data/dev.atick.data.repository.auth/AuthRepository/signInWithSavedCredentials</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ abstract suspend fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with saved credentials.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/","title":"Index","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/#authrepositoryimpl","title":"AuthRepositoryImpl","text":"<p>class AuthRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : AuthRepository</p> <p>Implementation of the AuthRepository interface responsible for handling authentication operations.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> authDataSource The data source for authentication operations. userPreferencesDataSource The data source for user preferences."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/#constructors","title":"Constructors","text":"AuthRepositoryImpl [androidJvm]@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;Register a new user with an email and password. registerWithGoogle [androidJvm]open suspend override fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;Register a new user with Google. signInWithEmailAndPassword [androidJvm]open suspend override fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;Sign in with an email and password. signInWithGoogle [androidJvm]open suspend override fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;Sign in with Google. signInWithSavedCredentials [androidJvm]open suspend override fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;Sign in with saved credentials."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/-auth-repository-impl/","title":"auth repository impl","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl/AuthRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/-auth-repository-impl/#authrepositoryimpl","title":"AuthRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/-auth-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> authDataSource The data source for authentication operations. userPreferencesDataSource The data source for user preferences."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-email-and-password/","title":"Register with email and password","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl/registerWithEmailAndPassword</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with an email and password.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-google/","title":"Register with google","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl/registerWithGoogle</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun registerWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Register a new user with Google.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-google/#return","title":"Return","text":"<p>A Result representing the registration operation result. It contains Unit if the registration was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The current activity."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl/signInWithEmailAndPassword</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun signInWithEmailAndPassword(email: String, password: String): Result&lt;Unit&gt;</p> <p>Sign in with an email and password.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-email-and-password/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-google/","title":"Sign in with google","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl/signInWithGoogle</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun signInWithGoogle(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with Google.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-google/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The current activity."},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//data/dev.atick.data.repository.auth/AuthRepositoryImpl/signInWithSavedCredentials</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ open suspend override fun signInWithSavedCredentials(activity: Activity): Result&lt;Unit&gt;</p> <p>Sign in with saved credentials.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>A Result representing the sign-in operation result. It contains Unit if the sign-in was successful, or an error if there was a problem.</p>"},{"location":"data/data/dev.atick.data.repository.auth/-auth-repository-impl/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"data/data/dev.atick.data.repository.home/","title":"Index","text":"<p>//data/dev.atick.data.repository.home</p>"},{"location":"data/data/dev.atick.data.repository.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.repository.home/#types","title":"Types","text":"Name Summary HomeRepository [androidJvm]interface HomeRepository : SyncableInterface defining operations for interacting with the home repository. HomeRepositoryImpl [androidJvm]class HomeRepositoryImpl@Injectconstructor(localDataSource: LocalDataSource, preferencesDataSource: UserPreferencesDataSource, firebaseDataSource: FirebaseDataSource, syncManager: SyncManager) : HomeRepositoryImplementation of HomeRepository."},{"location":"data/data/dev.atick.data.repository.home/-home-repository/","title":"Index","text":"<p>//data/dev.atick.data.repository.home/HomeRepository</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/#homerepository","title":"HomeRepository","text":"<p>interface HomeRepository : Syncable</p> <p>Interface defining operations for interacting with the home repository.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/#inheritors","title":"Inheritors","text":"HomeRepositoryImpl"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/#functions","title":"Functions","text":"Name Summary createOrUpdateJetpack [androidJvm]abstract suspend fun createOrUpdateJetpack(jetpack: Jetpack): Result&lt;Unit&gt;Creates or updates a jetpack in the repository. getJetpack [androidJvm]abstract fun getJetpack(id: String): Flow&lt;Jetpack&gt;Retrieves a specific jetpack by its ID. getJetpacks [androidJvm]abstract fun getJetpacks(): Flow&lt;List&lt;Jetpack&gt;&gt;Retrieves a list of all jetpacks. markJetpackAsDeleted [androidJvm]abstract suspend fun markJetpackAsDeleted(jetpack: Jetpack): Result&lt;Unit&gt;Marks a jetpack as deleted in the repository. sync [androidJvm]abstract suspend fun sync(): Flow&lt;SyncProgress&gt;Synchronizes data and returns a Flow emitting the progress of the sync operation."},{"location":"data/data/dev.atick.data.repository.home/-home-repository/create-or-update-jetpack/","title":"Create or update jetpack","text":"<p>//data/dev.atick.data.repository.home/HomeRepository/createOrUpdateJetpack</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/create-or-update-jetpack/#createorupdatejetpack","title":"createOrUpdateJetpack","text":"<p>[androidJvm]\\ abstract suspend fun createOrUpdateJetpack(jetpack: Jetpack): Result&lt;Unit&gt;</p> <p>Creates or updates a jetpack in the repository.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/create-or-update-jetpack/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/create-or-update-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpack The Jetpack object to create or update."},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpack/","title":"Get jetpack","text":"<p>//data/dev.atick.data.repository.home/HomeRepository/getJetpack</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpack/#getjetpack","title":"getJetpack","text":"<p>[androidJvm]\\ abstract fun getJetpack(id: String): Flow&lt;Jetpack&gt;</p> <p>Retrieves a specific jetpack by its ID.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpack/#return","title":"Return","text":"<p>A Flow emitting the Jetpack object.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The unique identifier of the jetpack."},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpacks/","title":"Get jetpacks","text":"<p>//data/dev.atick.data.repository.home/HomeRepository/getJetpacks</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpacks/#getjetpacks","title":"getJetpacks","text":"<p>[androidJvm]\\ abstract fun getJetpacks(): Flow&lt;List&lt;Jetpack&gt;&gt;</p> <p>Retrieves a list of all jetpacks.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/get-jetpacks/#return","title":"Return","text":"<p>A Flow emitting a list of Jetpack objects.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/mark-jetpack-as-deleted/","title":"Mark jetpack as deleted","text":"<p>//data/dev.atick.data.repository.home/HomeRepository/markJetpackAsDeleted</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/mark-jetpack-as-deleted/#markjetpackasdeleted","title":"markJetpackAsDeleted","text":"<p>[androidJvm]\\ abstract suspend fun markJetpackAsDeleted(jetpack: Jetpack): Result&lt;Unit&gt;</p> <p>Marks a jetpack as deleted in the repository.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/mark-jetpack-as-deleted/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository/mark-jetpack-as-deleted/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpack The Jetpack object to mark as deleted."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/","title":"Index","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/#homerepositoryimpl","title":"HomeRepositoryImpl","text":"<p>class HomeRepositoryImpl@Injectconstructor(localDataSource: LocalDataSource, preferencesDataSource: UserPreferencesDataSource, firebaseDataSource: FirebaseDataSource, syncManager: SyncManager) : HomeRepository</p> <p>Implementation of HomeRepository.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> localDataSource LocalDataSource. preferencesDataSource UserPreferencesDataSource. firebaseDataSource FirebaseDataSource. syncManager SyncManager."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/#constructors","title":"Constructors","text":"HomeRepositoryImpl [androidJvm]@Injectconstructor(localDataSource: LocalDataSource, preferencesDataSource: UserPreferencesDataSource, firebaseDataSource: FirebaseDataSource, syncManager: SyncManager)"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/#functions","title":"Functions","text":"Name Summary createOrUpdateJetpack [androidJvm]open suspend override fun createOrUpdateJetpack(jetpack: Jetpack): Result&lt;Unit&gt;Create or update a jetpack. getJetpack [androidJvm]open override fun getJetpack(id: String): Flow&lt;Jetpack&gt;Get a jetpack by its ID. getJetpacks [androidJvm]open override fun getJetpacks(): Flow&lt;List&lt;Jetpack&gt;&gt;Get all jetpacks. markJetpackAsDeleted [androidJvm]open suspend override fun markJetpackAsDeleted(jetpack: Jetpack): Result&lt;Unit&gt;Mark a jetpack as deleted. sync [androidJvm]open suspend override fun sync(): Flow&lt;SyncProgress&gt;Sync jetpacks with the remote data source."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/-home-repository-impl/","title":"home repository impl","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl/HomeRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/-home-repository-impl/#homerepositoryimpl","title":"HomeRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(localDataSource: LocalDataSource, preferencesDataSource: UserPreferencesDataSource, firebaseDataSource: FirebaseDataSource, syncManager: SyncManager)</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/-home-repository-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> localDataSource LocalDataSource. preferencesDataSource UserPreferencesDataSource. firebaseDataSource FirebaseDataSource. syncManager SyncManager."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/create-or-update-jetpack/","title":"Create or update jetpack","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl/createOrUpdateJetpack</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/create-or-update-jetpack/#createorupdatejetpack","title":"createOrUpdateJetpack","text":"<p>[androidJvm]\\ open suspend override fun createOrUpdateJetpack(jetpack: Jetpack): Result&lt;Unit&gt;</p> <p>Create or update a jetpack.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/create-or-update-jetpack/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/create-or-update-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpack The jetpack to create or update."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpack/","title":"Get jetpack","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl/getJetpack</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpack/#getjetpack","title":"getJetpack","text":"<p>[androidJvm]\\ open override fun getJetpack(id: String): Flow&lt;Jetpack&gt;</p> <p>Get a jetpack by its ID.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpack/#return","title":"Return","text":"<p>A Flow of a Jetpack.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpack/#parameters","title":"Parameters","text":"<p>androidJvm</p> id The ID of the jetpack."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpacks/","title":"Get jetpacks","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl/getJetpacks</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpacks/#getjetpacks","title":"getJetpacks","text":"<p>[androidJvm]\\ open override fun getJetpacks(): Flow&lt;List&lt;Jetpack&gt;&gt;</p> <p>Get all jetpacks.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/get-jetpacks/#return","title":"Return","text":"<p>A Flow of a list of Jetpack.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/mark-jetpack-as-deleted/","title":"Mark jetpack as deleted","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl/markJetpackAsDeleted</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/mark-jetpack-as-deleted/#markjetpackasdeleted","title":"markJetpackAsDeleted","text":"<p>[androidJvm]\\ open suspend override fun markJetpackAsDeleted(jetpack: Jetpack): Result&lt;Unit&gt;</p> <p>Mark a jetpack as deleted.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/mark-jetpack-as-deleted/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/mark-jetpack-as-deleted/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpack The jetpack to mark as deleted."},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/sync/","title":"Sync","text":"<p>//data/dev.atick.data.repository.home/HomeRepositoryImpl/sync</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/sync/#sync","title":"sync","text":"<p>[androidJvm]\\ open suspend override fun sync(): Flow&lt;SyncProgress&gt;</p> <p>Sync jetpacks with the remote data source.</p>"},{"location":"data/data/dev.atick.data.repository.home/-home-repository-impl/sync/#return","title":"Return","text":"<p>A Flow of SyncProgress.</p>"},{"location":"data/data/dev.atick.data.repository.profile/","title":"Index","text":"<p>//data/dev.atick.data.repository.profile</p>"},{"location":"data/data/dev.atick.data.repository.profile/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.repository.profile/#types","title":"Types","text":"Name Summary ProfileRepository [androidJvm]interface ProfileRepositoryInterface for managing profile-related operations. ProfileRepositoryImpl [androidJvm]class ProfileRepositoryImpl@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource) : ProfileRepositoryImplementation of the ProfileRepository interface."},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/","title":"Index","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepository</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/#profilerepository","title":"ProfileRepository","text":"<p>interface ProfileRepository</p> <p>Interface for managing profile-related operations.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/#inheritors","title":"Inheritors","text":"ProfileRepositoryImpl"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/#functions","title":"Functions","text":"Name Summary getProfile [androidJvm]abstract fun getProfile(): Flow&lt;Profile&gt;Retrieves the profile information. signOut [androidJvm]abstract suspend fun signOut(): Result&lt;Unit&gt;Signs out the current user."},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/get-profile/","title":"Get profile","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepository/getProfile</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/get-profile/#getprofile","title":"getProfile","text":"<p>[androidJvm]\\ abstract fun getProfile(): Flow&lt;Profile&gt;</p> <p>Retrieves the profile information.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/get-profile/#return","title":"Return","text":"<p>A Flow emitting the Profile object.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/sign-out/","title":"Sign out","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepository/signOut</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ abstract suspend fun signOut(): Result&lt;Unit&gt;</p> <p>Signs out the current user.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository/sign-out/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/","title":"Index","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/#profilerepositoryimpl","title":"ProfileRepositoryImpl","text":"<p>[androidJvm]\\ class ProfileRepositoryImpl@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource) : ProfileRepository</p> <p>Implementation of the ProfileRepository interface.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/#constructors","title":"Constructors","text":"ProfileRepositoryImpl [androidJvm]@Injectconstructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource)"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/#functions","title":"Functions","text":"Name Summary getProfile [androidJvm]open override fun getProfile(): Flow&lt;Profile&gt;Retrieves the user profile as a Flow. signOut [androidJvm]open suspend override fun signOut(): Result&lt;Unit&gt;Signs out the user and resets user preferences."},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/-profile-repository-impl/","title":"profile repository impl","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepositoryImpl/ProfileRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/-profile-repository-impl/#profilerepositoryimpl","title":"ProfileRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(userPreferencesDataSource: UserPreferencesDataSource, authDataSource: AuthDataSource)</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/get-profile/","title":"Get profile","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepositoryImpl/getProfile</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/get-profile/#getprofile","title":"getProfile","text":"<p>[androidJvm]\\ open override fun getProfile(): Flow&lt;Profile&gt;</p> <p>Retrieves the user profile as a Flow.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/get-profile/#return","title":"Return","text":"<p>A Flow emitting the user profile.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/sign-out/","title":"Sign out","text":"<p>//data/dev.atick.data.repository.profile/ProfileRepositoryImpl/signOut</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ open suspend override fun signOut(): Result&lt;Unit&gt;</p> <p>Signs out the user and resets user preferences.</p>"},{"location":"data/data/dev.atick.data.repository.profile/-profile-repository-impl/sign-out/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.settings/","title":"Index","text":"<p>//data/dev.atick.data.repository.settings</p>"},{"location":"data/data/dev.atick.data.repository.settings/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.repository.settings/#types","title":"Types","text":"Name Summary SettingsRepository [androidJvm]interface SettingsRepositoryRepository for managing user settings. SettingsRepositoryImpl [androidJvm]class SettingsRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : SettingsRepositoryImplementation of SettingsRepository."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/","title":"Index","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepository</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/#settingsrepository","title":"SettingsRepository","text":"<p>interface SettingsRepository</p> <p>Repository for managing user settings.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/#inheritors","title":"Inheritors","text":"SettingsRepositoryImpl"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/#properties","title":"Properties","text":"Name Summary settings [androidJvm]abstract val settings: Flow&lt;Settings&gt;A Flow that emits the current settings."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;Sets the dark theme configuration. setDynamicColorPreference [androidJvm]abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;Sets the dynamic color preference. signOut [androidJvm]abstract suspend fun signOut(): Result&lt;Unit&gt;Signs out the current user."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepository/setDarkThemeConfig</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ abstract suspend fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;</p> <p>Sets the dark theme configuration.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dark-theme-config/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration to set."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepository/setDynamicColorPreference</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ abstract suspend fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;</p> <p>Sets the dynamic color preference.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dynamic-color-preference/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor Whether to use dynamic colors."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/settings/","title":"Settings","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepository/settings</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/settings/#settings","title":"settings","text":"<p>[androidJvm]\\ abstract val settings: Flow&lt;Settings&gt;</p> <p>A Flow that emits the current settings.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/sign-out/","title":"Sign out","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepository/signOut</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ abstract suspend fun signOut(): Result&lt;Unit&gt;</p> <p>Signs out the current user.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository/sign-out/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/","title":"Index","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/#settingsrepositoryimpl","title":"SettingsRepositoryImpl","text":"<p>[androidJvm]\\ class SettingsRepositoryImpl@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource) : SettingsRepository</p> <p>Implementation of SettingsRepository.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/#constructors","title":"Constructors","text":"SettingsRepositoryImpl [androidJvm]@Injectconstructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/#properties","title":"Properties","text":"Name Summary settings [androidJvm]open override val settings: Flow&lt;Settings&gt;Retrieves the user's settings."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/#functions","title":"Functions","text":"Name Summary setDarkThemeConfig [androidJvm]open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;Sets the dark theme configuration. setDynamicColorPreference [androidJvm]open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;Sets the dynamic color preference. signOut [androidJvm]open suspend override fun signOut(): Result&lt;Unit&gt;Signs out the current user."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/-settings-repository-impl/","title":"settings repository impl","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepositoryImpl/SettingsRepositoryImpl</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/-settings-repository-impl/#settingsrepositoryimpl","title":"SettingsRepositoryImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authDataSource: AuthDataSource, userPreferencesDataSource: UserPreferencesDataSource)</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dark-theme-config/","title":"Set dark theme config","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepositoryImpl/setDarkThemeConfig</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dark-theme-config/#setdarkthemeconfig","title":"setDarkThemeConfig","text":"<p>[androidJvm]\\ open suspend override fun setDarkThemeConfig(darkThemeConfig: DarkThemeConfig): Result&lt;Unit&gt;</p> <p>Sets the dark theme configuration.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dark-theme-config/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dark-theme-config/#parameters","title":"Parameters","text":"<p>androidJvm</p> darkThemeConfig The dark theme configuration."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dynamic-color-preference/","title":"Set dynamic color preference","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepositoryImpl/setDynamicColorPreference</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dynamic-color-preference/#setdynamiccolorpreference","title":"setDynamicColorPreference","text":"<p>[androidJvm]\\ open suspend override fun setDynamicColorPreference(useDynamicColor: Boolean): Result&lt;Unit&gt;</p> <p>Sets the dynamic color preference.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dynamic-color-preference/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/set-dynamic-color-preference/#parameters","title":"Parameters","text":"<p>androidJvm</p> useDynamicColor Whether to use dynamic colors."},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/settings/","title":"Settings","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepositoryImpl/settings</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/settings/#settings","title":"settings","text":"<p>[androidJvm]\\ open override val settings: Flow&lt;Settings&gt;</p> <p>Retrieves the user's settings.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/settings/#return","title":"Return","text":"<p>A Flow emitting the user's settings.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/sign-out/","title":"Sign out","text":"<p>//data/dev.atick.data.repository.settings/SettingsRepositoryImpl/signOut</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ open suspend override fun signOut(): Result&lt;Unit&gt;</p> <p>Signs out the current user.</p>"},{"location":"data/data/dev.atick.data.repository.settings/-settings-repository-impl/sign-out/#return","title":"Return","text":"<p>A Result indicating the success or failure of the operation.</p>"},{"location":"data/data/dev.atick.data.utils/","title":"Index","text":"<p>//data/dev.atick.data.utils</p>"},{"location":"data/data/dev.atick.data.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"data/data/dev.atick.data.utils/#types","title":"Types","text":"Name Summary Syncable [androidJvm]interface SyncableInterface representing a syncable entity. SyncManager [androidJvm]interface SyncManager SyncProgress [androidJvm]data class SyncProgress(val total: Int = 0, val current: Int = 0, val message: String? = null)Data class that represents the progress of a sync operation."},{"location":"data/data/dev.atick.data.utils/-sync-manager/","title":"Index","text":"<p>//data/dev.atick.data.utils/SyncManager</p>"},{"location":"data/data/dev.atick.data.utils/-sync-manager/#syncmanager","title":"SyncManager","text":"<p>[androidJvm]\\ interface SyncManager</p>"},{"location":"data/data/dev.atick.data.utils/-sync-manager/#properties","title":"Properties","text":"Name Summary isSyncing [androidJvm]abstract val isSyncing: Flow&lt;Boolean&gt;Flow that emits a boolean value indicating whether the sync operation is in progress."},{"location":"data/data/dev.atick.data.utils/-sync-manager/#functions","title":"Functions","text":"Name Summary requestSync [androidJvm]abstract fun requestSync()Starts the sync operation."},{"location":"data/data/dev.atick.data.utils/-sync-manager/is-syncing/","title":"Is syncing","text":"<p>//data/dev.atick.data.utils/SyncManager/isSyncing</p>"},{"location":"data/data/dev.atick.data.utils/-sync-manager/is-syncing/#issyncing","title":"isSyncing","text":"<p>[androidJvm]\\ abstract val isSyncing: Flow&lt;Boolean&gt;</p> <p>Flow that emits a boolean value indicating whether the sync operation is in progress.</p>"},{"location":"data/data/dev.atick.data.utils/-sync-manager/request-sync/","title":"Request sync","text":"<p>//data/dev.atick.data.utils/SyncManager/requestSync</p>"},{"location":"data/data/dev.atick.data.utils/-sync-manager/request-sync/#requestsync","title":"requestSync","text":"<p>[androidJvm]\\ abstract fun requestSync()</p> <p>Starts the sync operation.</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/","title":"Index","text":"<p>//data/dev.atick.data.utils/SyncProgress</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/#syncprogress","title":"SyncProgress","text":"<p>data class SyncProgress(val total: Int = 0, val current: Int = 0, val message: String? = null)</p> <p>Data class that represents the progress of a sync operation.</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items to sync. current The current number of items synced. message The message to display during the sync operation."},{"location":"data/data/dev.atick.data.utils/-sync-progress/#constructors","title":"Constructors","text":"SyncProgress [androidJvm]constructor(total: Int = 0, current: Int = 0, message: String? = null)"},{"location":"data/data/dev.atick.data.utils/-sync-progress/#properties","title":"Properties","text":"Name Summary current [androidJvm]val current: Int = 0 message [androidJvm]val message: String? = null total [androidJvm]val total: Int = 0"},{"location":"data/data/dev.atick.data.utils/-sync-progress/-sync-progress/","title":"sync progress","text":"<p>//data/dev.atick.data.utils/SyncProgress/SyncProgress</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/-sync-progress/#syncprogress","title":"SyncProgress","text":"<p>[androidJvm]\\ constructor(total: Int = 0, current: Int = 0, message: String? = null)</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/-sync-progress/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items to sync. current The current number of items synced. message The message to display during the sync operation."},{"location":"data/data/dev.atick.data.utils/-sync-progress/current/","title":"Current","text":"<p>//data/dev.atick.data.utils/SyncProgress/current</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/current/#current","title":"current","text":"<p>[androidJvm]\\ val current: Int = 0</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/current/#parameters","title":"Parameters","text":"<p>androidJvm</p> current The current number of items synced."},{"location":"data/data/dev.atick.data.utils/-sync-progress/message/","title":"Message","text":"<p>//data/dev.atick.data.utils/SyncProgress/message</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/message/#message","title":"message","text":"<p>[androidJvm]\\ val message: String? = null</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/message/#parameters","title":"Parameters","text":"<p>androidJvm</p> message The message to display during the sync operation."},{"location":"data/data/dev.atick.data.utils/-sync-progress/total/","title":"Total","text":"<p>//data/dev.atick.data.utils/SyncProgress/total</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/total/#total","title":"total","text":"<p>[androidJvm]\\ val total: Int = 0</p>"},{"location":"data/data/dev.atick.data.utils/-sync-progress/total/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items to sync."},{"location":"data/data/dev.atick.data.utils/-syncable/","title":"Index","text":"<p>//data/dev.atick.data.utils/Syncable</p>"},{"location":"data/data/dev.atick.data.utils/-syncable/#syncable","title":"Syncable","text":"<p>interface Syncable</p> <p>Interface representing a syncable entity.</p>"},{"location":"data/data/dev.atick.data.utils/-syncable/#inheritors","title":"Inheritors","text":"HomeRepository"},{"location":"data/data/dev.atick.data.utils/-syncable/#functions","title":"Functions","text":"Name Summary sync [androidJvm]abstract suspend fun sync(): Flow&lt;SyncProgress&gt;Synchronizes data and returns a Flow emitting the progress of the sync operation."},{"location":"data/data/dev.atick.data.utils/-syncable/sync/","title":"Sync","text":"<p>//data/dev.atick.data.utils/Syncable/sync</p>"},{"location":"data/data/dev.atick.data.utils/-syncable/sync/#sync","title":"sync","text":"<p>[androidJvm]\\ abstract suspend fun sync(): Flow&lt;SyncProgress&gt;</p> <p>Synchronizes data and returns a Flow emitting the progress of the sync operation.</p>"},{"location":"data/data/dev.atick.data.utils/-syncable/sync/#return","title":"Return","text":"<p>A Flow emitting SyncProgress objects representing the progress of the sync operation.</p>"},{"location":"feature/auth/","title":"Index","text":"<p>//auth</p>"},{"location":"feature/auth/#auth","title":"auth","text":""},{"location":"feature/auth/#packages","title":"Packages","text":"Name dev.atick.feature.auth.navigation dev.atick.feature.auth.ui.signin dev.atick.feature.auth.ui.signup"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.navigation</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/#types","title":"Types","text":"Name Summary AuthNavGraph [androidJvm]@Serializabledata object AuthNavGraphAuth navigation graph. SignIn [androidJvm]@Serializabledata object SignInSign in route. SignUp [androidJvm]@Serializabledata object SignUpSign up route."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/#functions","title":"Functions","text":"Name Summary authNavGraph [androidJvm]fun NavGraphBuilder.authNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)Auth navigation graph. navigateToAuthNavGraph [androidJvm]fun NavController.navigateToAuthNavGraph(navOptions: NavOptions? = null)Navigate to the auth navigation graph. navigateToSignInRoute [androidJvm]fun NavController.navigateToSignInRoute(navOptions: NavOptions? = null)Navigate to the sign in route. navigateToSignUpRoute [androidJvm]fun NavController.navigateToSignUpRoute(navOptions: NavOptions? = null)Navigate to the sign up route. signInScreen [androidJvm]fun NavGraphBuilder.signInScreen(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)Sign in screen. signUpScreen [androidJvm]fun NavGraphBuilder.signUpScreen(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)Sign up screen."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/auth-nav-graph/","title":"Auth nav graph","text":"<p>//auth/dev.atick.feature.auth.navigation/authNavGraph</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/auth-nav-graph/#authnavgraph","title":"authNavGraph","text":"<p>[androidJvm]\\ fun NavGraphBuilder.authNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)</p> <p>Auth navigation graph.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/auth-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> nestedNavGraphs Nested navigation graphs."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-auth-nav-graph/","title":"Navigate to auth nav graph","text":"<p>//auth/dev.atick.feature.auth.navigation/navigateToAuthNavGraph</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-auth-nav-graph/#navigatetoauthnavgraph","title":"navigateToAuthNavGraph","text":"<p>[androidJvm]\\ fun NavController.navigateToAuthNavGraph(navOptions: NavOptions? = null)</p> <p>Navigate to the auth navigation graph.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-auth-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions NavOptions."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-sign-in-route/","title":"Navigate to sign in route","text":"<p>//auth/dev.atick.feature.auth.navigation/navigateToSignInRoute</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-sign-in-route/#navigatetosigninroute","title":"navigateToSignInRoute","text":"<p>[androidJvm]\\ fun NavController.navigateToSignInRoute(navOptions: NavOptions? = null)</p> <p>Navigate to the sign in route.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-sign-in-route/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions NavOptions."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-sign-up-route/","title":"Navigate to sign up route","text":"<p>//auth/dev.atick.feature.auth.navigation/navigateToSignUpRoute</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-sign-up-route/#navigatetosignuproute","title":"navigateToSignUpRoute","text":"<p>[androidJvm]\\ fun NavController.navigateToSignUpRoute(navOptions: NavOptions? = null)</p> <p>Navigate to the sign up route.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/navigate-to-sign-up-route/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions NavOptions."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/sign-in-screen/","title":"Sign in screen","text":"<p>//auth/dev.atick.feature.auth.navigation/signInScreen</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/sign-in-screen/#signinscreen","title":"signInScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.signInScreen(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)</p> <p>Sign in screen.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/sign-in-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSignUpClick Callback when sign up is clicked. onShowSnackbar Callback to show a snackbar."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/sign-up-screen/","title":"Sign up screen","text":"<p>//auth/dev.atick.feature.auth.navigation/signUpScreen</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/sign-up-screen/#signupscreen","title":"signUpScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.signUpScreen(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)</p> <p>Sign up screen.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/sign-up-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSignInClick Callback when sign in is clicked. onShowSnackbar Callback to show a snackbar."},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/-auth-nav-graph/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.navigation/AuthNavGraph</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/-auth-nav-graph/#authnavgraph","title":"AuthNavGraph","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object AuthNavGraph</p> <p>Auth navigation graph.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/-sign-in/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.navigation/SignIn</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/-sign-in/#signin","title":"SignIn","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object SignIn</p> <p>Sign in route.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/-sign-up/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.navigation/SignUp</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.navigation/-sign-up/#signup","title":"SignUp","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object SignUp</p> <p>Sign up route.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.ui.signin</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/#types","title":"Types","text":"Name Summary SignInScreenData [androidJvm]@Immutabledata class SignInScreenData(val email: TextFiledData = TextFiledData(String()), val password: TextFiledData = TextFiledData(String()))Data for SignInScreen. SignInViewModel [androidJvm]class SignInViewModel@Injectconstructor(authRepository: AuthRepository) : ViewModelViewModel for SignInScreen."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/#functions","title":"Functions","text":"Name Summary SignInRoute [androidJvm]@Composablefun SignInRoute(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, signInViewModel: SignInViewModel = hiltViewModel())Sign in route."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-route/","title":"sign in route","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInRoute</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-route/#signinroute","title":"SignInRoute","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SignInRoute(onSignUpClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, signInViewModel: SignInViewModel = hiltViewModel())</p> <p>Sign in route.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-route/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSignUpClick Navigate to sign up screen. onShowSnackbar Show snackbar. signInViewModel SignInViewModel."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInScreenData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/#signinscreendata","title":"SignInScreenData","text":"<p>@Immutable</p> <p>data class SignInScreenData(val email: TextFiledData = TextFiledData(String()), val password: TextFiledData = TextFiledData(String()))</p> <p>Data for SignInScreen.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> email TextFiledData. password TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/#constructors","title":"Constructors","text":"SignInScreenData [androidJvm]constructor(email: TextFiledData = TextFiledData(String()), password: TextFiledData = TextFiledData(String()))"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/#properties","title":"Properties","text":"Name Summary email [androidJvm]val email: TextFiledData password [androidJvm]val password: TextFiledData"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/-sign-in-screen-data/","title":"sign in screen data","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInScreenData/SignInScreenData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/-sign-in-screen-data/#signinscreendata","title":"SignInScreenData","text":"<p>[androidJvm]\\ constructor(email: TextFiledData = TextFiledData(String()), password: TextFiledData = TextFiledData(String()))</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/-sign-in-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> email TextFiledData. password TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/email/","title":"Email","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInScreenData/email</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/email/#email","title":"email","text":"<p>[androidJvm]\\ val email: TextFiledData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/email/#parameters","title":"Parameters","text":"<p>androidJvm</p> email TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/password/","title":"Password","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInScreenData/password</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/password/#password","title":"password","text":"<p>[androidJvm]\\ val password: TextFiledData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-screen-data/password/#parameters","title":"Parameters","text":"<p>androidJvm</p> password TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/#signinviewmodel","title":"SignInViewModel","text":"<p>class SignInViewModel@Injectconstructor(authRepository: AuthRepository) : ViewModel</p> <p>ViewModel for SignInScreen.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> authRepository AuthRepository."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/#constructors","title":"Constructors","text":"SignInViewModel [androidJvm]@Injectconstructor(authRepository: AuthRepository)"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/#properties","title":"Properties","text":"Name Summary signInUiState [androidJvm]val signInUiState: StateFlow&lt;UiState&lt;SignInScreenData&gt;&gt;"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? loginWithEmailAndPassword [androidJvm]fun loginWithEmailAndPassword() signInWithGoogle [androidJvm]fun signInWithGoogle(activity: Activity) signInWithSavedCredentials [androidJvm]fun signInWithSavedCredentials(activity: Activity) updateEmail [androidJvm]fun updateEmail(email: String) updatePassword [androidJvm]fun updatePassword(password: String)"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/-sign-in-view-model/","title":"sign in view model","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/SignInViewModel</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/-sign-in-view-model/#signinviewmodel","title":"SignInViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authRepository: AuthRepository)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/-sign-in-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> authRepository AuthRepository."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/login-with-email-and-password/","title":"Login with email and password","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/loginWithEmailAndPassword</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/login-with-email-and-password/#loginwithemailandpassword","title":"loginWithEmailAndPassword","text":"<p>[androidJvm]\\ fun loginWithEmailAndPassword()</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/sign-in-ui-state/","title":"Sign in ui state","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/signInUiState</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/sign-in-ui-state/#signinuistate","title":"signInUiState","text":"<p>[androidJvm]\\ val signInUiState: StateFlow&lt;UiState&lt;SignInScreenData&gt;&gt;</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/signInWithGoogle</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ fun signInWithGoogle(activity: Activity)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/signInWithSavedCredentials</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ fun signInWithSavedCredentials(activity: Activity)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/update-email/","title":"Update email","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/updateEmail</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/update-email/#updateemail","title":"updateEmail","text":"<p>[androidJvm]\\ fun updateEmail(email: String)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/update-password/","title":"Update password","text":"<p>//auth/dev.atick.feature.auth.ui.signin/SignInViewModel/updatePassword</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signin/-sign-in-view-model/update-password/#updatepassword","title":"updatePassword","text":"<p>[androidJvm]\\ fun updatePassword(password: String)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.ui.signup</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/#types","title":"Types","text":"Name Summary SignUpScreenData [androidJvm]@Immutabledata class SignUpScreenData(val name: TextFiledData = TextFiledData(String()), val email: TextFiledData = TextFiledData(String()), val password: TextFiledData = TextFiledData(String()))Data for SignUpScreen. SignUpViewModel [androidJvm]class SignUpViewModel@Injectconstructor(authRepository: AuthRepository) : ViewModelViewModel for SignUpScreen."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/#functions","title":"Functions","text":"Name Summary SignUpRoute [androidJvm]@Composablefun SignUpRoute(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, signUpViewModel: SignUpViewModel = hiltViewModel())Composable function for the SignUp route."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-route/","title":"sign up route","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpRoute</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-route/#signuproute","title":"SignUpRoute","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SignUpRoute(onSignInClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, signUpViewModel: SignUpViewModel = hiltViewModel())</p> <p>Composable function for the SignUp route.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-route/#parameters","title":"Parameters","text":"<p>androidJvm</p> onSignInClick Callback to be invoked when the sign-in button is clicked. onShowSnackbar Callback to show a snackbar with a message, action, and optional error. signUpViewModel ViewModel for the SignUp screen, default is provided by Hilt."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpScreenData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/#signupscreendata","title":"SignUpScreenData","text":"<p>@Immutable</p> <p>data class SignUpScreenData(val name: TextFiledData = TextFiledData(String()), val email: TextFiledData = TextFiledData(String()), val password: TextFiledData = TextFiledData(String()))</p> <p>Data for SignUpScreen.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> name TextFiledData. email TextFiledData. password TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/#constructors","title":"Constructors","text":"SignUpScreenData [androidJvm]constructor(name: TextFiledData = TextFiledData(String()), email: TextFiledData = TextFiledData(String()), password: TextFiledData = TextFiledData(String()))"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/#properties","title":"Properties","text":"Name Summary email [androidJvm]val email: TextFiledData name [androidJvm]val name: TextFiledData password [androidJvm]val password: TextFiledData"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/-sign-up-screen-data/","title":"sign up screen data","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpScreenData/SignUpScreenData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/-sign-up-screen-data/#signupscreendata","title":"SignUpScreenData","text":"<p>[androidJvm]\\ constructor(name: TextFiledData = TextFiledData(String()), email: TextFiledData = TextFiledData(String()), password: TextFiledData = TextFiledData(String()))</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/-sign-up-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> name TextFiledData. email TextFiledData. password TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/email/","title":"Email","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpScreenData/email</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/email/#email","title":"email","text":"<p>[androidJvm]\\ val email: TextFiledData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/email/#parameters","title":"Parameters","text":"<p>androidJvm</p> email TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/name/","title":"Name","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpScreenData/name</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: TextFiledData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/name/#parameters","title":"Parameters","text":"<p>androidJvm</p> name TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/password/","title":"Password","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpScreenData/password</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/password/#password","title":"password","text":"<p>[androidJvm]\\ val password: TextFiledData</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-screen-data/password/#parameters","title":"Parameters","text":"<p>androidJvm</p> password TextFiledData."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/","title":"Index","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/#signupviewmodel","title":"SignUpViewModel","text":"<p>class SignUpViewModel@Injectconstructor(authRepository: AuthRepository) : ViewModel</p> <p>ViewModel for SignUpScreen.</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> authRepository AuthRepository."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/#constructors","title":"Constructors","text":"SignUpViewModel [androidJvm]@Injectconstructor(authRepository: AuthRepository)"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/#properties","title":"Properties","text":"Name Summary signUpUiState [androidJvm]val signUpUiState: StateFlow&lt;UiState&lt;SignUpScreenData&gt;&gt;"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? registerWithEmailAndPassword [androidJvm]fun registerWithEmailAndPassword(activity: Activity) registerWithGoogle [androidJvm]fun registerWithGoogle(activity: Activity) updateEmail [androidJvm]fun updateEmail(email: String) updateName [androidJvm]fun updateName(name: String) updatePassword [androidJvm]fun updatePassword(password: String)"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/-sign-up-view-model/","title":"sign up view model","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/SignUpViewModel</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/-sign-up-view-model/#signupviewmodel","title":"SignUpViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(authRepository: AuthRepository)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/-sign-up-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> authRepository AuthRepository."},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/registerWithEmailAndPassword</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ fun registerWithEmailAndPassword(activity: Activity)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/registerWithGoogle</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ fun registerWithGoogle(activity: Activity)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/sign-up-ui-state/","title":"Sign up ui state","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/signUpUiState</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/sign-up-ui-state/#signupuistate","title":"signUpUiState","text":"<p>[androidJvm]\\ val signUpUiState: StateFlow&lt;UiState&lt;SignUpScreenData&gt;&gt;</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/update-email/","title":"Update email","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/updateEmail</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/update-email/#updateemail","title":"updateEmail","text":"<p>[androidJvm]\\ fun updateEmail(email: String)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/update-name/","title":"Update name","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/updateName</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/update-name/#updatename","title":"updateName","text":"<p>[androidJvm]\\ fun updateName(name: String)</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/update-password/","title":"Update password","text":"<p>//auth/dev.atick.feature.auth.ui.signup/SignUpViewModel/updatePassword</p>"},{"location":"feature/auth/auth/dev.atick.feature.auth.ui.signup/-sign-up-view-model/update-password/#updatepassword","title":"updatePassword","text":"<p>[androidJvm]\\ fun updatePassword(password: String)</p>"},{"location":"feature/home/","title":"Index","text":"<p>//home</p>"},{"location":"feature/home/#home","title":"home","text":""},{"location":"feature/home/#packages","title":"Packages","text":"Name dev.atick.feature.home.navigation dev.atick.feature.home.ui.home dev.atick.feature.home.ui.item"},{"location":"feature/home/home/dev.atick.feature.home.navigation/","title":"Index","text":"<p>//home/dev.atick.feature.home.navigation</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/home/home/dev.atick.feature.home.navigation/#types","title":"Types","text":"Name Summary Home [androidJvm]@Serializabledata object HomeHome navigation. HomeNavGraph [androidJvm]@Serializabledata object HomeNavGraphHome navigation graph. Item [androidJvm]@Serializabledata class Item(val itemId: String?)Item navigation."},{"location":"feature/home/home/dev.atick.feature.home.navigation/#functions","title":"Functions","text":"Name Summary homeNavGraph [androidJvm]fun NavGraphBuilder.homeNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)Home navigation graph. homeScreen [androidJvm]fun NavGraphBuilder.homeScreen(onJetpackClick: (String) -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)Home screen. itemScreen [androidJvm]fun NavGraphBuilder.itemScreen(onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)Item screen. navigateToHomeNavGraph [androidJvm]fun NavController.navigateToHomeNavGraph(navOptions: NavOptions? = null)Navigates to the Home navigation graph. navigateToItemScreen [androidJvm]fun NavController.navigateToItemScreen(itemId: String?)Navigates to the Item screen."},{"location":"feature/home/home/dev.atick.feature.home.navigation/home-nav-graph/","title":"Home nav graph","text":"<p>//home/dev.atick.feature.home.navigation/homeNavGraph</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/home-nav-graph/#homenavgraph","title":"homeNavGraph","text":"<p>[androidJvm]\\ fun NavGraphBuilder.homeNavGraph(nestedNavGraphs: NavGraphBuilder.() -&gt; Unit)</p> <p>Home navigation graph.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/home-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> nestedNavGraphs The nested navigation graphs."},{"location":"feature/home/home/dev.atick.feature.home.navigation/home-screen/","title":"Home screen","text":"<p>//home/dev.atick.feature.home.navigation/homeScreen</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/home-screen/#homescreen","title":"homeScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.homeScreen(onJetpackClick: (String) -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)</p> <p>Home screen.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/home-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onJetpackClick The click listener for the jetpack. onShowSnackbar The snackbar listener."},{"location":"feature/home/home/dev.atick.feature.home.navigation/item-screen/","title":"Item screen","text":"<p>//home/dev.atick.feature.home.navigation/itemScreen</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/item-screen/#itemscreen","title":"itemScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.itemScreen(onBackClick: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)</p> <p>Item screen.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/item-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onBackClick The back click listener. onShowSnackbar The snackbar listener."},{"location":"feature/home/home/dev.atick.feature.home.navigation/navigate-to-home-nav-graph/","title":"Navigate to home nav graph","text":"<p>//home/dev.atick.feature.home.navigation/navigateToHomeNavGraph</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/navigate-to-home-nav-graph/#navigatetohomenavgraph","title":"navigateToHomeNavGraph","text":"<p>[androidJvm]\\ fun NavController.navigateToHomeNavGraph(navOptions: NavOptions? = null)</p> <p>Navigates to the Home navigation graph.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/navigate-to-home-nav-graph/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions Optional navigation options to configure the navigation behavior."},{"location":"feature/home/home/dev.atick.feature.home.navigation/navigate-to-item-screen/","title":"Navigate to item screen","text":"<p>//home/dev.atick.feature.home.navigation/navigateToItemScreen</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/navigate-to-item-screen/#navigatetoitemscreen","title":"navigateToItemScreen","text":"<p>[androidJvm]\\ fun NavController.navigateToItemScreen(itemId: String?)</p> <p>Navigates to the Item screen.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/navigate-to-item-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> itemId The item ID."},{"location":"feature/home/home/dev.atick.feature.home.navigation/-home/","title":"Index","text":"<p>//home/dev.atick.feature.home.navigation/Home</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-home/#home","title":"Home","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Home</p> <p>Home navigation.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-home-nav-graph/","title":"Index","text":"<p>//home/dev.atick.feature.home.navigation/HomeNavGraph</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-home-nav-graph/#homenavgraph","title":"HomeNavGraph","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object HomeNavGraph</p> <p>Home navigation graph.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/","title":"Index","text":"<p>//home/dev.atick.feature.home.navigation/Item</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/#item","title":"Item","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class Item(val itemId: String?)</p> <p>Item navigation.</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/#constructors","title":"Constructors","text":"Item [androidJvm]constructor(itemId: String?)"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/#properties","title":"Properties","text":"Name Summary itemId [androidJvm]val itemId: String?"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/-item/","title":"item","text":"<p>//home/dev.atick.feature.home.navigation/Item/Item</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/-item/#item","title":"Item","text":"<p>[androidJvm]\\ constructor(itemId: String?)</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/item-id/","title":"Item id","text":"<p>//home/dev.atick.feature.home.navigation/Item/itemId</p>"},{"location":"feature/home/home/dev.atick.feature.home.navigation/-item/item-id/#itemid","title":"itemId","text":"<p>[androidJvm]\\ val itemId: String?</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/","title":"Index","text":"<p>//home/dev.atick.feature.home.ui.home</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/home/home/dev.atick.feature.home.ui.home/#types","title":"Types","text":"Name Summary HomeScreenData [androidJvm]@Immutabledata class HomeScreenData(val jetpacks: List&lt;Jetpack&gt; = emptyList())Home screen data. HomeViewModel [androidJvm]class HomeViewModel@Injectconstructor(homeRepository: HomeRepository) : ViewModelHome view model."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/#functions","title":"Functions","text":"Name Summary JetpackCard [androidJvm]@Composablefun JetpackCard(jetpack: Jetpack, modifier: Modifier = Modifier, onClick: () -&gt; Unit = {})Jetpack card."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-jetpack-card/","title":"jetpack card","text":"<p>//home/dev.atick.feature.home.ui.home/JetpackCard</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-jetpack-card/#jetpackcard","title":"JetpackCard","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun JetpackCard(jetpack: Jetpack, modifier: Modifier = Modifier, onClick: () -&gt; Unit = {})</p> <p>Jetpack card.</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-jetpack-card/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpack The jetpack. modifier The modifier. onClick The click listener."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/","title":"Index","text":"<p>//home/dev.atick.feature.home.ui.home/HomeScreenData</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/#homescreendata","title":"HomeScreenData","text":"<p>@Immutable</p> <p>data class HomeScreenData(val jetpacks: List&lt;Jetpack&gt; = emptyList())</p> <p>Home screen data.</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpacks List of Jetpack."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/#constructors","title":"Constructors","text":"HomeScreenData [androidJvm]constructor(jetpacks: List&lt;Jetpack&gt; = emptyList())"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/#properties","title":"Properties","text":"Name Summary jetpacks [androidJvm]val jetpacks: List&lt;Jetpack&gt;"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/-home-screen-data/","title":"home screen data","text":"<p>//home/dev.atick.feature.home.ui.home/HomeScreenData/HomeScreenData</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/-home-screen-data/#homescreendata","title":"HomeScreenData","text":"<p>[androidJvm]\\ constructor(jetpacks: List&lt;Jetpack&gt; = emptyList())</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/-home-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpacks List of Jetpack."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/jetpacks/","title":"Jetpacks","text":"<p>//home/dev.atick.feature.home.ui.home/HomeScreenData/jetpacks</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/jetpacks/#jetpacks","title":"jetpacks","text":"<p>[androidJvm]\\ val jetpacks: List&lt;Jetpack&gt;</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-screen-data/jetpacks/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpacks List of Jetpack."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/","title":"Index","text":"<p>//home/dev.atick.feature.home.ui.home/HomeViewModel</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/#homeviewmodel","title":"HomeViewModel","text":"<p>class HomeViewModel@Injectconstructor(homeRepository: HomeRepository) : ViewModel</p> <p>Home view model.</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepository HomeRepository."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/#constructors","title":"Constructors","text":"HomeViewModel [androidJvm]@Injectconstructor(homeRepository: HomeRepository)"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/#properties","title":"Properties","text":"Name Summary homeUiState [androidJvm]val homeUiState: StateFlow&lt;UiState&lt;HomeScreenData&gt;&gt;"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) deleteJetpack [androidJvm]fun deleteJetpack(jetpack: Jetpack) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? getJetpacks [androidJvm]fun getJetpacks()"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/-home-view-model/","title":"home view model","text":"<p>//home/dev.atick.feature.home.ui.home/HomeViewModel/HomeViewModel</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/-home-view-model/#homeviewmodel","title":"HomeViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(homeRepository: HomeRepository)</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/-home-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepository HomeRepository."},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/delete-jetpack/","title":"Delete jetpack","text":"<p>//home/dev.atick.feature.home.ui.home/HomeViewModel/deleteJetpack</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/delete-jetpack/#deletejetpack","title":"deleteJetpack","text":"<p>[androidJvm]\\ fun deleteJetpack(jetpack: Jetpack)</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/get-jetpacks/","title":"Get jetpacks","text":"<p>//home/dev.atick.feature.home.ui.home/HomeViewModel/getJetpacks</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/get-jetpacks/#getjetpacks","title":"getJetpacks","text":"<p>[androidJvm]\\ fun getJetpacks()</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/home-ui-state/","title":"Home ui state","text":"<p>//home/dev.atick.feature.home.ui.home/HomeViewModel/homeUiState</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.home/-home-view-model/home-ui-state/#homeuistate","title":"homeUiState","text":"<p>[androidJvm]\\ val homeUiState: StateFlow&lt;UiState&lt;HomeScreenData&gt;&gt;</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/","title":"Index","text":"<p>//home/dev.atick.feature.home.ui.item</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/home/home/dev.atick.feature.home.ui.item/#types","title":"Types","text":"Name Summary ItemScreenData [androidJvm]@Immutabledata class ItemScreenData(val jetpackId: String = UUID.randomUUID().toString(), val jetpackName: String = \"\", val jetpackPrice: Double = 0.0, val navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))Item screen data. ItemViewModel [androidJvm]class ItemViewModel@Injectconstructor(homeRepository: HomeRepository, savedStateHandle: SavedStateHandle) : ViewModelItem view model."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/","title":"Index","text":"<p>//home/dev.atick.feature.home.ui.item/ItemScreenData</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/#itemscreendata","title":"ItemScreenData","text":"<p>@Immutable</p> <p>data class ItemScreenData(val jetpackId: String = UUID.randomUUID().toString(), val jetpackName: String = \"\", val jetpackPrice: Double = 0.0, val navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))</p> <p>Item screen data.</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackId The jetpack ID. jetpackName The jetpack name. jetpackPrice The jetpack price. navigateBack The navigate back event."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/#constructors","title":"Constructors","text":"ItemScreenData [androidJvm]constructor(jetpackId: String = UUID.randomUUID().toString(), jetpackName: String = \"\", jetpackPrice: Double = 0.0, navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/#properties","title":"Properties","text":"Name Summary jetpackId [androidJvm]val jetpackId: String jetpackName [androidJvm]val jetpackName: String jetpackPrice [androidJvm]val jetpackPrice: Double = 0.0 navigateBack [androidJvm]val navigateBack: OneTimeEvent&lt;Boolean&gt;"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/-item-screen-data/","title":"item screen data","text":"<p>//home/dev.atick.feature.home.ui.item/ItemScreenData/ItemScreenData</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/-item-screen-data/#itemscreendata","title":"ItemScreenData","text":"<p>[androidJvm]\\ constructor(jetpackId: String = UUID.randomUUID().toString(), jetpackName: String = \"\", jetpackPrice: Double = 0.0, navigateBack: OneTimeEvent&lt;Boolean&gt; = OneTimeEvent(false))</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/-item-screen-data/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackId The jetpack ID. jetpackName The jetpack name. jetpackPrice The jetpack price. navigateBack The navigate back event."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-id/","title":"Jetpack id","text":"<p>//home/dev.atick.feature.home.ui.item/ItemScreenData/jetpackId</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-id/#jetpackid","title":"jetpackId","text":"<p>[androidJvm]\\ val jetpackId: String</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-id/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackId The jetpack ID."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-name/","title":"Jetpack name","text":"<p>//home/dev.atick.feature.home.ui.item/ItemScreenData/jetpackName</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-name/#jetpackname","title":"jetpackName","text":"<p>[androidJvm]\\ val jetpackName: String</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-name/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackName The jetpack name."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-price/","title":"Jetpack price","text":"<p>//home/dev.atick.feature.home.ui.item/ItemScreenData/jetpackPrice</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-price/#jetpackprice","title":"jetpackPrice","text":"<p>[androidJvm]\\ val jetpackPrice: Double = 0.0</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/jetpack-price/#parameters","title":"Parameters","text":"<p>androidJvm</p> jetpackPrice The jetpack price."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/navigate-back/","title":"Navigate back","text":"<p>//home/dev.atick.feature.home.ui.item/ItemScreenData/navigateBack</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/navigate-back/#navigateback","title":"navigateBack","text":"<p>[androidJvm]\\ val navigateBack: OneTimeEvent&lt;Boolean&gt;</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-screen-data/navigate-back/#parameters","title":"Parameters","text":"<p>androidJvm</p> navigateBack The navigate back event."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/","title":"Index","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/#itemviewmodel","title":"ItemViewModel","text":"<p>class ItemViewModel@Injectconstructor(homeRepository: HomeRepository, savedStateHandle: SavedStateHandle) : ViewModel</p> <p>Item view model.</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepository HomeRepository. savedStateHandle SavedStateHandle."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/#constructors","title":"Constructors","text":"ItemViewModel [androidJvm]@Injectconstructor(homeRepository: HomeRepository, savedStateHandle: SavedStateHandle)"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/#properties","title":"Properties","text":"Name Summary itemUiState [androidJvm]val itemUiState: StateFlow&lt;UiState&lt;ItemScreenData&gt;&gt;"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) createOrUpdateJetpack [androidJvm]fun createOrUpdateJetpack() getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? getJetpack [androidJvm]fun getJetpack() updateName [androidJvm]fun updateName(name: String) updatePrice [androidJvm]fun updatePrice(priceString: String)"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/-item-view-model/","title":"item view model","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel/ItemViewModel</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/-item-view-model/#itemviewmodel","title":"ItemViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(homeRepository: HomeRepository, savedStateHandle: SavedStateHandle)</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/-item-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> homeRepository HomeRepository. savedStateHandle SavedStateHandle."},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/create-or-update-jetpack/","title":"Create or update jetpack","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel/createOrUpdateJetpack</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/create-or-update-jetpack/#createorupdatejetpack","title":"createOrUpdateJetpack","text":"<p>[androidJvm]\\ fun createOrUpdateJetpack()</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/get-jetpack/","title":"Get jetpack","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel/getJetpack</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/get-jetpack/#getjetpack","title":"getJetpack","text":"<p>[androidJvm]\\ fun getJetpack()</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/item-ui-state/","title":"Item ui state","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel/itemUiState</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/item-ui-state/#itemuistate","title":"itemUiState","text":"<p>[androidJvm]\\ val itemUiState: StateFlow&lt;UiState&lt;ItemScreenData&gt;&gt;</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/update-name/","title":"Update name","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel/updateName</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/update-name/#updatename","title":"updateName","text":"<p>[androidJvm]\\ fun updateName(name: String)</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/update-price/","title":"Update price","text":"<p>//home/dev.atick.feature.home.ui.item/ItemViewModel/updatePrice</p>"},{"location":"feature/home/home/dev.atick.feature.home.ui.item/-item-view-model/update-price/#updateprice","title":"updatePrice","text":"<p>[androidJvm]\\ fun updatePrice(priceString: String)</p>"},{"location":"feature/profile/","title":"Index","text":"<p>//profile</p>"},{"location":"feature/profile/#profile","title":"profile","text":""},{"location":"feature/profile/#packages","title":"Packages","text":"Name dev.atick.feature.profile.navigation dev.atick.feature.profile.ui"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/","title":"Index","text":"<p>//profile/dev.atick.feature.profile.navigation</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/#types","title":"Types","text":"Name Summary Profile [androidJvm]@Serializabledata object ProfileSerializable data object representing the Profile."},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/#functions","title":"Functions","text":"Name Summary navigateToProfile [androidJvm]fun NavController.navigateToProfile(navOptions: NavOptions?)Extension function to navigate to the Profile screen. profileScreen [androidJvm]fun NavGraphBuilder.profileScreen(onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)Adds the Profile screen to the navigation graph."},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/navigate-to-profile/","title":"Navigate to profile","text":"<p>//profile/dev.atick.feature.profile.navigation/navigateToProfile</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/navigate-to-profile/#navigatetoprofile","title":"navigateToProfile","text":"<p>[androidJvm]\\ fun NavController.navigateToProfile(navOptions: NavOptions?)</p> <p>Extension function to navigate to the Profile screen.</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/navigate-to-profile/#parameters","title":"Parameters","text":"<p>androidJvm</p> navOptions Options to configure the navigation behavior."},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/profile-screen/","title":"Profile screen","text":"<p>//profile/dev.atick.feature.profile.navigation/profileScreen</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/profile-screen/#profilescreen","title":"profileScreen","text":"<p>[androidJvm]\\ fun NavGraphBuilder.profileScreen(onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean)</p> <p>Adds the Profile screen to the navigation graph.</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/profile-screen/#parameters","title":"Parameters","text":"<p>androidJvm</p> onShowSnackbar Lambda function to show a snackbar message."},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/-profile/","title":"Index","text":"<p>//profile/dev.atick.feature.profile.navigation/Profile</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.navigation/-profile/#profile","title":"Profile","text":"<p>[androidJvm]\\ @Serializable</p> <p>data object Profile</p> <p>Serializable data object representing the Profile.</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/","title":"Index","text":"<p>//profile/dev.atick.feature.profile.ui</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/#types","title":"Types","text":"Name Summary ProfileViewModel [androidJvm]class ProfileViewModel@Injectconstructor(profileRepository: ProfileRepository) : ViewModelViewModel for ProfileRoute."},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/#functions","title":"Functions","text":"Name Summary ProfileRoute [androidJvm]@Composablefun ProfileRoute(onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, profileViewModel: ProfileViewModel = hiltViewModel())Profile screen route."},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-route/","title":"profile route","text":"<p>//profile/dev.atick.feature.profile.ui/ProfileRoute</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-route/#profileroute","title":"ProfileRoute","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun ProfileRoute(onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, profileViewModel: ProfileViewModel = hiltViewModel())</p> <p>Profile screen route.</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-route/#parameters","title":"Parameters","text":"<p>androidJvm</p> onShowSnackbar Lambda function to show a snackbar message. profileViewModel ProfileViewModel."},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/","title":"Index","text":"<p>//profile/dev.atick.feature.profile.ui/ProfileViewModel</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/#profileviewmodel","title":"ProfileViewModel","text":"<p>class ProfileViewModel@Injectconstructor(profileRepository: ProfileRepository) : ViewModel</p> <p>ViewModel for ProfileRoute.</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> profileRepository ProfileRepository."},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/#constructors","title":"Constructors","text":"ProfileViewModel [androidJvm]@Injectconstructor(profileRepository: ProfileRepository)"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/#properties","title":"Properties","text":"Name Summary profileUiState [androidJvm]val profileUiState: StateFlow&lt;UiState&lt;Profile&gt;&gt;"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? signOut [androidJvm]fun signOut() updateProfileData [androidJvm]fun updateProfileData()"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/-profile-view-model/","title":"profile view model","text":"<p>//profile/dev.atick.feature.profile.ui/ProfileViewModel/ProfileViewModel</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/-profile-view-model/#profileviewmodel","title":"ProfileViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(profileRepository: ProfileRepository)</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/-profile-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> profileRepository ProfileRepository."},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/profile-ui-state/","title":"Profile ui state","text":"<p>//profile/dev.atick.feature.profile.ui/ProfileViewModel/profileUiState</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/profile-ui-state/#profileuistate","title":"profileUiState","text":"<p>[androidJvm]\\ val profileUiState: StateFlow&lt;UiState&lt;Profile&gt;&gt;</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/sign-out/","title":"Sign out","text":"<p>//profile/dev.atick.feature.profile.ui/ProfileViewModel/signOut</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ fun signOut()</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/update-profile-data/","title":"Update profile data","text":"<p>//profile/dev.atick.feature.profile.ui/ProfileViewModel/updateProfileData</p>"},{"location":"feature/profile/profile/dev.atick.feature.profile.ui/-profile-view-model/update-profile-data/#updateprofiledata","title":"updateProfileData","text":"<p>[androidJvm]\\ fun updateProfileData()</p>"},{"location":"feature/settings/","title":"Index","text":"<p>//settings</p>"},{"location":"feature/settings/#settings","title":"settings","text":""},{"location":"feature/settings/#packages","title":"Packages","text":"Name dev.atick.feature.settings.ui"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/","title":"Index","text":"<p>//settings/dev.atick.feature.settings.ui</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/#types","title":"Types","text":"Name Summary SettingsViewModel [androidJvm]class SettingsViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModelViewModel for SettingsScreen."},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/#functions","title":"Functions","text":"Name Summary SettingsDialog [androidJvm]@Composablefun SettingsDialog(onDismiss: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, settingsViewModel: SettingsViewModel = hiltViewModel())Settings dialog."},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-dialog/","title":"settings dialog","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsDialog</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-dialog/#settingsdialog","title":"SettingsDialog","text":"<p>[androidJvm]\\</p> <p>@Composable</p> <p>fun SettingsDialog(onDismiss: () -&gt; Unit, onShowSnackbar: suspend (String, SnackbarAction, Throwable?) -&gt; Boolean, settingsViewModel: SettingsViewModel = hiltViewModel())</p> <p>Settings dialog.</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-dialog/#parameters","title":"Parameters","text":"<p>androidJvm</p> onDismiss Callback when the dialog is dismissed. onShowSnackbar Callback to show a snackbar. settingsViewModel SettingsViewModel."},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/","title":"Index","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/#settingsviewmodel","title":"SettingsViewModel","text":"<p>class SettingsViewModel@Injectconstructor(settingsRepository: SettingsRepository) : ViewModel</p> <p>ViewModel for SettingsScreen.</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepository SettingsRepository."},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/#constructors","title":"Constructors","text":"SettingsViewModel [androidJvm]@Injectconstructor(settingsRepository: SettingsRepository)"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/#properties","title":"Properties","text":"Name Summary settingsUiState [androidJvm]val settingsUiState: StateFlow&lt;UiState&lt;Settings&gt;&gt;"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(closeable: AutoCloseable)fun addCloseable(key: String, closeable: AutoCloseable) getCloseable [androidJvm]fun &lt;T : AutoCloseable&gt; getCloseable(key: String): T? signOut [androidJvm]fun signOut() updateDarkThemeConfig [androidJvm]fun updateDarkThemeConfig(darkThemeConfig: DarkThemeConfig) updateDynamicColorPreference [androidJvm]fun updateDynamicColorPreference(useDynamicColor: Boolean) updateSettings [androidJvm]fun updateSettings()"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/-settings-view-model/","title":"settings view model","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel/SettingsViewModel</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/-settings-view-model/#settingsviewmodel","title":"SettingsViewModel","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(settingsRepository: SettingsRepository)</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/-settings-view-model/#parameters","title":"Parameters","text":"<p>androidJvm</p> settingsRepository SettingsRepository."},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/settings-ui-state/","title":"Settings ui state","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel/settingsUiState</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/settings-ui-state/#settingsuistate","title":"settingsUiState","text":"<p>[androidJvm]\\ val settingsUiState: StateFlow&lt;UiState&lt;Settings&gt;&gt;</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/sign-out/","title":"Sign out","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel/signOut</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ fun signOut()</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/update-dark-theme-config/","title":"Update dark theme config","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel/updateDarkThemeConfig</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/update-dark-theme-config/#updatedarkthemeconfig","title":"updateDarkThemeConfig","text":"<p>[androidJvm]\\ fun updateDarkThemeConfig(darkThemeConfig: DarkThemeConfig)</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/update-dynamic-color-preference/","title":"Update dynamic color preference","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel/updateDynamicColorPreference</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/update-dynamic-color-preference/#updatedynamiccolorpreference","title":"updateDynamicColorPreference","text":"<p>[androidJvm]\\ fun updateDynamicColorPreference(useDynamicColor: Boolean)</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/update-settings/","title":"Update settings","text":"<p>//settings/dev.atick.feature.settings.ui/SettingsViewModel/updateSettings</p>"},{"location":"feature/settings/settings/dev.atick.feature.settings.ui/-settings-view-model/update-settings/#updatesettings","title":"updateSettings","text":"<p>[androidJvm]\\ fun updateSettings()</p>"},{"location":"firebase/analytics/","title":"Index","text":"<p>//analytics</p>"},{"location":"firebase/analytics/#analytics","title":"analytics","text":""},{"location":"firebase/analytics/#packages","title":"Packages","text":"Name dev.atick.firebase.analytics.di dev.atick.firebase.analytics.utils"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/","title":"Index","text":"<p>//analytics/dev.atick.firebase.analytics.di</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/#types","title":"Types","text":"Name Summary CrashlyticsModule [androidJvm]@Moduleabstract class CrashlyticsModuleDagger module for providing CrashReporter implementation. FirebaseModule [androidJvm]@Moduleobject FirebaseModuleDagger module for providing Firebase Crashlytics instance."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/","title":"Index","text":"<p>//analytics/dev.atick.firebase.analytics.di/CrashlyticsModule</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/#crashlyticsmodule","title":"CrashlyticsModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class CrashlyticsModule</p> <p>Dagger module for providing CrashReporter implementation.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/#constructors","title":"Constructors","text":"CrashlyticsModule [androidJvm]constructor()"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/#functions","title":"Functions","text":"Name Summary bindCrashReporter [androidJvm]@Binds@Singletonabstract fun bindCrashReporter(firebaseCrashReporter: FirebaseCrashReporter): CrashReporterBinds the FirebaseCrashReporter implementation to the CrashReporter interface."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/-crashlytics-module/","title":"crashlytics module","text":"<p>//analytics/dev.atick.firebase.analytics.di/CrashlyticsModule/CrashlyticsModule</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/-crashlytics-module/#crashlyticsmodule","title":"CrashlyticsModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/bind-crash-reporter/","title":"Bind crash reporter","text":"<p>//analytics/dev.atick.firebase.analytics.di/CrashlyticsModule/bindCrashReporter</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/bind-crash-reporter/#bindcrashreporter","title":"bindCrashReporter","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindCrashReporter(firebaseCrashReporter: FirebaseCrashReporter): CrashReporter</p> <p>Binds the FirebaseCrashReporter implementation to the CrashReporter interface.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/bind-crash-reporter/#return","title":"Return","text":"<p>The bound CrashReporter instance.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-crashlytics-module/bind-crash-reporter/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseCrashReporter The FirebaseCrashReporter instance."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-firebase-module/","title":"Index","text":"<p>//analytics/dev.atick.firebase.analytics.di/FirebaseModule</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-firebase-module/#firebasemodule","title":"FirebaseModule","text":"<p>[androidJvm]\\ @Module</p> <p>object FirebaseModule</p> <p>Dagger module for providing Firebase Crashlytics instance.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-firebase-module/#functions","title":"Functions","text":"Name Summary provideFirebaseCrashlytics [androidJvm]@Provides@Singletonfun provideFirebaseCrashlytics(): FirebaseCrashlyticsProvides a singleton instance of FirebaseCrashlytics."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-firebase-module/provide-firebase-crashlytics/","title":"Provide firebase crashlytics","text":"<p>//analytics/dev.atick.firebase.analytics.di/FirebaseModule/provideFirebaseCrashlytics</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-firebase-module/provide-firebase-crashlytics/#providefirebasecrashlytics","title":"provideFirebaseCrashlytics","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideFirebaseCrashlytics(): FirebaseCrashlytics</p> <p>Provides a singleton instance of FirebaseCrashlytics.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.di/-firebase-module/provide-firebase-crashlytics/#return","title":"Return","text":"<p>FirebaseCrashlytics instance.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/","title":"Index","text":"<p>//analytics/dev.atick.firebase.analytics.utils</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/#types","title":"Types","text":"Name Summary CrashReporter [androidJvm]interface CrashReporterInterface for reporting exceptions. FirebaseCrashReporter [androidJvm]class FirebaseCrashReporter@Injectconstructor(crashlytics: FirebaseCrashlytics) : CrashReporterImplementation of CrashReporter that uses Firebase Crashlytics."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/","title":"Index","text":"<p>//analytics/dev.atick.firebase.analytics.utils/CrashReporter</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/#crashreporter","title":"CrashReporter","text":"<p>interface CrashReporter</p> <p>Interface for reporting exceptions.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/#inheritors","title":"Inheritors","text":"FirebaseCrashReporter"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/#functions","title":"Functions","text":"Name Summary reportException [androidJvm]abstract fun reportException(throwable: Throwable)Reports an exception."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/report-exception/","title":"Report exception","text":"<p>//analytics/dev.atick.firebase.analytics.utils/CrashReporter/reportException</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/report-exception/#reportexception","title":"reportException","text":"<p>[androidJvm]\\ abstract fun reportException(throwable: Throwable)</p> <p>Reports an exception.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-crash-reporter/report-exception/#parameters","title":"Parameters","text":"<p>androidJvm</p> throwable The exception to be reported."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/","title":"Index","text":"<p>//analytics/dev.atick.firebase.analytics.utils/FirebaseCrashReporter</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/#firebasecrashreporter","title":"FirebaseCrashReporter","text":"<p>[androidJvm]\\ class FirebaseCrashReporter@Injectconstructor(crashlytics: FirebaseCrashlytics) : CrashReporter</p> <p>Implementation of CrashReporter that uses Firebase Crashlytics.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/#constructors","title":"Constructors","text":"FirebaseCrashReporter [androidJvm]@Injectconstructor(crashlytics: FirebaseCrashlytics)"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/#functions","title":"Functions","text":"Name Summary reportException [androidJvm]open override fun reportException(throwable: Throwable)Reports an exception to Firebase Crashlytics."},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/-firebase-crash-reporter/","title":"firebase crash reporter","text":"<p>//analytics/dev.atick.firebase.analytics.utils/FirebaseCrashReporter/FirebaseCrashReporter</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/-firebase-crash-reporter/#firebasecrashreporter","title":"FirebaseCrashReporter","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(crashlytics: FirebaseCrashlytics)</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/report-exception/","title":"Report exception","text":"<p>//analytics/dev.atick.firebase.analytics.utils/FirebaseCrashReporter/reportException</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/report-exception/#reportexception","title":"reportException","text":"<p>[androidJvm]\\ open override fun reportException(throwable: Throwable)</p> <p>Reports an exception to Firebase Crashlytics.</p>"},{"location":"firebase/analytics/analytics/dev.atick.firebase.analytics.utils/-firebase-crash-reporter/report-exception/#parameters","title":"Parameters","text":"<p>androidJvm</p> throwable The exception to be reported."},{"location":"firebase/auth/","title":"Index","text":"<p>//auth</p>"},{"location":"firebase/auth/#auth","title":"auth","text":""},{"location":"firebase/auth/#packages","title":"Packages","text":"Name dev.atick.firebase.auth.config dev.atick.firebase.auth.data dev.atick.firebase.auth.di dev.atick.firebase.auth.models"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.config</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/#types","title":"Types","text":"Name Summary Config [androidJvm]object ConfigConfiguration object containing constants and values used in the application."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/-config/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.config/Config</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/-config/#config","title":"Config","text":"<p>[androidJvm]\\ object Config</p> <p>Configuration object containing constants and values used in the application.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/-config/#properties","title":"Properties","text":"Name Summary WEB_CLIENT_ID [androidJvm]const val WEB_CLIENT_ID: StringThe Web Client ID used for Google Sign-In authentication. This identifier is associated with your application and is used to authenticate with Google services. Ensure that it is properly configured and secured in the Google Developer Console."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/-config/-w-e-b_-c-l-i-e-n-t_-i-d/","title":"w e b  c l i e n t  i d","text":"<p>//auth/dev.atick.firebase.auth.config/Config/WEB_CLIENT_ID</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.config/-config/-w-e-b_-c-l-i-e-n-t_-i-d/#web_client_id","title":"WEB_CLIENT_ID","text":"<p>[androidJvm]\\ const val WEB_CLIENT_ID: String</p> <p>The Web Client ID used for Google Sign-In authentication. This identifier is associated with your application and is used to authenticate with Google services. Ensure that it is properly configured and secured in the Google Developer Console.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.data</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/#types","title":"Types","text":"Name Summary AuthDataSource [androidJvm]interface AuthDataSourceInterface defining data source operations for authentication. AuthDataSourceImpl [androidJvm]class AuthDataSourceImpl@Injectconstructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher) : AuthDataSourceImplementation of the AuthDataSource interface responsible for handling authentication data operations."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/#authdatasource","title":"AuthDataSource","text":"<p>interface AuthDataSource</p> <p>Interface defining data source operations for authentication.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/#inheritors","title":"Inheritors","text":"AuthDataSourceImpl"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/#properties","title":"Properties","text":"Name Summary currentUser [androidJvm]abstract val currentUser: AuthUser?Gets the currently authenticated user, if any."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUserRegister a new user with an email and password. registerWithGoogle [androidJvm]abstract suspend fun registerWithGoogle(activity: Activity): AuthUserRegister a new user with Google. signInWithEmailAndPassword [androidJvm]abstract suspend fun signInWithEmailAndPassword(email: String, password: String): AuthUserSign in with an email and password. signInWithGoogle [androidJvm]abstract suspend fun signInWithGoogle(activity: Activity): AuthUserSign in with a Google account. signInWithSavedCredentials [androidJvm]abstract suspend fun signInWithSavedCredentials(activity: Activity): AuthUserLook for saved credentials. signOut [androidJvm]abstract suspend fun signOut()Sign out the currently authenticated user."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/current-user/","title":"Current user","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/currentUser</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/current-user/#currentuser","title":"currentUser","text":"<p>[androidJvm]\\ abstract val currentUser: AuthUser?</p> <p>Gets the currently authenticated user, if any.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/current-user/#return","title":"Return","text":"<p>The currently authenticated AuthUser, or null if not signed in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/registerWithEmailAndPassword</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUser</p> <p>Register a new user with an email and password.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password. activity The activity instance."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/registerWithGoogle</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun registerWithGoogle(activity: Activity): AuthUser</p> <p>Register a new user with Google.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/signInWithEmailAndPassword</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ abstract suspend fun signInWithEmailAndPassword(email: String, password: String): AuthUser</p> <p>Sign in with an email and password.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/signInWithGoogle</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ abstract suspend fun signInWithGoogle(activity: Activity): AuthUser</p> <p>Sign in with a Google account.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/signInWithSavedCredentials</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ abstract suspend fun signInWithSavedCredentials(activity: Activity): AuthUser</p> <p>Look for saved credentials.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-out/","title":"Sign out","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSource/signOut</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ abstract suspend fun signOut()</p> <p>Sign out the currently authenticated user.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/#authdatasourceimpl","title":"AuthDataSourceImpl","text":"<p>class AuthDataSourceImpl@Injectconstructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher) : AuthDataSource</p> <p>Implementation of the AuthDataSource interface responsible for handling authentication data operations.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseAuth The Firebase Authentication instance for performing authentication operations. credentialManager The CredentialManager for handling credential operations. ioDispatcher The CoroutineDispatcher for executing suspend functions in an IO context."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/#constructors","title":"Constructors","text":"AuthDataSourceImpl [androidJvm]@Injectconstructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher)"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/#properties","title":"Properties","text":"Name Summary currentUser [androidJvm]open override val currentUser: AuthUser?Gets the currently authenticated user, if any."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/#functions","title":"Functions","text":"Name Summary registerWithEmailAndPassword [androidJvm]open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUserRegister a new user with an email and password. registerWithGoogle [androidJvm]open suspend override fun registerWithGoogle(activity: Activity): AuthUserRegister with Google. signInWithEmailAndPassword [androidJvm]open suspend override fun signInWithEmailAndPassword(email: String, password: String): AuthUserSign in with an email and password. signInWithGoogle [androidJvm]open suspend override fun signInWithGoogle(activity: Activity): AuthUserSign in with Google. signInWithSavedCredentials [androidJvm]open suspend override fun signInWithSavedCredentials(activity: Activity): AuthUserLook for saved credentials. signOut [androidJvm]open suspend override fun signOut()Sign out the currently authenticated user."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/-auth-data-source-impl/","title":"auth data source impl","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/AuthDataSourceImpl</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/-auth-data-source-impl/#authdatasourceimpl","title":"AuthDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(firebaseAuth: FirebaseAuth, credentialManager: CredentialManager, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/-auth-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseAuth The Firebase Authentication instance for performing authentication operations. credentialManager The CredentialManager for handling credential operations. ioDispatcher The CoroutineDispatcher for executing suspend functions in an IO context."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/current-user/","title":"Current user","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/currentUser</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/current-user/#currentuser","title":"currentUser","text":"<p>[androidJvm]\\ open override val currentUser: AuthUser?</p> <p>Gets the currently authenticated user, if any.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/current-user/#return","title":"Return","text":"<p>The currently authenticated AuthUser, or null if not signed in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-email-and-password/","title":"Register with email and password","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/registerWithEmailAndPassword</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-email-and-password/#registerwithemailandpassword","title":"registerWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun registerWithEmailAndPassword(name: String, email: String, password: String, activity: Activity): AuthUser</p> <p>Register a new user with an email and password.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> name The user's name. email The user's email address. password The user's password. activity The activity instance."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-google/","title":"Register with google","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/registerWithGoogle</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-google/#registerwithgoogle","title":"registerWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun registerWithGoogle(activity: Activity): AuthUser</p> <p>Register with Google.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful registration.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/register-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity context."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/","title":"Sign in with email and password","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/signInWithEmailAndPassword</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/#signinwithemailandpassword","title":"signInWithEmailAndPassword","text":"<p>[androidJvm]\\ open suspend override fun signInWithEmailAndPassword(email: String, password: String): AuthUser</p> <p>Sign in with an email and password.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-email-and-password/#parameters","title":"Parameters","text":"<p>androidJvm</p> email The user's email address. password The user's password."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-google/","title":"Sign in with google","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/signInWithGoogle</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-google/#signinwithgoogle","title":"signInWithGoogle","text":"<p>[androidJvm]\\ open suspend override fun signInWithGoogle(activity: Activity): AuthUser</p> <p>Sign in with Google.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-google/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-google/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity context."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/","title":"Sign in with saved credentials","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/signInWithSavedCredentials</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/#signinwithsavedcredentials","title":"signInWithSavedCredentials","text":"<p>[androidJvm]\\ open suspend override fun signInWithSavedCredentials(activity: Activity): AuthUser</p> <p>Look for saved credentials.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/#return","title":"Return","text":"<p>The authenticated AuthUser upon successful sign-in.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-in-with-saved-credentials/#parameters","title":"Parameters","text":"<p>androidJvm</p> activity The activity instance."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-out/","title":"Sign out","text":"<p>//auth/dev.atick.firebase.auth.data/AuthDataSourceImpl/signOut</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.data/-auth-data-source-impl/sign-out/#signout","title":"signOut","text":"<p>[androidJvm]\\ open suspend override fun signOut()</p> <p>Sign out the currently authenticated user.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.di</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/#types","title":"Types","text":"Name Summary CredentialManagerModule [androidJvm]@Moduleobject CredentialManagerModuleDagger module for providing CredentialManager instance. DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger Hilt module for providing data source dependencies. FirebaseAuthModule [androidJvm]@Moduleobject FirebaseAuthModuleDagger Hilt module for providing Firebase Authentication-related dependencies."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.di/CredentialManagerModule</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/#credentialmanagermodule","title":"CredentialManagerModule","text":"<p>[androidJvm]\\ @Module</p> <p>object CredentialManagerModule</p> <p>Dagger module for providing CredentialManager instance.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/#functions","title":"Functions","text":"Name Summary provideCredentialManager [androidJvm]@Provides@Singletonfun provideCredentialManager(context: Context): CredentialManagerProvides a singleton instance of CredentialManager."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/provide-credential-manager/","title":"Provide credential manager","text":"<p>//auth/dev.atick.firebase.auth.di/CredentialManagerModule/provideCredentialManager</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/provide-credential-manager/#providecredentialmanager","title":"provideCredentialManager","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideCredentialManager(context: Context): CredentialManager</p> <p>Provides a singleton instance of CredentialManager.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/provide-credential-manager/#return","title":"Return","text":"<p>CredentialManager instance.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-credential-manager-module/provide-credential-manager/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.di/DataSourceModule</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger Hilt module for providing data source dependencies.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindAuthDataSource [androidJvm]@Binds@Singletonabstract fun bindAuthDataSource(authDataSourceImpl: AuthDataSourceImpl): AuthDataSourceBinds the AuthDataSourceImpl implementation to the AuthDataSource interface."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//auth/dev.atick.firebase.auth.di/DataSourceModule/DataSourceModule</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/bind-auth-data-source/","title":"Bind auth data source","text":"<p>//auth/dev.atick.firebase.auth.di/DataSourceModule/bindAuthDataSource</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/bind-auth-data-source/#bindauthdatasource","title":"bindAuthDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindAuthDataSource(authDataSourceImpl: AuthDataSourceImpl): AuthDataSource</p> <p>Binds the AuthDataSourceImpl implementation to the AuthDataSource interface.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/bind-auth-data-source/#return","title":"Return","text":"<p>An instance of AuthDataSource for dependency injection.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-data-source-module/bind-auth-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> authDataSourceImpl The implementation of AuthDataSource to be bound."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-firebase-auth-module/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.di/FirebaseAuthModule</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-firebase-auth-module/#firebaseauthmodule","title":"FirebaseAuthModule","text":"<p>[androidJvm]\\ @Module</p> <p>object FirebaseAuthModule</p> <p>Dagger Hilt module for providing Firebase Authentication-related dependencies.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-firebase-auth-module/#functions","title":"Functions","text":"Name Summary provideFirebaseAuth [androidJvm]@Provides@Singletonfun provideFirebaseAuth(): FirebaseAuthProvides a singleton instance of FirebaseAuth."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-firebase-auth-module/provide-firebase-auth/","title":"Provide firebase auth","text":"<p>//auth/dev.atick.firebase.auth.di/FirebaseAuthModule/provideFirebaseAuth</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-firebase-auth-module/provide-firebase-auth/#providefirebaseauth","title":"provideFirebaseAuth","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideFirebaseAuth(): FirebaseAuth</p> <p>Provides a singleton instance of FirebaseAuth.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.di/-firebase-auth-module/provide-firebase-auth/#return","title":"Return","text":"<p>An instance of FirebaseAuth for authentication operations.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.models</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/#types","title":"Types","text":"Name Summary AuthUser [androidJvm]data class AuthUser(val id: String, val name: String, val profilePictureUri: Uri?)Represents an authenticated user with basic information."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/#functions","title":"Functions","text":"Name Summary asAuthUser [androidJvm]fun FirebaseUser.asAuthUser(): AuthUserConverts a Firebase user object to an AuthUser object."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/as-auth-user/","title":"As auth user","text":"<p>//auth/dev.atick.firebase.auth.models/asAuthUser</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/as-auth-user/#asauthuser","title":"asAuthUser","text":"<p>[androidJvm]\\ fun FirebaseUser.asAuthUser(): AuthUser</p> <p>Converts a Firebase user object to an AuthUser object.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/as-auth-user/#return","title":"Return","text":"<p>The corresponding AuthUser object.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/","title":"Index","text":"<p>//auth/dev.atick.firebase.auth.models/AuthUser</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/#authuser","title":"AuthUser","text":"<p>[androidJvm]\\ data class AuthUser(val id: String, val name: String, val profilePictureUri: Uri?)</p> <p>Represents an authenticated user with basic information.</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/#constructors","title":"Constructors","text":"AuthUser [androidJvm]constructor(id: String, name: String, profilePictureUri: Uri?)"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/#properties","title":"Properties","text":"Name Summary id [androidJvm]val id: StringThe unique identifier for the user. name [androidJvm]val name: StringThe user's name. profilePictureUri [androidJvm]val profilePictureUri: Uri?The URI for the user's profile picture, or null if not available."},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/-auth-user/","title":"auth user","text":"<p>//auth/dev.atick.firebase.auth.models/AuthUser/AuthUser</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/-auth-user/#authuser","title":"AuthUser","text":"<p>[androidJvm]\\ constructor(id: String, name: String, profilePictureUri: Uri?)</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/id/","title":"Id","text":"<p>//auth/dev.atick.firebase.auth.models/AuthUser/id</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/name/","title":"Name","text":"<p>//auth/dev.atick.firebase.auth.models/AuthUser/name</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/profile-picture-uri/","title":"Profile picture uri","text":"<p>//auth/dev.atick.firebase.auth.models/AuthUser/profilePictureUri</p>"},{"location":"firebase/auth/auth/dev.atick.firebase.auth.models/-auth-user/profile-picture-uri/#profilepictureuri","title":"profilePictureUri","text":"<p>[androidJvm]\\ val profilePictureUri: Uri?</p>"},{"location":"firebase/firestore/","title":"Index","text":"<p>//firestore</p>"},{"location":"firebase/firestore/#firestore","title":"firestore","text":""},{"location":"firebase/firestore/#packages","title":"Packages","text":"Name dev.atick.firebase.firestore.data dev.atick.firebase.firestore.di dev.atick.firebase.firestore.models"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.data</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/#types","title":"Types","text":"Name Summary FirebaseDataSource [androidJvm]interface FirebaseDataSourceInterface for Firebase data source operations. FirebaseDataSourceImpl [androidJvm]class FirebaseDataSourceImpl@Injectconstructor(firestore: FirebaseFirestore, ioDispatcher: CoroutineDispatcher) : FirebaseDataSourceImplementation of FirebaseDataSource."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/#firebasedatasource","title":"FirebaseDataSource","text":"<p>interface FirebaseDataSource</p> <p>Interface for Firebase data source operations.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/#inheritors","title":"Inheritors","text":"FirebaseDataSourceImpl"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/#functions","title":"Functions","text":"Name Summary create [androidJvm]abstract suspend fun create(firebaseJetpack: FirebaseJetpack)Creates a new FirebaseJetpack object in the database. createOrUpdate [androidJvm]abstract suspend fun createOrUpdate(firebaseJetpack: FirebaseJetpack)Creates or updates a FirebaseJetpack object in the database. delete [androidJvm]abstract suspend fun delete(firebaseJetpack: FirebaseJetpack)Deletes a FirebaseJetpack object from the database. pull [androidJvm]abstract suspend fun pull(userId: String, lastSynced: Long): List&lt;FirebaseJetpack&gt;Pulls a list of FirebaseJetpack objects that have been updated since the last sync."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/create-or-update/","title":"Create or update","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/createOrUpdate</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/create-or-update/#createorupdate","title":"createOrUpdate","text":"<p>[androidJvm]\\ abstract suspend fun createOrUpdate(firebaseJetpack: FirebaseJetpack)</p> <p>Creates or updates a FirebaseJetpack object in the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/create-or-update/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseJetpack The FirebaseJetpack object to create or update."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/create/","title":"Create","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/create</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/create/#create","title":"create","text":"<p>[androidJvm]\\ abstract suspend fun create(firebaseJetpack: FirebaseJetpack)</p> <p>Creates a new FirebaseJetpack object in the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/create/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseJetpack The FirebaseJetpack object to create."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/delete/","title":"Delete","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/delete</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/delete/#delete","title":"delete","text":"<p>[androidJvm]\\ abstract suspend fun delete(firebaseJetpack: FirebaseJetpack)</p> <p>Deletes a FirebaseJetpack object from the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/delete/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseJetpack The FirebaseJetpack object to delete."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/pull/","title":"Pull","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/pull</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/pull/#pull","title":"pull","text":"<p>[androidJvm]\\ abstract suspend fun pull(userId: String, lastSynced: Long): List&lt;FirebaseJetpack&gt;</p> <p>Pulls a list of FirebaseJetpack objects that have been updated since the last sync.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/pull/#return","title":"Return","text":"<p>A list of FirebaseJetpack objects.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/pull/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The unique identifier of the user. lastSynced The timestamp of the last sync."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/Companion</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/#properties","title":"Properties","text":"Name Summary COLLECTION_NAME [androidJvm]const val COLLECTION_NAME: StringThe name of the collection. DATABASE_NAME [androidJvm]const val DATABASE_NAME: StringThe name of the database."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/-c-o-l-l-e-c-t-i-o-n_-n-a-m-e/","title":"c o l l e c t i o n  n a m e","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/Companion/COLLECTION_NAME</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/-c-o-l-l-e-c-t-i-o-n_-n-a-m-e/#collection_name","title":"COLLECTION_NAME","text":"<p>[androidJvm]\\ const val COLLECTION_NAME: String</p> <p>The name of the collection.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/-d-a-t-a-b-a-s-e_-n-a-m-e/","title":"d a t a b a s e  n a m e","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSource/Companion/DATABASE_NAME</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source/-companion/-d-a-t-a-b-a-s-e_-n-a-m-e/#database_name","title":"DATABASE_NAME","text":"<p>[androidJvm]\\ const val DATABASE_NAME: String</p> <p>The name of the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSourceImpl</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/#firebasedatasourceimpl","title":"FirebaseDataSourceImpl","text":"<p>class FirebaseDataSourceImpl@Injectconstructor(firestore: FirebaseFirestore, ioDispatcher: CoroutineDispatcher) : FirebaseDataSource</p> <p>Implementation of FirebaseDataSource.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> firestore FirebaseFirestore. ioDispatcher CoroutineDispatcher."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/#constructors","title":"Constructors","text":"FirebaseDataSourceImpl [androidJvm]@Injectconstructor(firestore: FirebaseFirestore, ioDispatcher: CoroutineDispatcher)"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/#functions","title":"Functions","text":"Name Summary create [androidJvm]open suspend override fun create(firebaseJetpack: FirebaseJetpack)Creates a new FirebaseJetpack object in the database. createOrUpdate [androidJvm]open suspend override fun createOrUpdate(firebaseJetpack: FirebaseJetpack)Creates or updates a FirebaseJetpack object in the database. delete [androidJvm]open suspend override fun delete(firebaseJetpack: FirebaseJetpack)Deletes a FirebaseJetpack object from the database. pull [androidJvm]open suspend override fun pull(userId: String, lastSynced: Long): List&lt;FirebaseJetpack&gt;Pulls a list of FirebaseJetpack objects that have been updated since the last sync."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/-firebase-data-source-impl/","title":"firebase data source impl","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSourceImpl/FirebaseDataSourceImpl</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/-firebase-data-source-impl/#firebasedatasourceimpl","title":"FirebaseDataSourceImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(firestore: FirebaseFirestore, ioDispatcher: CoroutineDispatcher)</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/-firebase-data-source-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> firestore FirebaseFirestore. ioDispatcher CoroutineDispatcher."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/create-or-update/","title":"Create or update","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSourceImpl/createOrUpdate</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/create-or-update/#createorupdate","title":"createOrUpdate","text":"<p>[androidJvm]\\ open suspend override fun createOrUpdate(firebaseJetpack: FirebaseJetpack)</p> <p>Creates or updates a FirebaseJetpack object in the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/create-or-update/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseJetpack The FirebaseJetpack object to create or update."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/create/","title":"Create","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSourceImpl/create</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/create/#create","title":"create","text":"<p>[androidJvm]\\ open suspend override fun create(firebaseJetpack: FirebaseJetpack)</p> <p>Creates a new FirebaseJetpack object in the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/create/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseJetpack The FirebaseJetpack object to create."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/delete/","title":"Delete","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSourceImpl/delete</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/delete/#delete","title":"delete","text":"<p>[androidJvm]\\ open suspend override fun delete(firebaseJetpack: FirebaseJetpack)</p> <p>Deletes a FirebaseJetpack object from the database.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/delete/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseJetpack The FirebaseJetpack object to delete."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/pull/","title":"Pull","text":"<p>//firestore/dev.atick.firebase.firestore.data/FirebaseDataSourceImpl/pull</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/pull/#pull","title":"pull","text":"<p>[androidJvm]\\ open suspend override fun pull(userId: String, lastSynced: Long): List&lt;FirebaseJetpack&gt;</p> <p>Pulls a list of FirebaseJetpack objects that have been updated since the last sync.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/pull/#return","title":"Return","text":"<p>A list of FirebaseJetpack objects.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.data/-firebase-data-source-impl/pull/#parameters","title":"Parameters","text":"<p>androidJvm</p> userId The unique identifier of the user. lastSynced The timestamp of the last sync."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.di</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/#types","title":"Types","text":"Name Summary DataSourceModule [androidJvm]@Moduleabstract class DataSourceModuleDagger module to provide Firebase data source dependencies. FirebaseModule [androidJvm]@Moduleobject FirebaseModuleModule for providing Firebase components."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.di/DataSourceModule</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class DataSourceModule</p> <p>Dagger module to provide Firebase data source dependencies.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/#constructors","title":"Constructors","text":"DataSourceModule [androidJvm]constructor()"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/#functions","title":"Functions","text":"Name Summary bindFirebaseDataSource [androidJvm]@Binds@Singletonabstract fun bindFirebaseDataSource(firebaseDataSourceImpl: FirebaseDataSourceImpl): FirebaseDataSourceBinds the implementation of FirebaseDataSource to FirebaseDataSourceImpl."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/-data-source-module/","title":"data source module","text":"<p>//firestore/dev.atick.firebase.firestore.di/DataSourceModule/DataSourceModule</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/-data-source-module/#datasourcemodule","title":"DataSourceModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/bind-firebase-data-source/","title":"Bind firebase data source","text":"<p>//firestore/dev.atick.firebase.firestore.di/DataSourceModule/bindFirebaseDataSource</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/bind-firebase-data-source/#bindfirebasedatasource","title":"bindFirebaseDataSource","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindFirebaseDataSource(firebaseDataSourceImpl: FirebaseDataSourceImpl): FirebaseDataSource</p> <p>Binds the implementation of FirebaseDataSource to FirebaseDataSourceImpl.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/bind-firebase-data-source/#return","title":"Return","text":"<p>The bound FirebaseDataSource instance.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-data-source-module/bind-firebase-data-source/#parameters","title":"Parameters","text":"<p>androidJvm</p> firebaseDataSourceImpl The implementation of FirebaseDataSource."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-firebase-module/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.di/FirebaseModule</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-firebase-module/#firebasemodule","title":"FirebaseModule","text":"<p>[androidJvm]\\ @Module</p> <p>object FirebaseModule</p> <p>Module for providing Firebase components.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-firebase-module/#functions","title":"Functions","text":"Name Summary provideFirebaseFirestore [androidJvm]@Provides@Singletonfun provideFirebaseFirestore(): FirebaseFirestoreProvides a singleton instance of FirebaseFirestore."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-firebase-module/provide-firebase-firestore/","title":"Provide firebase firestore","text":"<p>//firestore/dev.atick.firebase.firestore.di/FirebaseModule/provideFirebaseFirestore</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-firebase-module/provide-firebase-firestore/#providefirebasefirestore","title":"provideFirebaseFirestore","text":"<p>[androidJvm]\\</p> <p>@Provides</p> <p>@Singleton</p> <p>fun provideFirebaseFirestore(): FirebaseFirestore</p> <p>Provides a singleton instance of FirebaseFirestore.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.di/-firebase-module/provide-firebase-firestore/#return","title":"Return","text":"<p>A FirebaseFirestore instance.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.models</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/#types","title":"Types","text":"Name Summary FirebaseJetpack [androidJvm]@Serializabledata class FirebaseJetpack(val id: String = UUID.randomUUID().toString(), val name: String = String(), val price: Double = 0.0, val userId: String = String(), val lastUpdated: Long = 0, val lastSynced: Long = 0, val deleted: Boolean = false)Represents a Jetpack stored in Firebase."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/","title":"Index","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/#firebasejetpack","title":"FirebaseJetpack","text":"<p>[androidJvm]\\ @Serializable</p> <p>data class FirebaseJetpack(val id: String = UUID.randomUUID().toString(), val name: String = String(), val price: Double = 0.0, val userId: String = String(), val lastUpdated: Long = 0, val lastSynced: Long = 0, val deleted: Boolean = false)</p> <p>Represents a Jetpack stored in Firebase.</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/#constructors","title":"Constructors","text":"FirebaseJetpack [androidJvm]constructor(id: String = UUID.randomUUID().toString(), name: String = String(), price: Double = 0.0, userId: String = String(), lastUpdated: Long = 0, lastSynced: Long = 0, deleted: Boolean = false)"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/#properties","title":"Properties","text":"Name Summary deleted [androidJvm]val deleted: Boolean = falseFlag indicating if the Jetpack is marked for deletion (soft delete). Defaults to false. id [androidJvm]val id: StringUnique identifier of the Jetpack. lastSynced [androidJvm]val lastSynced: Long = 0Timestamp (milliseconds) of last sync. Defaults to 0L. lastUpdated [androidJvm]val lastUpdated: Long = 0Timestamp (milliseconds) of last modification. Defaults to 0L. name [androidJvm]val name: StringJetpack's name. price [androidJvm]val price: Double = 0.0Jetpack's price. userId [androidJvm]val userId: StringUser's unique identifier. Defaults to an empty string."},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/-firebase-jetpack/","title":"firebase jetpack","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/FirebaseJetpack</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/-firebase-jetpack/#firebasejetpack","title":"FirebaseJetpack","text":"<p>[androidJvm]\\ constructor(id: String = UUID.randomUUID().toString(), name: String = String(), price: Double = 0.0, userId: String = String(), lastUpdated: Long = 0, lastSynced: Long = 0, deleted: Boolean = false)</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/deleted/","title":"Deleted","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/deleted</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/deleted/#deleted","title":"deleted","text":"<p>[androidJvm]\\ val deleted: Boolean = false</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/id/","title":"Id","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/id</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/id/#id","title":"id","text":"<p>[androidJvm]\\ val id: String</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/last-synced/","title":"Last synced","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/lastSynced</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/last-synced/#lastsynced","title":"lastSynced","text":"<p>[androidJvm]\\ val lastSynced: Long = 0</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/last-updated/","title":"Last updated","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/lastUpdated</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/last-updated/#lastupdated","title":"lastUpdated","text":"<p>[androidJvm]\\ val lastUpdated: Long = 0</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/name/","title":"Name","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/name</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/name/#name","title":"name","text":"<p>[androidJvm]\\ val name: String</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/price/","title":"Price","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/price</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/price/#price","title":"price","text":"<p>[androidJvm]\\ val price: Double = 0.0</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/user-id/","title":"User id","text":"<p>//firestore/dev.atick.firebase.firestore.models/FirebaseJetpack/userId</p>"},{"location":"firebase/firestore/firestore/dev.atick.firebase.firestore.models/-firebase-jetpack/user-id/#userid","title":"userId","text":"<p>[androidJvm]\\ val userId: String</p>"},{"location":"sync/","title":"Index","text":"<p>//sync</p>"},{"location":"sync/#sync","title":"sync","text":""},{"location":"sync/#packages","title":"Packages","text":"Name dev.atick.sync.di dev.atick.sync.extensions dev.atick.sync.manager dev.atick.sync.worker"},{"location":"sync/sync/dev.atick.sync.di/","title":"Index","text":"<p>//sync/dev.atick.sync.di</p>"},{"location":"sync/sync/dev.atick.sync.di/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sync/sync/dev.atick.sync.di/#types","title":"Types","text":"Name Summary SyncModule [androidJvm]@Moduleabstract class SyncModuleDagger module for providing synchronization-related dependencies."},{"location":"sync/sync/dev.atick.sync.di/-sync-module/","title":"Index","text":"<p>//sync/dev.atick.sync.di/SyncModule</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/#syncmodule","title":"SyncModule","text":"<p>[androidJvm]\\ @Module</p> <p>abstract class SyncModule</p> <p>Dagger module for providing synchronization-related dependencies.</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/#constructors","title":"Constructors","text":"SyncModule [androidJvm]constructor()"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/#functions","title":"Functions","text":"Name Summary bindSyncManager [androidJvm]@Binds@Singletonabstract fun bindSyncManager(syncManager: SyncManagerImpl): SyncManagerBinds the implementation of SyncManager to SyncManagerImpl."},{"location":"sync/sync/dev.atick.sync.di/-sync-module/-sync-module/","title":"sync module","text":"<p>//sync/dev.atick.sync.di/SyncModule/SyncModule</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/-sync-module/#syncmodule","title":"SyncModule","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/bind-sync-manager/","title":"Bind sync manager","text":"<p>//sync/dev.atick.sync.di/SyncModule/bindSyncManager</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/bind-sync-manager/#bindsyncmanager","title":"bindSyncManager","text":"<p>[androidJvm]\\</p> <p>@Binds</p> <p>@Singleton</p> <p>abstract fun bindSyncManager(syncManager: SyncManagerImpl): SyncManager</p> <p>Binds the implementation of SyncManager to SyncManagerImpl.</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/bind-sync-manager/#return","title":"Return","text":"<p>The bound SyncManager instance.</p>"},{"location":"sync/sync/dev.atick.sync.di/-sync-module/bind-sync-manager/#parameters","title":"Parameters","text":"<p>androidJvm</p> syncManager The implementation of SyncManager."},{"location":"sync/sync/dev.atick.sync.extensions/","title":"Index","text":"<p>//sync/dev.atick.sync.extensions</p>"},{"location":"sync/sync/dev.atick.sync.extensions/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sync/sync/dev.atick.sync.extensions/#functions","title":"Functions","text":"Name Summary syncForegroundInfo [androidJvm]fun Context.syncForegroundInfo(total: Int, current: Int): ForegroundInfoForeground information for sync on lower API levels when sync workers are being run with a foreground service"},{"location":"sync/sync/dev.atick.sync.extensions/sync-foreground-info/","title":"Sync foreground info","text":"<p>//sync/dev.atick.sync.extensions/syncForegroundInfo</p>"},{"location":"sync/sync/dev.atick.sync.extensions/sync-foreground-info/#syncforegroundinfo","title":"syncForegroundInfo","text":"<p>[androidJvm]\\ fun Context.syncForegroundInfo(total: Int, current: Int): ForegroundInfo</p> <p>Foreground information for sync on lower API levels when sync workers are being run with a foreground service</p>"},{"location":"sync/sync/dev.atick.sync.extensions/sync-foreground-info/#return","title":"Return","text":"<p>The foreground information for the sync work.</p>"},{"location":"sync/sync/dev.atick.sync.extensions/sync-foreground-info/#parameters","title":"Parameters","text":"<p>androidJvm</p> total The total number of items. current The current number of items."},{"location":"sync/sync/dev.atick.sync.manager/","title":"Index","text":"<p>//sync/dev.atick.sync.manager</p>"},{"location":"sync/sync/dev.atick.sync.manager/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sync/sync/dev.atick.sync.manager/#types","title":"Types","text":"Name Summary Sync [androidJvm]object Sync SyncManagerImpl [androidJvm]class SyncManagerImpl@Injectconstructor(context: Context) : SyncManagerImplementation of SyncManager."},{"location":"sync/sync/dev.atick.sync.manager/-sync/","title":"Index","text":"<p>//sync/dev.atick.sync.manager/Sync</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync/#sync","title":"Sync","text":"<p>[androidJvm]\\ object Sync</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync/#functions","title":"Functions","text":"Name Summary initialize [androidJvm]fun initialize(context: Context)Initializes the sync process that keeps the app's data current. This method should be called only once from the app module's Application.onCreate()."},{"location":"sync/sync/dev.atick.sync.manager/-sync/initialize/","title":"Initialize","text":"<p>//sync/dev.atick.sync.manager/Sync/initialize</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync/initialize/#initialize","title":"initialize","text":"<p>[androidJvm]\\ fun initialize(context: Context)</p> <p>Initializes the sync process that keeps the app's data current. This method should be called only once from the app module's Application.onCreate().</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync/initialize/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The application context."},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/","title":"Index","text":"<p>//sync/dev.atick.sync.manager/SyncManagerImpl</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/#syncmanagerimpl","title":"SyncManagerImpl","text":"<p>class SyncManagerImpl@Injectconstructor(context: Context) : SyncManager</p> <p>Implementation of SyncManager.</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> context Context."},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/#constructors","title":"Constructors","text":"SyncManagerImpl [androidJvm]@Injectconstructor(context: Context)"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/#properties","title":"Properties","text":"Name Summary isSyncing [androidJvm]open override val isSyncing: Flow&lt;Boolean&gt;Provides a flow that emits <code>true</code> if a sync operation is in progress, <code>false</code> otherwise."},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/#functions","title":"Functions","text":"Name Summary requestSync [androidJvm]open override fun requestSync()Requests a sync operation."},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/-sync-manager-impl/","title":"sync manager impl","text":"<p>//sync/dev.atick.sync.manager/SyncManagerImpl/SyncManagerImpl</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/-sync-manager-impl/#syncmanagerimpl","title":"SyncManagerImpl","text":"<p>[androidJvm]\\</p> <p>@Inject</p> <p>constructor(context: Context)</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/-sync-manager-impl/#parameters","title":"Parameters","text":"<p>androidJvm</p> context Context."},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/is-syncing/","title":"Is syncing","text":"<p>//sync/dev.atick.sync.manager/SyncManagerImpl/isSyncing</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/is-syncing/#issyncing","title":"isSyncing","text":"<p>[androidJvm]\\ open override val isSyncing: Flow&lt;Boolean&gt;</p> <p>Provides a flow that emits <code>true</code> if a sync operation is in progress, <code>false</code> otherwise.</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/request-sync/","title":"Request sync","text":"<p>//sync/dev.atick.sync.manager/SyncManagerImpl/requestSync</p>"},{"location":"sync/sync/dev.atick.sync.manager/-sync-manager-impl/request-sync/#requestsync","title":"requestSync","text":"<p>[androidJvm]\\ open override fun requestSync()</p> <p>Requests a sync operation.</p>"},{"location":"sync/sync/dev.atick.sync.worker/","title":"Index","text":"<p>//sync/dev.atick.sync.worker</p>"},{"location":"sync/sync/dev.atick.sync.worker/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"sync/sync/dev.atick.sync.worker/#types","title":"Types","text":"Name Summary DelegatingWorker [androidJvm]class DelegatingWorker(appContext: Context, workerParams: WorkerParameters) : CoroutineWorkerA worker that delegates sync to another CoroutineWorker constructed with a HiltWorkerFactory. HiltWorkerFactoryEntryPoint [androidJvm]interface HiltWorkerFactoryEntryPointAn entry point to retrieve the HiltWorkerFactory at runtime SyncWorker [androidJvm]class SyncWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParameters: WorkerParameters, ioDispatcher: CoroutineDispatcher, homeRepository: HomeRepository) : CoroutineWorkerWorker to sync data."},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/","title":"Index","text":"<p>//sync/dev.atick.sync.worker/DelegatingWorker</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/#delegatingworker","title":"DelegatingWorker","text":"<p>[androidJvm]\\ class DelegatingWorker(appContext: Context, workerParams: WorkerParameters) : CoroutineWorker</p> <p>A worker that delegates sync to another CoroutineWorker constructed with a HiltWorkerFactory.</p> <p>This allows for creating and using CoroutineWorker instances with extended arguments without having to provide a custom WorkManager configuration that the app module needs to utilize.</p> <p>In other words, it allows for custom workers in a library module without having to own configuration of the WorkManager singleton.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/#constructors","title":"Constructors","text":"DelegatingWorker [androidJvm]constructor(appContext: Context, workerParams: WorkerParameters)"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]open suspend override fun doWork(): ListenableWorker.ResultDelegates the work to the delegate worker getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend override fun getForegroundInfo(): ForegroundInfoRetrieves the foreground info from the delegate worker getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/-delegating-worker/","title":"delegating worker","text":"<p>//sync/dev.atick.sync.worker/DelegatingWorker/DelegatingWorker</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/-delegating-worker/#delegatingworker","title":"DelegatingWorker","text":"<p>[androidJvm]\\ constructor(appContext: Context, workerParams: WorkerParameters)</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/do-work/","title":"Do work","text":"<p>//sync/dev.atick.sync.worker/DelegatingWorker/doWork</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\ open suspend override fun doWork(): ListenableWorker.Result</p> <p>Delegates the work to the delegate worker</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/get-foreground-info/","title":"Get foreground info","text":"<p>//sync/dev.atick.sync.worker/DelegatingWorker/getForegroundInfo</p>"},{"location":"sync/sync/dev.atick.sync.worker/-delegating-worker/get-foreground-info/#getforegroundinfo","title":"getForegroundInfo","text":"<p>[androidJvm]\\ open suspend override fun getForegroundInfo(): ForegroundInfo</p> <p>Retrieves the foreground info from the delegate worker</p>"},{"location":"sync/sync/dev.atick.sync.worker/-hilt-worker-factory-entry-point/","title":"Index","text":"<p>//sync/dev.atick.sync.worker/HiltWorkerFactoryEntryPoint</p>"},{"location":"sync/sync/dev.atick.sync.worker/-hilt-worker-factory-entry-point/#hiltworkerfactoryentrypoint","title":"HiltWorkerFactoryEntryPoint","text":"<p>[androidJvm]\\ interface HiltWorkerFactoryEntryPoint</p> <p>An entry point to retrieve the HiltWorkerFactory at runtime</p>"},{"location":"sync/sync/dev.atick.sync.worker/-hilt-worker-factory-entry-point/#functions","title":"Functions","text":"Name Summary hiltWorkerFactory [androidJvm]abstract fun hiltWorkerFactory(): HiltWorkerFactory"},{"location":"sync/sync/dev.atick.sync.worker/-hilt-worker-factory-entry-point/hilt-worker-factory/","title":"Hilt worker factory","text":"<p>//sync/dev.atick.sync.worker/HiltWorkerFactoryEntryPoint/hiltWorkerFactory</p>"},{"location":"sync/sync/dev.atick.sync.worker/-hilt-worker-factory-entry-point/hilt-worker-factory/#hiltworkerfactory","title":"hiltWorkerFactory","text":"<p>[androidJvm]\\ abstract fun hiltWorkerFactory(): HiltWorkerFactory</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/","title":"Index","text":"<p>//sync/dev.atick.sync.worker/SyncWorker</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/#syncworker","title":"SyncWorker","text":"<p>class SyncWorker@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParameters: WorkerParameters, ioDispatcher: CoroutineDispatcher, homeRepository: HomeRepository) : CoroutineWorker</p> <p>Worker to sync data.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The Context. workerParameters The WorkerParameters. ioDispatcher The CoroutineDispatcher for I/O operations. homeRepository The HomeRepository."},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/#constructors","title":"Constructors","text":"SyncWorker [androidJvm]@AssistedInjectconstructor(@Assistedcontext: Context, @AssistedworkerParameters: WorkerParameters, ioDispatcher: CoroutineDispatcher, homeRepository: HomeRepository)"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/#types","title":"Types","text":"Name Summary Companion [androidJvm]object Companion"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/#properties","title":"Properties","text":"Name Summary coroutineContext [androidJvm]open val ~~coroutineContext~~: CoroutineDispatcher"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/#functions","title":"Functions","text":"Name Summary doWork [androidJvm]open suspend override fun doWork(): ListenableWorker.ResultPerforms the work to sync data. getApplicationContext [androidJvm]@NonNullfun getApplicationContext(): Context getBackgroundExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getBackgroundExecutor(): Executor getForegroundInfo [androidJvm]open suspend override fun getForegroundInfo(): ForegroundInfoProvides the foreground information for the worker. getForegroundInfoAsync [androidJvm]override fun getForegroundInfoAsync(): ListenableFuture&lt;ForegroundInfo&gt; getId [androidJvm]@NonNullfun getId(): UUID getInputData [androidJvm]@NonNullfun getInputData(): Data getNetwork [androidJvm]@RequiresApi(value = 28)@Nullablefun getNetwork(): Network? getRunAttemptCount [androidJvm]@IntRange(from = 0)fun getRunAttemptCount(): Int getStopReason [androidJvm]@RequiresApi(value = 31)fun getStopReason(): Int getTags [androidJvm]@NonNullfun getTags(): MutableSet&lt;String&gt; getTaskExecutor [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getTaskExecutor(): TaskExecutor getTriggeredContentAuthorities [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentAuthorities(): MutableList&lt;String&gt; getTriggeredContentUris [androidJvm]@RequiresApi(value = 24)@NonNullfun getTriggeredContentUris(): MutableList&lt;Uri&gt; getWorkerFactory [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])@NonNullopen fun getWorkerFactory(): WorkerFactory isStopped [androidJvm]fun isStopped(): Boolean isUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun isUsed(): Boolean onStopped [androidJvm]override fun onStopped() setForeground [androidJvm]suspend fun setForeground(foregroundInfo: ForegroundInfo) setForegroundAsync [androidJvm]@NonNullfun setForegroundAsync(@NonNullforegroundInfo: ForegroundInfo): ListenableFuture setProgress [androidJvm]suspend fun setProgress(data: Data) setProgressAsync [androidJvm]@NonNullopen fun setProgressAsync(@NonNulldata: Data): ListenableFuture setUsed [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun setUsed() startWork [androidJvm]override fun startWork(): ListenableFuture&lt;ListenableWorker.Result&gt; stop [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP])fun stop(reason: Int)"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-sync-worker/","title":"sync worker","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/SyncWorker</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-sync-worker/#syncworker","title":"SyncWorker","text":"<p>[androidJvm]\\</p> <p>@AssistedInject</p> <p>constructor(@Assistedcontext: Context, @AssistedworkerParameters: WorkerParameters, ioDispatcher: CoroutineDispatcher, homeRepository: HomeRepository)</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-sync-worker/#parameters","title":"Parameters","text":"<p>androidJvm</p> context The Context. workerParameters The WorkerParameters. ioDispatcher The CoroutineDispatcher for I/O operations. homeRepository The HomeRepository."},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/do-work/","title":"Do work","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/doWork</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/do-work/#dowork","title":"doWork","text":"<p>[androidJvm]\\ open suspend override fun doWork(): ListenableWorker.Result</p> <p>Performs the work to sync data.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/do-work/#return","title":"Return","text":"<p>The result of the work.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/get-foreground-info/","title":"Get foreground info","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/getForegroundInfo</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/get-foreground-info/#getforegroundinfo","title":"getForegroundInfo","text":"<p>[androidJvm]\\ open suspend override fun getForegroundInfo(): ForegroundInfo</p> <p>Provides the foreground information for the worker.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/get-foreground-info/#return","title":"Return","text":"<p>The foreground information.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/","title":"Index","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/Companion</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/#companion","title":"Companion","text":"<p>[androidJvm]\\ object Companion</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/#properties","title":"Properties","text":"Name Summary SyncConstraints [androidJvm]val SyncConstraints: ConstraintsNetwork constraints for syncing data. TOTAL_SYNC_ATTEMPTS [androidJvm]const val TOTAL_SYNC_ATTEMPTS: Int = 3The total number of sync attempts."},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/#functions","title":"Functions","text":"Name Summary startUpSyncWork [androidJvm]fun startUpSyncWork(): OneTimeWorkRequestStarts the work to sync data."},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/-sync-constraints/","title":"sync constraints","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/Companion/SyncConstraints</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/-sync-constraints/#syncconstraints","title":"SyncConstraints","text":"<p>[androidJvm]\\ val SyncConstraints: Constraints</p> <p>Network constraints for syncing data.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/-t-o-t-a-l_-s-y-n-c_-a-t-t-e-m-p-t-s/","title":"t o t a l  s y n c  a t t e m p t s","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/Companion/TOTAL_SYNC_ATTEMPTS</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/-t-o-t-a-l_-s-y-n-c_-a-t-t-e-m-p-t-s/#total_sync_attempts","title":"TOTAL_SYNC_ATTEMPTS","text":"<p>[androidJvm]\\ const val TOTAL_SYNC_ATTEMPTS: Int = 3</p> <p>The total number of sync attempts.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/start-up-sync-work/","title":"Start up sync work","text":"<p>//sync/dev.atick.sync.worker/SyncWorker/Companion/startUpSyncWork</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/start-up-sync-work/#startupsyncwork","title":"startUpSyncWork","text":"<p>[androidJvm]\\ fun startUpSyncWork(): OneTimeWorkRequest</p> <p>Starts the work to sync data.</p>"},{"location":"sync/sync/dev.atick.sync.worker/-sync-worker/-companion/start-up-sync-work/#return","title":"Return","text":"<p>The one-time work request to sync data.</p>"}]}